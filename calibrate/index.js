// Generated by js_of_ocaml 2.8.4
(function(joo_global_object)
   {"use strict";
    function js_read_camera(video)
     {navigator.getUserMedia
      =
      navigator.getUserMedia
      ||
      navigator.webkitGetUserMedia
      ||
      navigator.mozGetUserMedia;
      navigator.getUserMedia
       ({video:{width:1920,height:1080}},
        function(stream)
         {try
           {video.src = window.URL.createObjectURL(stream)}
          catch(err){video.src = stream}},
        function(){throw Error("Cannot capture user camera.")})}
    function caml_array_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_string(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return !/[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 128)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 224)
           {v = c - 12416;if(v < 128)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 240)
               {v = c - 925824;if(v < 2048 || v >= 55295 && v < 57344)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & -64)
                  ==
                  128
                  &&
                  c1
                  <
                  245)
                 {v = c2 - 63447168 + (c << 6);
                  if(v < 65536 || v > 1114111)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 65535)
          t += String.fromCharCode(55232 + (v >> 10),56320 + (v & 1023));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlString(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlString.prototype.toString = function(){return caml_to_js_string(this)};
    function caml_new_string(s){return new MlString(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.22507385850720138e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int_compare(a,b)
     {if(a < b)return -1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?-1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(!(total && a === b))
         if(a instanceof MlString)
          if(b instanceof MlString)
           {if(a !== b){var x=caml_string_compare(a,b);if(x != 0)return x}}
          else
           return 1;
         else
          if(a instanceof Array && a[0] === (a[0] | 0))
           {var ta=a[0];
            if(ta === 254)ta = 0;
            if(ta === 250)
             {a = a[1];continue}
            else
             if(b instanceof Array && b[0] === (b[0] | 0))
              {var tb=b[0];
               if(tb === 254)tb = 0;
               if(tb === 250)
                {b = b[1];continue}
               else
                if(ta != tb)
                 return ta < tb?-1:1;
                else
                 switch(ta)
                  {case 248:
                    var x=caml_int_compare(a[2],b[2]);if(x != 0)return x;break;
                   case 251:caml_invalid_argument("equal: abstract value");
                   case 255:
                    var x=caml_int64_compare(a,b);if(x != 0)return x;break;
                   default:
                    if(a.length != b.length)return a.length < b.length?-1:1;
                    if(a.length > 1)stack.push(a,b,1)}}
             else
              return 1}
          else
           if
            (b instanceof MlString
             ||
             b instanceof Array
             &&
             b[0]
             ===
             (b[0] | 0))
            return -1;
           else
            if(typeof a != "number" && a && a.compare)
             return a.compare(b,total);
            else
             if(typeof a == "function")
              caml_invalid_argument("equal: functional value");
             else
              {if(a < b)return -1;
               if(a > b)return 1;
               if(a != b)
                {if(!total)return NaN;if(a == a)return 1;if(b == b)return -1}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_convert_raw_backtrace_slot()
     {caml_failwith("caml_convert_raw_backtrace_slot")}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlString(len?2:9,"",len)}
    function caml_fill_string(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_bytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_parse_format(fmt)
     {fmt = caml_bytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:-1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_new_string(buffer)}
    function caml_format_float(fmt,x)
     {var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == -Infinity){f.sign = -1;x = -x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(!isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = x.toFixed(prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+s.slice(j + 1);
           if(exp < -4 || x >= 1e+21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_bytes_of_string(fmt) == "%d")return caml_new_string("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = -1;i = -i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_get_exception_raw_backtrace(){return [0]}
    var caml_method_cache=[];
    function caml_get_public_method(obj,tag,cacheid)
     {var meths=obj[1],ofs=caml_method_cache[cacheid];
      if(ofs === null)
       for(var i=caml_method_cache.length;i < cacheid;i++)
        caml_method_cache[i] = 0;
      else
       if(meths[ofs] === tag)return meths[ofs - 1];
      var li=3,hi=meths[1] * 2 + 1,mi;
      while(li < hi)
       {mi = li + hi >> 1 | 1;if(tag < meths[mi + 1])hi = mi - 2;else li = mi}
      caml_method_cache[cacheid] = li + 1;
      return tag == meths[li + 1]?meths[li]:0}
    function caml_greaterequal(x,y)
     {return +(caml_compare_val(x,y,false) >= 0)}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 128)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 2048)
         {t += String.fromCharCode(192 | c >> 6);
          t += String.fromCharCode(128 | c & 63)}
        else
         if(c < 55296 || c >= 57343)
          t
          +=
          String.fromCharCode(224 | c >> 12,128 | c >> 6 & 63,128 | c & 63);
         else
          if
           (c
            >=
            56319
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            56320
            ||
            d
            >
            57343)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 56613888;
            t
            +=
            String.fromCharCode
             (240 | c >> 18,128 | c >> 12 & 63,128 | c >> 6 & 63,128 | c & 63)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(!caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlString(tag,s,s.length)}
    function caml_hexstring_of_float(x,prec,style)
     {if(!isFinite(x))
       {if(isNaN(x))return caml_js_to_string("nan");
        return caml_js_to_string(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == -Infinity?1:x >= 0?0:1;
      if(sign)x = -x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > -1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_js_to_string
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return (x[3] | x[2] | x[1]) == 0}
    function caml_int64_of_int32(x)
     {return [255,x & 16777215,x >> 24 & 16777215,x >> 31 & 65535]}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_int64_sub(x,y)
     {var
       z1=x[1] - y[1],
       z2=x[2] - y[2] + (z1 >> 24),
       z3=x[3] - y[3] + (z2 >> 24);
      return [255,z1 & 16777215,z2 & 16777215,z3 & 65535]}
    function caml_int64_ucompare(x,y)
     {if(x[3] > y[3])return 1;
      if(x[3] < y[3])return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int64_lsl1(x)
     {x[3] = x[3] << 1 | x[2] >> 23;
      x[2] = (x[2] << 1 | x[1] >> 23) & 16777215;
      x[1] = x[1] << 1 & 16777215}
    function caml_int64_lsr1(x)
     {x[1] = (x[1] >>> 1 | x[2] << 23) & 16777215;
      x[2] = (x[2] >>> 1 | x[3] << 23) & 16777215;
      x[3] = x[3] >>> 1}
    function caml_int64_udivmod(x,y)
     {var
       offset=0,
       modulus=caml_obj_dup(x),
       divisor=caml_obj_dup(y),
       quotient=[255,0,0,0];
      while(caml_int64_ucompare(modulus,divisor) > 0)
       {offset++;caml_int64_lsl1(divisor)}
      while(offset >= 0)
       {offset--;
        caml_int64_lsl1(quotient);
        if(caml_int64_ucompare(modulus,divisor) >= 0)
         {quotient[1]++;modulus = caml_int64_sub(modulus,divisor)}
        caml_int64_lsr1(divisor)}
      return [0,quotient,modulus]}
    function caml_int64_to_int32(x){return x[1] | x[2] << 24}
    function caml_int64_is_negative(x){return x[3] << 16 < 0}
    function caml_int64_neg(x)
     {var y1=-x[1],y2=-x[2] + (y1 >> 24),y3=-x[3] + (y2 >> 24);
      return [255,y1 & 16777215,y2 & 16777215,y3 & 65535]}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = -1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=caml_int64_udivmod(x,wbase);
        x = p[1];
        buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer}
      while
       (!caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_js_from_array(a){return raw_array_sub(a,1,a.length - 1)}
    function caml_js_call(f,o,args)
     {return f.apply(o,caml_js_from_array(args))}
    function caml_js_eval_string(s){return eval(s.toString())}
    function caml_js_get(o,f){return o[f]}
    function caml_js_get_console()
     {var
       c=joo_global_object.console?joo_global_object.console:{},
       m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
      function f(){}
      for(var i=0;i < m.length;i++)if(!c[m[i]])c[m[i]] = f;
      return c}
    function caml_js_pure_expr(f){return f()}
    function raw_array_cons(a,x)
     {var l=a.length,b=new Array(l + 1);
      b[0] = x;
      for(var i=1;i <= l;i++)b[i] = a[i - 1];
      return b}
    function caml_js_to_array(a){return raw_array_cons(a,0)}
    function raw_array_copy(a)
     {var l=a.length,b=new Array(l);
      for(var i=0;i < l;i++)b[i] = a[i];
      return b}
    function caml_js_wrap_callback(f)
     {return function()
       {return arguments.length > 0
                ?caml_call_gen(f,raw_array_copy(arguments))
                :caml_call_gen(f,[undefined])}}
    function caml_lessequal(x,y){return +(caml_compare_val(x,y,false) <= 0)}
    function caml_lessthan(x,y){return +(caml_compare_val(x,y,false) < 0)}
    function caml_make_vect(len,init)
     {var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_string_of_array(a){return new MlString(4,a,a.length)}
    var
     caml_md5_string=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 128 << 8 * (i & 3);
           for(i = (i & ~3) + 8;(i & 63) < 60;i += 4)buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 536870911;
           var w=[1732584193,4023233417,2562383102,271733878];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,3614090360);
             d = ff(d,a,b,c,buffer[i + 1],12,3905402710);
             c = ff(c,d,a,b,buffer[i + 2],17,606105819);
             b = ff(b,c,d,a,buffer[i + 3],22,3250441966);
             a = ff(a,b,c,d,buffer[i + 4],7,4118548399);
             d = ff(d,a,b,c,buffer[i + 5],12,1200080426);
             c = ff(c,d,a,b,buffer[i + 6],17,2821735955);
             b = ff(b,c,d,a,buffer[i + 7],22,4249261313);
             a = ff(a,b,c,d,buffer[i + 8],7,1770035416);
             d = ff(d,a,b,c,buffer[i + 9],12,2336552879);
             c = ff(c,d,a,b,buffer[i + 10],17,4294925233);
             b = ff(b,c,d,a,buffer[i + 11],22,2304563134);
             a = ff(a,b,c,d,buffer[i + 12],7,1804603682);
             d = ff(d,a,b,c,buffer[i + 13],12,4254626195);
             c = ff(c,d,a,b,buffer[i + 14],17,2792965006);
             b = ff(b,c,d,a,buffer[i + 15],22,1236535329);
             a = gg(a,b,c,d,buffer[i + 1],5,4129170786);
             d = gg(d,a,b,c,buffer[i + 6],9,3225465664);
             c = gg(c,d,a,b,buffer[i + 11],14,643717713);
             b = gg(b,c,d,a,buffer[i + 0],20,3921069994);
             a = gg(a,b,c,d,buffer[i + 5],5,3593408605);
             d = gg(d,a,b,c,buffer[i + 10],9,38016083);
             c = gg(c,d,a,b,buffer[i + 15],14,3634488961);
             b = gg(b,c,d,a,buffer[i + 4],20,3889429448);
             a = gg(a,b,c,d,buffer[i + 9],5,568446438);
             d = gg(d,a,b,c,buffer[i + 14],9,3275163606);
             c = gg(c,d,a,b,buffer[i + 3],14,4107603335);
             b = gg(b,c,d,a,buffer[i + 8],20,1163531501);
             a = gg(a,b,c,d,buffer[i + 13],5,2850285829);
             d = gg(d,a,b,c,buffer[i + 2],9,4243563512);
             c = gg(c,d,a,b,buffer[i + 7],14,1735328473);
             b = gg(b,c,d,a,buffer[i + 12],20,2368359562);
             a = hh(a,b,c,d,buffer[i + 5],4,4294588738);
             d = hh(d,a,b,c,buffer[i + 8],11,2272392833);
             c = hh(c,d,a,b,buffer[i + 11],16,1839030562);
             b = hh(b,c,d,a,buffer[i + 14],23,4259657740);
             a = hh(a,b,c,d,buffer[i + 1],4,2763975236);
             d = hh(d,a,b,c,buffer[i + 4],11,1272893353);
             c = hh(c,d,a,b,buffer[i + 7],16,4139469664);
             b = hh(b,c,d,a,buffer[i + 10],23,3200236656);
             a = hh(a,b,c,d,buffer[i + 13],4,681279174);
             d = hh(d,a,b,c,buffer[i + 0],11,3936430074);
             c = hh(c,d,a,b,buffer[i + 3],16,3572445317);
             b = hh(b,c,d,a,buffer[i + 6],23,76029189);
             a = hh(a,b,c,d,buffer[i + 9],4,3654602809);
             d = hh(d,a,b,c,buffer[i + 12],11,3873151461);
             c = hh(c,d,a,b,buffer[i + 15],16,530742520);
             b = hh(b,c,d,a,buffer[i + 2],23,3299628645);
             a = ii(a,b,c,d,buffer[i + 0],6,4096336452);
             d = ii(d,a,b,c,buffer[i + 7],10,1126891415);
             c = ii(c,d,a,b,buffer[i + 14],15,2878612391);
             b = ii(b,c,d,a,buffer[i + 5],21,4237533241);
             a = ii(a,b,c,d,buffer[i + 12],6,1700485571);
             d = ii(d,a,b,c,buffer[i + 3],10,2399980690);
             c = ii(c,d,a,b,buffer[i + 10],15,4293915773);
             b = ii(b,c,d,a,buffer[i + 1],21,2240044497);
             a = ii(a,b,c,d,buffer[i + 8],6,1873313359);
             d = ii(d,a,b,c,buffer[i + 15],10,4264355552);
             c = ii(c,d,a,b,buffer[i + 6],15,2734768916);
             b = ii(b,c,d,a,buffer[i + 13],21,1309151649);
             a = ii(a,b,c,d,buffer[i + 4],6,4149444226);
             d = ii(d,a,b,c,buffer[i + 11],10,3174756917);
             c = ii(c,d,a,b,buffer[i + 2],15,718787259);
             b = ii(b,c,d,a,buffer[i + 9],21,3951481745);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 255;
           return t}
         return function(s,ofs,len)
          {var buf=[];
           switch(s.t & 6)
            {default:caml_convert_string_to_bytes(s);case 0:
              var b=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                b.charCodeAt(j)
                |
                b.charCodeAt(j + 1)
                <<
                8
                |
                b.charCodeAt(j + 2)
                <<
                16
                |
                b.charCodeAt(j + 3)
                <<
                24}
              for(;i < len;i++)
               buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
              break;
             case 4:
              var a=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
              for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_ml_flush(oc)
     {if(!oc.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(oc.buffer == "")return 0;
      if(oc.output)
       switch(oc.output.length)
        {case 2:oc.output(oc,oc.buffer);break;default:oc.output(oc.buffer)}
      oc.buffer = "";
      return 0}
    var file_inode=0;
    function unix_gettimeofday(){return new Date().getTime() / 1e3}
    function unix_time(){return Math.floor(unix_gettimeofday())}
    function MlFile(content)
     {this.data = content;
      this.inode = file_inode++;
      var now=unix_time();
      this.atime = now;
      this.mtime = now;
      this.ctime = now}
    MlFile.prototype
    =
    {truncate:function(){this.data = caml_create_string(0);this.modified()},
     modified:
     function(){var now=unix_time();this.atime = now;this.mtime = now}};
    function caml_ml_string_length(s){return s.l}
    function caml_raise_no_such_file(name)
     {name = name instanceof MlString?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    var caml_current_dir="/";
    function caml_make_path(name)
     {name = name instanceof MlString?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function MlDir()
     {this.content = {};
      this.inode = file_inode++;
      var now=unix_time();
      this.atime = now;
      this.mtime = now;
      this.ctime = now}
    MlDir.prototype
    =
    {exists:function(name){return this.content[name]?1:0},
     mk:function(name,c){this.content[name] = c},
     get:function(name){return this.content[name]},
     list:function(){var a=[];for(var n in this.content)a.push(n);return a},
     remove:function(name){delete this.content[name]}};
    var caml_root_dir=new MlDir();
    caml_root_dir.mk("",new MlDir());
    function caml_fs_content(path)
     {var dir=caml_root_dir;
      for(var i=0;i < path.length;i++)
       {if(!(dir.exists && dir.exists(path[i])))
         caml_raise_no_such_file(path.orig);
        dir = dir.get(path[i])}
      return dir}
    function caml_sys_is_directory(name)
     {var path=caml_make_path(name),dir=caml_fs_content(path);
      return dir instanceof MlDir?1:0}
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    function caml_fs_register(name,content)
     {var path=caml_make_path(name),dir=caml_root_dir;
      for(var i=0;i < path.length - 1;i++)
       {var d=path[i];
        if(!dir.exists(d))dir.mk(d,new MlDir());
        dir = dir.get(d);
        if(!(dir instanceof MlDir))
         caml_raise_sys_error(path.orig + " : file already exists")}
      var d=path[path.length - 1];
      if(dir.exists(d))
       caml_raise_sys_error(path.orig + " : file already exists");
      if(content instanceof MlDir)
       dir.mk(d,content);
      else
       if(content instanceof MlFile)
        dir.mk(d,content);
       else
        if(content instanceof MlString)
         dir.mk(d,new MlFile(content));
        else
         if(content instanceof Array)
          dir.mk(d,new MlFile(caml_string_of_array(content)));
         else
          if(content.toString)
           {var mlstring=caml_new_string(content.toString());
            dir.mk(d,new MlFile(mlstring))}
          else
           caml_invalid_argument("caml_fs_register");
      return 0}
    function caml_sys_file_exists(name)
     {var dir=caml_root_dir,path=caml_make_path(name),auto_load,pos;
      for(var i=0;i < path.length;i++)
       {if(dir.auto){auto_load = dir.auto;pos = i}
        if(!(dir.exists && dir.exists(path[i])))
         return auto_load?auto_load(path,pos):0;
        dir = dir.get(path[i])}
      return 1}
    function caml_sys_open_internal(idx,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?caml_ml_string_length(file.data):0;
      info.flags = flags;
      caml_global_data.fds[idx] = info;
      caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      var name2=name.toString(),path=caml_make_path(name);
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name2 + " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name2 + " : flags Open_text and Open_binary are not compatible");
      if(caml_sys_file_exists(name))
       {if(caml_sys_is_directory(name))
         caml_raise_sys_error(name2 + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(name2 + " : file already exists");
        var
         idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0,
         file=caml_fs_content(path);
        if(f.truncate)file.truncate();
        return caml_sys_open_internal(idx + 1,file,f)}
      else
       if(f.create)
        {var idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
         caml_fs_register(name,caml_create_string(0));
         var file=caml_fs_content(path);
         return caml_sys_open_internal(idx + 1,file,f)}
       else
        caml_raise_no_such_file(name)}
    caml_sys_open_internal(0,new MlFile(caml_create_string(0)));
    caml_sys_open_internal(1,new MlFile(caml_create_string(0)));
    caml_sys_open_internal(2,new MlFile(caml_create_string(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      return {file:data.file,offset:data.offset,fd:fd,opened:true,refill:null}}
    function js_print_stderr(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    var caml_ml_out_channels=new Array();
    function caml_std_output(chan,s)
     {var
       str=caml_new_string(s),
       slen=caml_ml_string_length(str),
       clen=caml_ml_string_length(chan.file.data),
       offset=chan.offset;
      if(offset + slen >= clen)
       {var new_str=caml_create_string(offset + slen);
        caml_blit_string(chan.file.data,0,new_str,0,clen);
        caml_blit_string(str,0,new_str,offset,slen);
        chan.file.data = new_str}
      chan.offset += slen;
      chan.file.modified();
      return 0}
    function caml_ml_open_descriptor_out(fd)
     {var output;
      switch(fd)
       {case 1:output = js_print_stdout;break;
        case 2:output = js_print_stderr;break;
        default:output = caml_std_output}
      var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         buffer:"",
         output:output};
      caml_ml_out_channels[channel.fd] = channel;
      return channel}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_out_channels.length;c++)
       if(caml_ml_out_channels[c] && caml_ml_out_channels[c].opened)
        l = [0,caml_ml_out_channels[c],l];
      return l}
    function caml_ml_output(oc,buffer,offset,len)
     {if(!oc.opened)caml_raise_sys_error("Cannot output to a closed channel");
      var string;
      if(offset == 0 && caml_ml_string_length(buffer) == len)
       string = buffer;
      else
       {string = caml_create_string(len);
        caml_blit_string(buffer,offset,string,0,len)}
      var jsstring=string.toString(),id=jsstring.lastIndexOf("\n");
      if(id < 0)
       oc.buffer += jsstring;
      else
       {oc.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(oc);
        oc.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output_char(oc,c)
     {var s=caml_new_string(String.fromCharCode(c));
      caml_ml_output(oc,s,0,1);
      return 0}
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_notequal(x,y){return +(caml_compare_val(x,y,false) != 0)}
    function caml_obj_block(tag,size)
     {var o=new Array(size + 1);
      o[0] = tag;
      for(var i=1;i <= size;i++)o[i] = 0;
      return o}
    function caml_obj_is_block(x){return +(x instanceof Array)}
    function caml_obj_set_tag(x,tag){x[0] = tag;return 0}
    function caml_obj_tag(x)
     {return x instanceof Array?x[0]:x instanceof MlString?252:1e3}
    function caml_register_global(n,v,name_opt)
     {caml_global_data[n + 1] = v;if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_bytes_of_string(nm)] = v;return 0}
    function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_string_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_string_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_string_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_string_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_set(s,i,c)}
    function caml_sys_const_max_wosize(){return 2147483647 / 4 | 0}
    function caml_sys_exit(code)
     {var g=joo_global_object;
      if(g.quit)g.quit(code);
      if(g.process && g.process.exit)g.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=joo_global_object,n=name.toString();
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_js_to_string(g.process.env[n]);
      caml_raise_not_found()}
    function caml_sys_random_seed()
     {var x=new Date() ^ 4294967295 * Math.random();return [0,x]}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error)
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function unix_inet_addr_of_string(){return 0}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4?f(a0,a1,a2,a3):caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     locfmt=
      [0,
       [11,
        caml_new_string('File "'),
        [2,
         0,
         [11,
          caml_new_string('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", characters "),
            [4,0,0,0,[12,45,[4,0,0,0,[11,caml_new_string(": "),[2,0,0]]]]]]]]]],
       caml_new_string('File "%s", line %d, characters %d-%d: %s')],
     state_return_unit=[0,0],
     meths=
      [0,
       caml_new_string("size"),
       caml_new_string("set_reference"),
       caml_new_string("resize"),
       caml_new_string("push"),
       caml_new_string("count"),
       caml_new_string("closed"),
       caml_new_string("close"),
       caml_new_string("blocked")],
     vals=[0,caml_new_string("closed")],
     shared=
      [0,
       caml_new_string("blocked"),
       caml_new_string("close"),
       caml_new_string("push"),
       caml_new_string("count"),
       caml_new_string("size"),
       caml_new_string("set_reference"),
       caml_new_string("resize"),
       caml_new_string("closed")],
     f=
      [0,
       [11,caml_new_string("can't find element "),[2,0,0]],
       caml_new_string("can't find element %s")],
     id=caml_new_string("video"),
     id$0=caml_new_string("canvas");
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _f_=caml_new_string("output_substring"),
     _e_=caml_new_string("%.12g"),
     _d_=caml_new_string("."),
     _b_=caml_new_string("true"),
     _c_=caml_new_string("false"),
     _h_=caml_new_string("nth"),
     _i_=caml_new_string("List.nth"),
     _g_=caml_new_string("hd"),
     _j_=caml_new_string("\\\\"),
     _k_=caml_new_string("\\'"),
     _l_=caml_new_string("\\b"),
     _m_=caml_new_string("\\t"),
     _n_=caml_new_string("\\n"),
     _o_=caml_new_string("\\r"),
     _s_=caml_new_string("String.contains_from / Bytes.contains_from"),
     _r_=caml_new_string("String.blit / Bytes.blit_string"),
     _q_=caml_new_string("Bytes.blit"),
     _p_=caml_new_string("String.sub / Bytes.sub"),
     _t_=caml_new_string("Array.blit"),
     _y_=caml_new_string("Map.remove_min_elt"),
     _z_=[0,0,0,0],
     _A_=[0,caml_new_string("map.ml"),274,10],
     _B_=[0,0,0],
     _u_=caml_new_string("Map.bal"),
     _v_=caml_new_string("Map.bal"),
     _w_=caml_new_string("Map.bal"),
     _x_=caml_new_string("Map.bal"),
     _D_=caml_new_string("Queue.Empty"),
     _E_=caml_new_string("CamlinternalLazy.Undefined"),
     _G_=caml_new_string("Buffer.add_substring/add_subbytes"),
     _F_=caml_new_string("Buffer.add: cannot grow buffer"),
     _P_=caml_new_string("%c"),
     _Q_=caml_new_string("%s"),
     _R_=caml_new_string("%i"),
     _S_=caml_new_string("%li"),
     _T_=caml_new_string("%ni"),
     _U_=caml_new_string("%Li"),
     _V_=caml_new_string("%f"),
     _W_=caml_new_string("%B"),
     _X_=caml_new_string("%{"),
     _Y_=caml_new_string("%}"),
     _Z_=caml_new_string("%("),
     ___=caml_new_string("%)"),
     _$_=caml_new_string("%a"),
     _aa_=caml_new_string("%t"),
     _ab_=caml_new_string("%?"),
     _ac_=caml_new_string("%r"),
     _ad_=caml_new_string("%_r"),
     _ae_=[0,caml_new_string("camlinternalFormat.ml"),845,23],
     _ap_=[0,caml_new_string("camlinternalFormat.ml"),809,21],
     _ah_=[0,caml_new_string("camlinternalFormat.ml"),810,21],
     _aq_=[0,caml_new_string("camlinternalFormat.ml"),813,21],
     _ai_=[0,caml_new_string("camlinternalFormat.ml"),814,21],
     _ar_=[0,caml_new_string("camlinternalFormat.ml"),817,19],
     _aj_=[0,caml_new_string("camlinternalFormat.ml"),818,19],
     _as_=[0,caml_new_string("camlinternalFormat.ml"),821,22],
     _ak_=[0,caml_new_string("camlinternalFormat.ml"),822,22],
     _at_=[0,caml_new_string("camlinternalFormat.ml"),826,30],
     _al_=[0,caml_new_string("camlinternalFormat.ml"),827,30],
     _an_=[0,caml_new_string("camlinternalFormat.ml"),831,26],
     _af_=[0,caml_new_string("camlinternalFormat.ml"),832,26],
     _ao_=[0,caml_new_string("camlinternalFormat.ml"),841,28],
     _ag_=[0,caml_new_string("camlinternalFormat.ml"),842,28],
     _am_=[0,caml_new_string("camlinternalFormat.ml"),846,23],
     _bq_=caml_new_string("%u"),
     _bo_=[0,caml_new_string("camlinternalFormat.ml"),1520,4],
     _bp_=caml_new_string("Printf: bad conversion %["),
     _br_=[0,caml_new_string("camlinternalFormat.ml"),1588,39],
     _bs_=[0,caml_new_string("camlinternalFormat.ml"),1611,31],
     _bt_=[0,caml_new_string("camlinternalFormat.ml"),1612,31],
     _bu_=caml_new_string("Printf: bad conversion %_"),
     _bv_=caml_new_string("@{"),
     _bw_=caml_new_string("@["),
     _bx_=caml_new_string("@{"),
     _by_=caml_new_string("@["),
     _bm_=caml_new_string("nan"),
     _bn_=caml_new_string("."),
     _bk_=caml_new_string("neg_infinity"),
     _bl_=caml_new_string("infinity"),
     _bj_=caml_new_string("%.12g"),
     _a8_=caml_new_string("%nd"),
     _a9_=caml_new_string("%+nd"),
     _a__=caml_new_string("% nd"),
     _a$_=caml_new_string("%ni"),
     _ba_=caml_new_string("%+ni"),
     _bb_=caml_new_string("% ni"),
     _bc_=caml_new_string("%nx"),
     _bd_=caml_new_string("%#nx"),
     _be_=caml_new_string("%nX"),
     _bf_=caml_new_string("%#nX"),
     _bg_=caml_new_string("%no"),
     _bh_=caml_new_string("%#no"),
     _bi_=caml_new_string("%nu"),
     _aV_=caml_new_string("%ld"),
     _aW_=caml_new_string("%+ld"),
     _aX_=caml_new_string("% ld"),
     _aY_=caml_new_string("%li"),
     _aZ_=caml_new_string("%+li"),
     _a0_=caml_new_string("% li"),
     _a1_=caml_new_string("%lx"),
     _a2_=caml_new_string("%#lx"),
     _a3_=caml_new_string("%lX"),
     _a4_=caml_new_string("%#lX"),
     _a5_=caml_new_string("%lo"),
     _a6_=caml_new_string("%#lo"),
     _a7_=caml_new_string("%lu"),
     _aI_=caml_new_string("%Ld"),
     _aJ_=caml_new_string("%+Ld"),
     _aK_=caml_new_string("% Ld"),
     _aL_=caml_new_string("%Li"),
     _aM_=caml_new_string("%+Li"),
     _aN_=caml_new_string("% Li"),
     _aO_=caml_new_string("%Lx"),
     _aP_=caml_new_string("%#Lx"),
     _aQ_=caml_new_string("%LX"),
     _aR_=caml_new_string("%#LX"),
     _aS_=caml_new_string("%Lo"),
     _aT_=caml_new_string("%#Lo"),
     _aU_=caml_new_string("%Lu"),
     _av_=caml_new_string("%d"),
     _aw_=caml_new_string("%+d"),
     _ax_=caml_new_string("% d"),
     _ay_=caml_new_string("%i"),
     _az_=caml_new_string("%+i"),
     _aA_=caml_new_string("% i"),
     _aB_=caml_new_string("%x"),
     _aC_=caml_new_string("%#x"),
     _aD_=caml_new_string("%X"),
     _aE_=caml_new_string("%#X"),
     _aF_=caml_new_string("%o"),
     _aG_=caml_new_string("%#o"),
     _aH_=caml_new_string("%u"),
     _H_=caml_new_string("@]"),
     _I_=caml_new_string("@}"),
     _J_=caml_new_string("@?"),
     _K_=caml_new_string("@\n"),
     _L_=caml_new_string("@."),
     _M_=caml_new_string("@@"),
     _N_=caml_new_string("@%"),
     _O_=caml_new_string("@"),
     _au_=caml_new_string("CamlinternalFormat.Type_mismatch"),
     _bC_=caml_new_string(""),
     _bD_=
      [0,[11,caml_new_string(", "),[2,0,[2,0,0]]],caml_new_string(", %s%s")],
     _bT_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _bU_=
      [0,
       [11,
        caml_new_string
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_new_string
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _bN_=caml_new_string("Raised at"),
     _bO_=caml_new_string("Re-raised at"),
     _bP_=caml_new_string("Raised by primitive operation at"),
     _bQ_=caml_new_string("Called from"),
     _bR_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(' file "'),
         [2,
          0,
          [11,
           caml_new_string('", line '),
           [4,
            0,
            0,
            0,
            [11,
             caml_new_string(", characters "),
             [4,0,0,0,[12,45,[4,0,0,0,0]]]]]]]]],
       caml_new_string('%s file "%s", line %d, characters %d-%d')],
     _bS_=
      [0,
       [2,0,[11,caml_new_string(" unknown location"),0]],
       caml_new_string("%s unknown location")],
     _bI_=caml_new_string("Out of memory"),
     _bJ_=caml_new_string("Stack overflow"),
     _bK_=caml_new_string("Pattern matching failed"),
     _bL_=caml_new_string("Assertion failed"),
     _bM_=caml_new_string("Undefined recursive module"),
     _bE_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_new_string("(%s%s)")],
     _bF_=caml_new_string(""),
     _bG_=caml_new_string(""),
     _bH_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _bB_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _bz_=[0,[3,0,0],caml_new_string("%S")],
     _bA_=caml_new_string("_"),
     _bV_=caml_new_string("x"),
     _d0_=caml_new_string("OCAMLRUNPARAM"),
     _dY_=caml_new_string("CAMLRUNPARAM"),
     _bW_=caml_new_string(""),
     _b5_=[3,0,3],
     _b6_=caml_new_string("."),
     _b3_=caml_new_string(">"),
     _b4_=caml_new_string("</"),
     _b1_=caml_new_string(">"),
     _b2_=caml_new_string("<"),
     _b0_=caml_new_string("\n"),
     _bY_=caml_new_string("Format.Empty_queue"),
     _bZ_=[0,caml_new_string("")],
     _b7_=caml_new_string(""),
     _ck_=[0,caml_new_string("src/core/lwt.ml"),1125,8],
     _cj_=[0,caml_new_string("src/core/lwt.ml"),898,13],
     _ch_=[0,caml_new_string("src/core/lwt.ml"),822,35],
     _ci_=[0,caml_new_string("src/core/lwt.ml"),824,8],
     _cf_=[0,caml_new_string("src/core/lwt.ml"),716,35],
     _cg_=[0,caml_new_string("src/core/lwt.ml"),719,8],
     _cc_=[0,caml_new_string("src/core/lwt.ml"),672,35],
     _cd_=[0,caml_new_string("src/core/lwt.ml"),675,8],
     _cb_=[0,caml_new_string("src/core/lwt.ml"),511,8],
     _ca_=[0,caml_new_string("src/core/lwt.ml"),500,9],
     _b$_=caml_new_string("Lwt.wakeup_later_result"),
     _b__=caml_new_string("Lwt.wakeup_result"),
     _b9_=caml_new_string("Fatal error: exception "),
     _b8_=caml_new_string("Lwt.Canceled"),
     _ct_=caml_new_string("Lwt_stream.bounded_push#resize"),
     _cp_=caml_new_string(""),
     _cq_=caml_new_string(""),
     _cr_=caml_new_string(""),
     _cs_=caml_new_string(""),
     _cm_=caml_new_string("Lwt_stream.Closed"),
     _cn_=caml_new_string("Lwt_stream.Full"),
     _co_=caml_new_string("Lwt_stream.Empty"),
     _cu_=caml_new_string("Js.Error"),
     _cv_=caml_new_string("jsError"),
     _cx_=caml_new_string("video"),
     _cw_=caml_new_string("canvas"),
     _cy_=caml_new_string("Exception during Lwt.async: "),
     _cD_=caml_new_string("E2BIG"),
     _cF_=caml_new_string("EACCES"),
     _cG_=caml_new_string("EAGAIN"),
     _cH_=caml_new_string("EBADF"),
     _cI_=caml_new_string("EBUSY"),
     _cJ_=caml_new_string("ECHILD"),
     _cK_=caml_new_string("EDEADLK"),
     _cL_=caml_new_string("EDOM"),
     _cM_=caml_new_string("EEXIST"),
     _cN_=caml_new_string("EFAULT"),
     _cO_=caml_new_string("EFBIG"),
     _cP_=caml_new_string("EINTR"),
     _cQ_=caml_new_string("EINVAL"),
     _cR_=caml_new_string("EIO"),
     _cS_=caml_new_string("EISDIR"),
     _cT_=caml_new_string("EMFILE"),
     _cU_=caml_new_string("EMLINK"),
     _cV_=caml_new_string("ENAMETOOLONG"),
     _cW_=caml_new_string("ENFILE"),
     _cX_=caml_new_string("ENODEV"),
     _cY_=caml_new_string("ENOENT"),
     _cZ_=caml_new_string("ENOEXEC"),
     _c0_=caml_new_string("ENOLCK"),
     _c1_=caml_new_string("ENOMEM"),
     _c2_=caml_new_string("ENOSPC"),
     _c3_=caml_new_string("ENOSYS"),
     _c4_=caml_new_string("ENOTDIR"),
     _c5_=caml_new_string("ENOTEMPTY"),
     _c6_=caml_new_string("ENOTTY"),
     _c7_=caml_new_string("ENXIO"),
     _c8_=caml_new_string("EPERM"),
     _c9_=caml_new_string("EPIPE"),
     _c__=caml_new_string("ERANGE"),
     _c$_=caml_new_string("EROFS"),
     _da_=caml_new_string("ESPIPE"),
     _db_=caml_new_string("ESRCH"),
     _dc_=caml_new_string("EXDEV"),
     _dd_=caml_new_string("EWOULDBLOCK"),
     _de_=caml_new_string("EINPROGRESS"),
     _df_=caml_new_string("EALREADY"),
     _dg_=caml_new_string("ENOTSOCK"),
     _dh_=caml_new_string("EDESTADDRREQ"),
     _di_=caml_new_string("EMSGSIZE"),
     _dj_=caml_new_string("EPROTOTYPE"),
     _dk_=caml_new_string("ENOPROTOOPT"),
     _dl_=caml_new_string("EPROTONOSUPPORT"),
     _dm_=caml_new_string("ESOCKTNOSUPPORT"),
     _dn_=caml_new_string("EOPNOTSUPP"),
     _do_=caml_new_string("EPFNOSUPPORT"),
     _dp_=caml_new_string("EAFNOSUPPORT"),
     _dq_=caml_new_string("EADDRINUSE"),
     _dr_=caml_new_string("EADDRNOTAVAIL"),
     _ds_=caml_new_string("ENETDOWN"),
     _dt_=caml_new_string("ENETUNREACH"),
     _du_=caml_new_string("ENETRESET"),
     _dv_=caml_new_string("ECONNABORTED"),
     _dw_=caml_new_string("ECONNRESET"),
     _dx_=caml_new_string("ENOBUFS"),
     _dy_=caml_new_string("EISCONN"),
     _dz_=caml_new_string("ENOTCONN"),
     _dA_=caml_new_string("ESHUTDOWN"),
     _dB_=caml_new_string("ETOOMANYREFS"),
     _dC_=caml_new_string("ETIMEDOUT"),
     _dD_=caml_new_string("ECONNREFUSED"),
     _dE_=caml_new_string("EHOSTDOWN"),
     _dF_=caml_new_string("EHOSTUNREACH"),
     _dG_=caml_new_string("ELOOP"),
     _dH_=caml_new_string("EOVERFLOW"),
     _dI_=
      [0,
       [11,caml_new_string("EUNKNOWNERR "),[4,0,0,0,0]],
       caml_new_string("EUNKNOWNERR %d")],
     _cE_=
      [0,
       [11,
        caml_new_string("Unix.Unix_error(Unix."),
        [2,
         0,
         [11,
          caml_new_string(", "),
          [3,0,[11,caml_new_string(", "),[3,0,[12,41,0]]]]]]],
       caml_new_string("Unix.Unix_error(Unix.%s, %S, %S)")],
     _cz_=caml_new_string("Unix.Unix_error"),
     _cA_=caml_new_string(""),
     _cB_=caml_new_string(""),
     _cC_=caml_new_string("Unix.Unix_error"),
     _dJ_=caml_new_string("0.0.0.0"),
     _dK_=caml_new_string("127.0.0.1"),
     _dX_=caml_new_string("::"),
     _dW_=caml_new_string("::1"),
     _dP_=
      [0,
       [11,caml_new_string("uncaught exn in handler: "),[2,0,0]],
       caml_new_string("uncaught exn in handler: %s")],
     _dO_=caml_new_string("Optdef: undefined"),
     _dL_=caml_new_string("Common.Shutdown"),
     _dN_=
      [0,[11,caml_new_string("http://"),[2,0,0]],caml_new_string("http://%s")],
     _dQ_=caml_new_string("math.config({ matrix: 'array' })"),
     _dR_=
      [0,
       [11,
        caml_new_string("rgba("),
        [4,
         0,
         0,
         0,
         [11,
          caml_new_string(", "),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", "),
            [4,0,0,0,[11,caml_new_string(", "),[8,0,0,0,[12,41,0]]]]]]]]],
       caml_new_string("rgba(%d, %d, %d, %f)")],
     _dS_=
      [0,
       [11,caml_new_string("pointer"),[4,0,0,0,0]],
       caml_new_string("pointer%d")],
     _dT_=[0,0],
     _dU_=[0,[0,0,1,2,3],[0,[0,0,3,4,5],[0,[0,0,5,6,1],0]]],
     _dV_=[0,1];
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:var rest$8=fmt1[1];return [9,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$6=fmt1[1];
          return [13,pad$6,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$7=fmt1[1];
          return [14,pad$7,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:-x | 0}
    var max_int=2147483647;
    function _a_(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_string(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return s}
    caml_ml_open_descriptor_in(0);
    var
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try {caml_ml_flush(a)}catch(_j5_){}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function prerr_string(s){return output_string(stderr,s)}
    var exit_function=[0,flush_all];
    function at_exit(f)
     {var g=exit_function[1];
      exit_function[1]
      =
      function(param){caml_call1(f,0);return caml_call1(g,0)};
      return 0}
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    function nth(l,n)
     {if(0 <= n)
       {var l$0=l,n$0=n;
        for(;;)
         {if(l$0)
           {var l$1=l$0[2],a=l$0[1];
            if(0 === n$0)return a;
            var n$1=n$0 - 1 | 0,l$0=l$1,n$0=n$1;
            continue}
          return failwith(_h_)}}
      return invalid_arg(_i_)}
    function rev(l1$1)
     {var l1=l1$1,l2=0;
      for(;;)
       {if(l1){var l1$0=l1[2],a=l1[1],l2$0=[0,a,l2],l1=l1$0,l2=l2$0;continue}
        return l2}}
    function map(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map(f,l)]}
      return 0}
    function iter(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=l;
          continue}
        return 0}}
    function find(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return x;
          var param$0=l;
          continue}
        throw Not_found}}
    function make(n,c)
     {var s=caml_create_string(n);caml_fill_string(s,0,n,c);return s}
    function sub_string(b,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(!((caml_ml_string_length(b) - len | 0) < ofs))
         {var r=caml_create_string(len);
          caml_blit_string(b,ofs,r,0,len);
          return r}
      return invalid_arg(_p_)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_string_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_q_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_string_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_r_)}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function contains_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)
       if(!(l < i))
        try
         {index_rec(s,l,i,c);var _j3_=1;return _j3_}
        catch(_j4_)
         {_j4_ = caml_wrap_exception(_j4_);
          if(_j4_ === Not_found)return 0;
          throw _j4_}
      return invalid_arg(_s_)}
    function make$0(n,c){return make(n,c)}
    function contains(s,c){return contains_from(s,0,c)}
    var
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    function map$0(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_j1_=l - 1 | 0,_j0_=1;
      if(!(_j1_ < 1))
       {var i=_j0_;
        for(;;)
         {r[i + 1] = caml_call1(f,a[i + 1]);
          var _j2_=i + 1 | 0;
          if(_j1_ !== i){var i=_j2_;continue}
          break}}
      return r}
    caml_fresh_oo_id(0);
    function _C_(Ord)
     {function height(param){if(param){var h=param[5];return h}return 0}
      function create(l,x,d,r)
       {var hl=height(l),hr=height(r),_jZ_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_jZ_]}
      function singleton(x,d){return [0,0,x,d,0,1]}
      function bal(l,x,d,r)
       {if(l)var h=l[5],hl=h;else var hl=0;
        if(r)var h$0=r[5],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_jU_=height(lr);
            if(_jU_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
            if(lr)
             {var
               lrr=lr[4],
               lrd=lr[3],
               lrv=lr[2],
               lrl=lr[1],
               _jV_=create(lrr,x,d,r);
              return create(create(ll,lv,ld,lrl),lrv,lrd,_jV_)}
            return invalid_arg(_u_)}
          return invalid_arg(_v_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_jW_=height(rl);
            if(_jW_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
            if(rl)
             {var
               rlr=rl[4],
               rld=rl[3],
               rlv=rl[2],
               rll=rl[1],
               _jX_=create(rlr,rv,rd,rr);
              return create(create(l,x,d,rll),rlv,rld,_jX_)}
            return invalid_arg(_w_)}
          return invalid_arg(_x_)}
        var _jY_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_jY_]}
      var empty=0;
      function is_empty(param){return param?0:1}
      function add(x,data,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return d === data?m:[0,l,x,data,r,h];
          if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=add(x,data,l);
          return l === ll?m:bal(ll,v,d,r)}
        return [0,0,x,data,0,1]}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return d;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v),
             _jT_=0 === c?1:0;
            if(_jT_)return _jT_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function min_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _jS_=param$0[1];
            if(_jS_){var param$0=_jS_;continue}
            var d=param$0[3],x=param$0[2];
            return [0,x,d]}
          throw Not_found}}
      function max_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _jP_=param$0[4],_jQ_=param$0[3],_jR_=param$0[2];
            if(_jP_){var param$0=_jP_;continue}
            return [0,_jR_,_jQ_]}
          throw Not_found}}
      function remove_min_binding(param)
       {if(param)
         {var _jO_=param[1];
          if(_jO_)
           {var r=param[4],d=param[3],x=param[2];
            return bal(remove_min_binding(_jO_),x,d,r)}
          var r$0=param[4];
          return r$0}
        return invalid_arg(_y_)}
      function remove(x$0,t)
       {if(t)
         {var r=t[4],d$0=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x$0,v);
          if(0 === c)
           {if(l)
             {if(r)
               {var match=min_binding(r),d=match[2],x=match[1];
                return bal(l,x,d,remove_min_binding(r))}
              return l}
            return r}
          if(0 <= c){var rr=remove(x$0,r);return r === rr?t:bal(l,v,d$0,rr)}
          var ll=remove(x$0,l);
          return l === ll?t:bal(ll,v,d$0,r)}
        return 0}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call2(f,v,d);
            var param$0=r;
            continue}
          return 0}}
      function map(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=map(f,l),
           d$0=caml_call1(f,d),
           r$0=map(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function mapi(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=mapi(f,l),
           d$0=caml_call2(f,v,d),
           r$0=mapi(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function fold(f,m,accu)
       {var m$0=m,accu$0=accu;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
             m$0=r,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _jL_=caml_call2(p,v,d);
            if(_jL_)
             {var _jM_=for_all(p,l);
              if(_jM_){var param$0=r;continue}
              var _jN_=_jM_}
            else
             var _jN_=_jL_;
            return _jN_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _jI_=caml_call2(p,v,d);
            if(_jI_)
             var _jJ_=_jI_;
            else
             {var _jK_=exists(p,l);
              if(!_jK_){var param$0=r;continue}
              var _jJ_=_jK_}
            return _jJ_}
          return 0}}
      function add_min_binding(k,v,param)
       {if(param)
         {var r=param[4],d=param[3],x=param[2],l=param[1];
          return bal(add_min_binding(k,v,l),x,d,r)}
        return singleton(k,v)}
      function add_max_binding(k,v,param)
       {if(param)
         {var r=param[4],d=param[3],x=param[2],l=param[1];
          return bal(l,x,d,add_max_binding(k,v,r))}
        return singleton(k,v)}
      function join(l,v,d,r)
       {if(l)
         {if(r)
           {var
             rh=r[5],
             rr=r[4],
             rd=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[5],
             lr=l[4],
             ld=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,ld,join(lr,v,d,r))
                    :(lh + 2 | 0) < rh
                      ?bal(join(l,v,d,rl),rv,rd,rr)
                      :create(l,v,d,r)}
          return add_max_binding(v,d,l)}
        return add_min_binding(v,d,r)}
      function concat(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return join(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function concat_or_join(t1,v,d,t2)
       {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
      function split(x,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,l,[0,d],r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,d,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,d,r)]}
        return _z_}
      function merge(f,s1,s2)
       {if(s1)
         {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
          if(height(s2) <= h1)
           {var
             match=split(v1,s2),
             r2=match[3],
             d2=match[2],
             l2=match[1],
             _jE_=merge(f,r1,r2),
             _jF_=caml_call3(f,v1,[0,d1],d2);
            return concat_or_join(merge(f,l1,l2),v1,_jF_,_jE_)}}
        else
         if(!s2)return 0;
        if(s2)
         {var
           r2$0=s2[4],
           d2$0=s2[3],
           v2=s2[2],
           l2$0=s2[1],
           match$0=split(v2,s1),
           r1$0=match$0[3],
           d1$0=match$0[2],
           l1$0=match$0[1],
           _jG_=merge(f,r1$0,r2$0),
           _jH_=caml_call3(f,v2,d1$0,[0,d2$0]);
          return concat_or_join(merge(f,l1$0,l2$0),v2,_jH_,_jG_)}
        throw [0,Assert_failure,_A_]}
      function union(f,s1,s2)
       {if(s1)
         {if(s2)
           {var
             h2=s2[5],
             r2=s2[4],
             d2=s2[3],
             v2=s2[2],
             l2=s2[1],
             h1=s1[5],
             r1=s1[4],
             d1=s1[3],
             v1=s1[2],
             l1=s1[1];
            if(h2 <= h1)
             {var
               match=split(v1,s2),
               r2$0=match[3],
               d2$0=match[2],
               l2$0=match[1],
               l=union(f,l1,l2$0),
               r=union(f,r1,r2$0);
              if(d2$0)
               {var d2$1=d2$0[1];
                return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
              return join(l,v1,d1,r)}
            var
             match$0=split(v2,s1),
             r1$0=match$0[3],
             d1$0=match$0[2],
             l1$0=match$0[1],
             l$0=union(f,l1$0,l2),
             r$0=union(f,r1$0,r2);
            if(d1$0)
             {var d1$1=d1$0[1];
              return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
            return join(l$0,v2,d2,r$0)}
          var s=s1}
        else
         var s=s2;
        return s}
      function filter(p,t)
       {if(t)
         {var
           r=t[4],
           d=t[3],
           v=t[2],
           l=t[1],
           l$0=filter(p,l),
           pvd=caml_call2(p,v,d),
           r$0=filter(p,r);
          if(pvd){if(l === l$0)if(r === r$0)return t;return join(l$0,v,d,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pvd=caml_call2(p,v,d),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pvd){var _jC_=concat(lf,rf);return [0,join(lt,v,d,rt),_jC_]}
          var _jD_=join(lf,v,d,rf);
          return [0,concat(lt,rt),_jD_]}
        return _B_}
      function cons_enum(m,e)
       {var m$0=m,e$0=e;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             m$1=m$0[1],
             e$1=[0,v,d,r,e$0],
             m$0=m$1,
             e$0=e$1;
            continue}
          return e$0}}
      function compare(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var c$0=caml_call2(cmp,d1,d2);
                if(0 === c$0)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                return c$0}
              return c}
            return 1}
          return e2?-1:0}}
      function equal(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               _jz_=0 === caml_call2(Ord[1],v1,v2)?1:0;
              if(_jz_)
               {var _jA_=caml_call2(cmp,d1,d2);
                if(_jA_)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                var _jB_=_jA_}
              else
               var _jB_=_jz_;
              return _jB_}
            return 0}
          return e2?0:1}}
      function cardinal(param)
       {if(param)
         {var r=param[4],l=param[1],_jy_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _jy_ | 0}
        return 0}
      function bindings_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=l;
            continue}
          return accu$0}}
      function bindings(s){return bindings_aux(0,s)}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              singleton,
              remove,
              merge,
              union,
              compare,
              equal,
              iter,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              bindings,
              min_binding,
              max_binding,
              min_binding,
              split,
              find,
              map,
              mapi]}
    var Empty=[248,_D_,caml_fresh_oo_id(0)];
    function create(param){return [0,0,0,0]}
    var Undefined=[248,_E_,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        blk[1] = result;
        caml_obj_set_tag(blk,250);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    function create$0(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_string_length < n$0?max_string_length:n$0,
       s=caml_create_string(n$1);
      return [0,s,0,n$1,s]}
    function resize(b,more)
     {var len=b[3],new_len=[0,len];
      for(;;)
       {if(new_len[1] < (b[2] + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         if((b[2] + more | 0) <= max_string_length)
          new_len[1] = max_string_length;
         else
          failwith(_F_);
        var new_buffer=caml_create_string(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        return 0}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      blit$0(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    var default_float_precision=-6;
    function buffer_create(init_size)
     {return [0,0,caml_create_string(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_string_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _jw_=len < min_len?1:0;
      if(_jw_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_string(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _jx_=0}
      else
       var _jx_=_jw_;
      return _jx_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_string_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _H_;
         case 1:return _I_;
         case 2:return _J_;
         case 3:return _K_;
         case 4:return _L_;
         case 5:return _M_;
         default:return _N_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return _a_(_O_,make$0(1,c))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,_P_);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,_Q_);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,_R_);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,_S_);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,_T_);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,_U_);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,_V_);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,_W_);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_X_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_Y_);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_Z_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,___);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,_$_);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,_aa_);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,_ab_);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,_ac_);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,_ad_);
           var fmtty$0=rest$13;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _i__=function(param){return 0},
         _i$_=function(param){return 0},
         _ja_=function(param){return 0};
        return [0,function(param){return 0},_ja_,_i$_,_i__]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _jb_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_jb_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _jc_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _jc_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _jd_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _jd_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _je_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _je_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _jf_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _jf_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _jg_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _jg_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _jh_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _jh_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _ji_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _ji_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _jj_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _jj_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _jk_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _jl_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _jm_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _jm_,
                  _jl_,
                  _jk_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _jn_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _jn_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _jo_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _jo_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _jp_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _jp_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _jq_=function(param){caml_call1(de$12,0);return 0},
           _jr_=function(param){caml_call1(ed$12,0);return 0},
           _js_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _js_,
                  _jr_,
                  _jq_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _jt_=function(param){caml_call1(de$13,0);return 0},
           _ju_=function(param){caml_call1(ed$13,0);return 0},
           _jv_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _jv_,
                  _ju_,
                  _jt_]}}
    function trans(ty1,match)
     {if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:throw [0,Assert_failure,_ae_]}
      else
       switch(ty1[0])
        {case 0:
          var _iR_=ty1[1];
          if(typeof match === "number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_iR_,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _iS_=ty1[1];
          if(typeof match === "number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_iS_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _iT_=ty1[1];
          if(typeof match === "number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_iT_,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _iU_=ty1[1];
          if(typeof match === "number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_iU_,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _iV_=ty1[1];
          if(typeof match === "number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_iV_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _iW_=ty1[1];
          if(typeof match === "number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_iW_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _iX_=ty1[1];
          if(typeof match === "number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_iX_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _iY_=ty1[1];
          if(typeof match === "number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_iY_,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _iZ_=ty1[2],_i0_=ty1[1];
          if(typeof match === "number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_i1_=trans(_iZ_,rest2$7);
              return [8,trans(_i0_,ty2),_i1_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,_an_];
          break;
         case 9:
          var _i2_=ty1[3],_i3_=ty1[2],_i4_=ty1[1];
          if(typeof match === "number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_i3_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_i4_,ty22,trans(_i2_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_ao_];
          break;
         case 10:
          var _i5_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_i5_,rest2$9)]}
          throw [0,Assert_failure,_ap_];
         case 11:
          var _i6_=ty1[1];
          if(typeof match === "number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:var rest2$10=match[1];return [11,trans(_i6_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_aq_];
          break;
         case 12:
          var _i7_=ty1[1];
          if(typeof match === "number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:var rest2$11=match[1];return [12,trans(_i7_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_ar_];
          break;
         case 13:
          var _i8_=ty1[1];
          if(typeof match === "number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:var rest2$12=match[1];return [13,trans(_i8_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_as_];
          break;
         default:
          var _i9_=ty1[1];
          if(typeof match === "number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:var rest2$13=match[1];return [14,trans(_i9_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_at_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_ah_];
        case 1:throw [0,Assert_failure,_ai_];
        case 2:throw [0,Assert_failure,_aj_];
        case 3:throw [0,Assert_failure,_ak_];
        case 4:throw [0,Assert_failure,_al_];
        case 5:throw [0,Assert_failure,_af_];
        case 6:throw [0,Assert_failure,_ag_];
        default:throw [0,Assert_failure,_am_]}}
    var Type_mismatch=[248,_au_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _iQ_=match[2];
        if(typeof _iQ_ !== "number" && 2 === _iQ_[0])
         {var rest$0=_iQ_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw Type_mismatch}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _io_=type_padding(pad,fmtty),
           _ip_=_io_[2],
           _iq_=_io_[1];
          if(typeof _ip_ !== "number" && 1 === _ip_[0])
           {var
             fmtty_rest$1=_ip_[1],
             match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_iq_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _ir_=type_padding(pad$0,fmtty),
           _is_=_ir_[2],
           _it_=_ir_[1];
          if(typeof _is_ !== "number" && 1 === _is_[0])
           {var
             fmtty_rest$2=_is_[1],
             match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_it_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _iu_=type_padprec(pad$1,prec,fmtty),
           _iv_=_iu_[3],
           _iw_=_iu_[2],
           _ix_=_iu_[1];
          if(typeof _iv_ !== "number" && 2 === _iv_[0])
           {var
             fmtty_rest$3=_iv_[1],
             match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_ix_,_iw_,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _iy_=type_padprec(pad$2,prec$0,fmtty),
           _iz_=_iy_[3],
           _iA_=_iy_[2],
           _iB_=_iy_[1];
          if(typeof _iz_ !== "number" && 3 === _iz_[0])
           {var
             fmtty_rest$4=_iz_[1],
             match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_iB_,_iA_,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _iC_=type_padprec(pad$3,prec$1,fmtty),
           _iD_=_iC_[3],
           _iE_=_iC_[2],
           _iF_=_iC_[1];
          if(typeof _iD_ !== "number" && 4 === _iD_[0])
           {var
             fmtty_rest$5=_iD_[1],
             match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_iF_,_iE_,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _iG_=type_padprec(pad$4,prec$2,fmtty),
           _iH_=_iG_[3],
           _iI_=_iG_[2],
           _iJ_=_iG_[1];
          if(typeof _iH_ !== "number" && 5 === _iH_[0])
           {var
             fmtty_rest$6=_iH_[1],
             match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_iJ_,_iI_,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _iK_=type_padprec(pad$5,prec$3,fmtty),
           _iL_=_iK_[3],
           _iM_=_iK_[2],
           _iN_=_iK_[1];
          if(typeof _iL_ !== "number" && 6 === _iL_[0])
           {var
             fmtty_rest$7=_iL_[1],
             match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_iN_,_iM_,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          if(typeof fmtty !== "number" && 7 === fmtty[0])
           {var
             fmtty_rest$8=fmtty[1],
             fmt_rest$8=fmt[1],
             match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,fmt$9],fmtty$9]}
          break;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _iO_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_iO_))
             throw Type_mismatch;
            var
             match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=type_format_gen(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,3,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([7,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 8:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _iP_=type_ignored_format_substitution(sub_fmtty$3,rest,fmtty),
               match$27=_iP_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_iP_[1];
              return [0,[23,[8,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 9:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substitution(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substitution(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substitution
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substitution
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substitution
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substitution
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substitution
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substitution
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substitution
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substitution
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _im_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_im_))
             throw Type_mismatch;
            var _in_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_in_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substitution
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substitution
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substitution
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substitution
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substitution
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _il_=2 === padty$0?48:32,res=make(width$0,_il_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         if(0 < len)
          {if(43 === caml_string_get(str,0))
            var switch$1=1;
           else
            if(45 === caml_string_get(str,0))
             var switch$1=1;
            else
             if(32 === caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            {caml_string_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0);
             var switch$0=1}}
         else
          var switch$0=0;
         if(!switch$0)
          {if(1 < len)
            if(48 === caml_string_get(str,0))
             {if(120 === caml_string_get(str,1))
               var switch$3=1;
              else
               if(88 === caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               {caml_string_set(res,1,caml_string_get(str,1));
                blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(!switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return res}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0);
      if(58 <= c)
       var switch$0=71 <= c?5 < (c - 97 | 0) >>> 0?1:0:65 <= c?0:1;
      else
       {if(32 === c)
         var switch$1=1;
        else
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0))
               if(1 < len)
                {var
                  switch$2=
                   120 === caml_string_get(str,1)
                    ?0
                    :88 === caml_string_get(str,1)?0:1;
                 if(!switch$2)
                  {var res$1=make(prec$0 + 2 | 0,48);
                   caml_string_set(res$1,1,caml_string_get(str,1));
                   blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   return res$1}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         {if(len < (prec$0 + 1 | 0))
           {var res$0=make(prec$0 + 1 | 0,48);
            caml_string_set(res$0,0,c);
            blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
            return res$0}
          var switch$0=1}}
      if(!switch$0)
       if(len < prec$0)
        {var res=make(prec$0,48);
         blit$0(str,0,res,prec$0 - len | 0,len);
         return res}
      return str}
    function string_to_caml_string(str)
     {var i$1=0;
      for(;;)
       {if(caml_ml_string_length(str) <= i$1)
         var _ik_=0;
        else
         {var match$0=caml_string_unsafe_get(str,i$1);
          if(32 <= match$0)
           {var _ij_=match$0 - 34 | 0;
            if(58 < _ij_ >>> 0)
             if(93 <= _ij_)var switch$0=0,switch$1=0;else var switch$1=1;
            else
             if(56 < (_ij_ - 1 | 0) >>> 0)
              var switch$0=1,switch$1=0;
             else
              var switch$1=1;
            if(switch$1){var i$2=i$1 + 1 | 0,i$1=i$2;continue}}
          else
           var switch$0=11 <= match$0?13 === match$0?1:0:8 <= match$0?1:0;
          var _ik_=switch$0?1:1}
        if(_ik_)
         {var n=[0,0],_ic_=caml_ml_string_length(str) - 1 | 0,_ib_=0;
          if(!(_ic_ < 0))
           {var i$0=_ib_;
            for(;;)
             {var match=caml_string_unsafe_get(str,i$0);
              if(32 <= match)
               {var _ig_=match - 34 | 0;
                if(58 < _ig_ >>> 0)
                 if(93 <= _ig_)var switch$2=0,switch$3=0;else var switch$3=1;
                else
                 if(56 < (_ig_ - 1 | 0) >>> 0)
                  var switch$2=1,switch$3=0;
                 else
                  var switch$3=1;
                if(switch$3)var _ih_=1,switch$2=2}
              else
               var switch$2=11 <= match?13 === match?1:0:8 <= match?1:0;
              switch(switch$2)
               {case 0:var _ih_=4;break;case 1:var _ih_=2;break}
              n[1] = n[1] + _ih_ | 0;
              var _ii_=i$0 + 1 | 0;
              if(_ic_ !== i$0){var i$0=_ii_;continue}
              break}}
          if(n[1] === caml_ml_string_length(str))
           {var len=caml_ml_string_length(str),r=caml_create_string(len);
            caml_blit_string(str,0,r,0,len);
            var str$0=r}
          else
           {var s=caml_create_string(n[1]);
            n[1] = 0;
            var _ie_=caml_ml_string_length(str) - 1 | 0,_id_=0;
            if(!(_ie_ < 0))
             {var i=_id_;
              for(;;)
               {var c=caml_string_unsafe_get(str,i);
                if(35 <= c)
                 var switch$4=92 === c?1:127 <= c?0:2;
                else
                 if(32 <= c)
                  var switch$4=34 <= c?1:2;
                 else
                  if(14 <= c)
                   var switch$4=0;
                  else
                   switch(c)
                    {case 8:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],98);
                      var switch$4=3;
                      break;
                     case 9:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],116);
                      var switch$4=3;
                      break;
                     case 10:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],110);
                      var switch$4=3;
                      break;
                     case 13:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],114);
                      var switch$4=3;
                      break;
                     default:var switch$4=0}
                switch(switch$4)
                 {case 0:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 1:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],c);
                   break;
                  case 2:caml_string_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _if_=i + 1 | 0;
                if(_ie_ !== i){var i=_if_;continue}
                break}}
            var str$0=s}}
        else
         var str$0=str;
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return res}}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 0:var _ia_=_av_;break;
        case 1:var _ia_=_aw_;break;
        case 2:var _ia_=_ax_;break;
        case 3:var _ia_=_ay_;break;
        case 4:var _ia_=_az_;break;
        case 5:var _ia_=_aA_;break;
        case 6:var _ia_=_aB_;break;
        case 7:var _ia_=_aC_;break;
        case 8:var _ia_=_aD_;break;
        case 9:var _ia_=_aE_;break;
        case 10:var _ia_=_aF_;break;
        case 11:var _ia_=_aG_;break;
        default:var _ia_=_aH_}
      return caml_format_int(_ia_,n)}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 0:var _h$_=_aV_;break;
        case 1:var _h$_=_aW_;break;
        case 2:var _h$_=_aX_;break;
        case 3:var _h$_=_aY_;break;
        case 4:var _h$_=_aZ_;break;
        case 5:var _h$_=_a0_;break;
        case 6:var _h$_=_a1_;break;
        case 7:var _h$_=_a2_;break;
        case 8:var _h$_=_a3_;break;
        case 9:var _h$_=_a4_;break;
        case 10:var _h$_=_a5_;break;
        case 11:var _h$_=_a6_;break;
        default:var _h$_=_a7_}
      return caml_format_int(_h$_,n)}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 0:var _h__=_a8_;break;
        case 1:var _h__=_a9_;break;
        case 2:var _h__=_a__;break;
        case 3:var _h__=_a$_;break;
        case 4:var _h__=_ba_;break;
        case 5:var _h__=_bb_;break;
        case 6:var _h__=_bc_;break;
        case 7:var _h__=_bd_;break;
        case 8:var _h__=_be_;break;
        case 9:var _h__=_bf_;break;
        case 10:var _h__=_bg_;break;
        case 11:var _h__=_bh_;break;
        default:var _h__=_bi_}
      return caml_format_int(_h__,n)}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 0:var _h9_=_aI_;break;
        case 1:var _h9_=_aJ_;break;
        case 2:var _h9_=_aK_;break;
        case 3:var _h9_=_aL_;break;
        case 4:var _h9_=_aM_;break;
        case 5:var _h9_=_aN_;break;
        case 6:var _h9_=_aO_;break;
        case 7:var _h9_=_aP_;break;
        case 8:var _h9_=_aQ_;break;
        case 9:var _h9_=_aR_;break;
        case 10:var _h9_=_aS_;break;
        case 11:var _h9_=_aT_;break;
        default:var _h9_=_aU_}
      return caml_int64_format(_h9_,n)}
    function convert_float(fconv,prec$0,x)
     {if(16 <= fconv)
       {if(17 <= fconv)
         switch(fconv - 17 | 0)
          {case 2:var switch$0=0;break;
           case 0:
           case 3:var sign=43,switch$0=1;break;
           default:var sign=32,switch$0=1}
        else
         var switch$0=0;
        if(!switch$0)var sign=45;
        var s=caml_hexstring_of_float(x,prec$0,sign);
        if(19 <= fconv)
         {var l=caml_ml_string_length(s);
          if(0 === l)return s;
          var r=caml_create_string(l),_h3_=l - 1 | 0,_h2_=0;
          if(!(_h3_ < 0))
           {var i=_h2_;
            for(;;)
             {var c=caml_string_unsafe_get(s,i);
              if(97 <= c)
               if(122 < c)var switch$1=0;else var _h4_=c - 32 | 0,switch$1=1;
              else
               var switch$1=0;
              if(!switch$1)var _h4_=c;
              caml_string_unsafe_set(r,i,_h4_);
              var _h5_=i + 1 | 0;
              if(_h3_ !== i){var i=_h5_;continue}
              break}}
          return r}
        return s}
      if(15 === fconv)
       var _h6_=_bj_;
      else
       {var prec=abs(prec$0);
        switch(fconv)
         {case 15:var symb=70;break;
          case 0:
          case 1:
          case 2:var symb=102;break;
          case 3:
          case 4:
          case 5:var symb=101;break;
          case 6:
          case 7:
          case 8:var symb=69;break;
          case 9:
          case 10:
          case 11:var symb=103;break;
          case 12:
          case 13:
          case 14:var symb=71;break;
          case 16:
          case 17:
          case 18:var symb=104;break;
          default:var symb=72}
        var buf=buffer_create(16);
        buffer_add_char(buf,37);
        switch(fconv)
         {case 1:
          case 4:
          case 7:
          case 10:
          case 13:
          case 17:
          case 20:buffer_add_char(buf,43);break;
          case 2:
          case 5:
          case 8:
          case 11:
          case 14:
          case 18:
          case 21:buffer_add_char(buf,32);break
          }
        buffer_add_char(buf,46);
        buffer_add_string(buf,caml_new_string("" + prec));
        buffer_add_char(buf,symb);
        var _h6_=buffer_contents(buf)}
      var str=caml_format_float(_h6_,x);
      if(15 === fconv)
       {var len=caml_ml_string_length(str),match$0=caml_classify_float(x);
        if(3 === match$0)return x < 0?_bk_:_bl_;
        if(4 <= match$0)return _bm_;
        var i$0=0;
        for(;;)
         {if(i$0 === len)
           var _h8_=0;
          else
           {var
             match=caml_string_get(str,i$0),
             _h7_=match - 46 | 0,
             switch$2=
              23 < _h7_ >>> 0?55 === _h7_?1:0:21 < (_h7_ - 1 | 0) >>> 0?1:0;
            if(!switch$2){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
            var _h8_=1}
          return _h8_?str:_a_(str,_bn_)}}
      return str}
    function make_int_padding_precision(k,o,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,o,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _hZ_=pad[2],_h0_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=fix_padding(_h0_,_hZ_,caml_call2(trans,iconv,x));
                      return make_printf(k,o,[4,acc,str],fmt)}
                   :function(p,x)
                     {var
                       str=
                        fix_padding
                         (_h0_,_hZ_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,o,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_h0_,_hZ_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,o,[4,acc,str],fmt)}}
        var _h1_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=fix_padding(_h1_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_h1_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_h1_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,o,[4,acc,str],fmt)}}}
    function make_string_padding(k,o,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,o,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,o,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,o,new_acc,fmt)}}}
    function make_printf$0(counter,k,o,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call2(k$0,o,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,o,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {if(40 <= c)
              if(92 === c)
               var str=_j_,switch$0=2;
              else
               var switch$0=127 <= c?0:1;
             else
              if(32 <= c)
               if(39 <= c)var str=_k_,switch$0=2;else var switch$0=1;
              else
               if(14 <= c)
                var switch$0=0;
               else
                switch(c)
                 {case 8:var str=_l_,switch$0=2;break;
                  case 9:var str=_m_,switch$0=2;break;
                  case 10:var str=_n_,switch$0=2;break;
                  case 13:var str=_o_,switch$0=2;break;
                  default:var switch$0=0}
             switch(switch$0)
              {case 0:
                var s=caml_create_string(4);
                caml_string_unsafe_set(s,0,92);
                caml_string_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_string_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_string_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=s;
                break;
               case 1:
                var s$0=caml_create_string(1);
                caml_string_unsafe_set(s$0,0,c);
                var str=s$0;
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,res];
             return make_printf(k$0,o,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_string_padding
                   (k$0,o,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_string_padding
                   (k$0,o,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var str=convert_float(fconv,default_float_precision,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _hU_=pad$5[2],_hV_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var
                            str=convert_float(fconv,default_float_precision,x),
                            str$0=fix_padding(_hV_,_hU_,str);
                           return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=fix_padding(_hV_,_hU_,convert_float(fconv,p,x));
                           return make_printf(k$0,o,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_hV_,_hU_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
             var _hW_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision,x),
                          str$0=fix_padding(_hW_,w,str);
                         return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=fix_padding(_hW_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_hW_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[1];
           return function(b)
            {var _hY_=b?_b_:_c_;
             return make_printf(k$0,o,[4,acc$0,_hY_],rest$8)};
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str)
            {return make_printf(k$0,o,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _hX_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _hX_[2] === "number")
              {var fmt=_hX_[1];
               return make_printf(k$0,o,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      o,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,o,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _hS_=fmt$0[1];
           if(0 === _hS_[0])
            {var
              rest$13=fmt$0[2],
              match=_hS_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(koc,kacc)
                  {return make_printf(k,koc,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_hS_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(koc,kacc)
                {return make_printf(k,koc,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bo_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bp_];
           return function(param){return make_printf(k$0,o,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bq_,n)];
             return make_printf(k$0,o,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];
             return make_printf(k$0,o,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 3:throw [0,Assert_failure,_br_];
              default:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 8:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,o,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,o,acc$0,fmtty$0,rest$18]);
              case 9:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _hT_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,o,acc$0,rest$19,arity,_hT_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,o,acc$0,rest$19,arity,_hT_])}}
    function make_from_fmtty$0(counter,k,o,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,o,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,o,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,o,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_hR_)
           {return make_from_fmtty(k,o,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bs_];
         default:throw [0,Assert_failure,_bt_]}}
    function make_invalid_arg(counter,k,o,acc,fmt)
     {var _hQ_=[8,acc,_bu_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_hQ_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_hQ_,fmt])}
    function make_custom$0(counter,k,o,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,o,acc,rest,arity$0,caml_call1(f,x))}}
      var _hP_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_hP_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_hP_,rest])}
    function make_printf(k,o,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,o,acc,fmt))}
    function make_from_fmtty(k,o,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,o,acc,fmtty,fmt))}
    function make_custom(k,o,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,o,acc,rest,arity,f))}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _hN_=acc$0[2],_hO_=acc$0[1];
           if(0 === _hN_[0])
            {var acc$1=_hN_[1];
             output_acc(o,_hO_);
             output_string(o,_bv_);
             var acc$0=acc$1;
             continue}
           var acc$2=_hN_[1];
           output_acc(o,_hO_);
           output_string(o,_bw_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _hL_=acc$0[2],_hM_=acc$0[1];
           if(0 === _hL_[0])
            {var acc$1=_hL_[1];
             strput_acc(b,_hM_);
             add_string(b,_bx_);
             var acc$0=acc$1;
             continue}
           var acc$2=_hL_[1];
           strput_acc(b,_hM_);
           add_string(b,_by_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_string_unsafe_set(b[1],pos,c);
           b[2] = pos + 1 | 0;
           return 0}}
    function fprintf(oc,fmt$0)
     {var fmt=fmt$0[1],_hK_=0;
      return make_printf
              (function(o,acc){output_acc(o,acc);return 0},oc,_hK_,fmt)}
    function ksprintf(k,param)
     {var fmt=param[1];
      function k$0(param,acc)
       {var b=create$0(64);
        strput_acc(b,acc);
        return caml_call1(k,sub_string(b[1],0,b[2]))}
      return make_printf(k$0,0,0,fmt)}
    function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
    var printers=[0,0];
    function field(x,i$1)
     {var f=x[i$1 + 1];
      if(caml_obj_is_block(f))
       {if(caml_obj_tag(f) === 252)return caml_call1(sprintf(_bz_),f);
        if(caml_obj_tag(f) === 253)
         {var s=caml_format_float(_e_,f),l=caml_ml_string_length(s),i=0;
          for(;;)
           {if(l <= i)return _a_(s,_d_);
            var
             match=caml_string_get(s,i),
             switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
            if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
            return s}}
        return _bA_}
      return caml_call1(sprintf(_bB_),f)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _bC_;
      var _hI_=other_fields(x,i + 1 | 0),_hJ_=field(x,i);
      return caml_call2(sprintf(_bD_),_hJ_,_hI_)}
    function fields(x)
     {var n=x.length - 1;
      if(2 < n >>> 0)
       {var _hF_=other_fields(x,2),_hG_=field(x,1);
        return caml_call2(sprintf(_bE_),_hG_,_hF_)}
      switch(n)
       {case 0:return _bF_;
        case 1:return _bG_;
        default:var _hH_=field(x,1);return caml_call1(sprintf(_bH_),_hH_)}}
    function to_string(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try {var _hD_=caml_call1(hd,x),_hC_=_hD_}catch(_hE_){var _hC_=0}
            if(_hC_){var s=_hC_[1];return s}
            var param$0=tl;
            continue}
          if(x === Out_of_memory)return _bI_;
          if(x === Stack_overflow)return _bJ_;
          if(x[1] === Match_failure)
           {var match=x[2],char$0=match[3],line=match[2],file=match[1];
            return caml_call5
                    (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_bK_)}
          if(x[1] === Assert_failure)
           {var
             match$0=x[2],
             char$1=match$0[3],
             line$0=match$0[2],
             file$0=match$0[1];
            return caml_call5
                    (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_bL_)}
          if(x[1] === Undefined_recursive_module)
           {var
             match$1=x[2],
             char$2=match$1[3],
             line$1=match$1[2],
             file$1=match$1[1];
            return caml_call5
                    (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_bM_)}
          if(0 === caml_obj_tag(x))
           {var constructor=x[1][1];return _a_(constructor,fields(x))}
          return x[1]}}
      return conv(printers[1])}
    function convert_raw_backtrace(rbckt)
     {try
       {var
         _hz_=
          [0,
           map$0
            (function(_hB_){return caml_convert_raw_backtrace_slot(_hB_)},
             rbckt)];
        return _hz_}
      catch(_hA_)
       {_hA_ = caml_wrap_exception(_hA_);
        if(_hA_[1] === Failure)return 0;
        throw _hA_}}
    function print_backtrace(outchan)
     {var
       raw_backtrace=caml_get_exception_raw_backtrace(0),
       backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],_hx_=a.length - 1 - 1 | 0,_hw_=0;
        if(!(_hx_ < 0))
         {var i=_hw_;
          for(;;)
           {var
             slot=caml_check_bound(a,i)[i + 1],
             info$0=
              function(i)
               {function info(is_raise)
                 {return is_raise?0 === i?_bN_:_bO_:0 === i?_bP_:_bQ_}
                return info},
             info=info$0(i);
            if(0 === slot[0])
             var
              endchar=slot[5],
              startchar=slot[4],
              lineno=slot[3],
              filename=slot[2],
              is_raise=slot[1],
              _hu_=info(is_raise),
              match=
               [0,
                caml_call5
                 (sprintf(_bR_),_hu_,filename,lineno,startchar,endchar)];
            else
             if(0 === slot[1])
              var _hv_=info(0),match=[0,caml_call1(sprintf(_bS_),_hv_)];
             else
              var match=0;
            if(match){var str=match[1];caml_call1(fprintf(outchan,_bT_),str)}
            var _hy_=i + 1 | 0;
            if(_hx_ !== i){var i=_hy_;continue}
            break}}
        return 0}
      return fprintf(outchan,_bU_)}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    try
     {var _d1_=caml_sys_getenv(_d0_),params=_d1_}
    catch(_hs_)
     {_hs_ = caml_wrap_exception(_hs_);
      if(_hs_ !== Not_found)throw _hs_;
      try
       {var _dZ_=caml_sys_getenv(_dY_),_bX_=_dZ_}
      catch(_ht_)
       {_ht_ = caml_wrap_exception(_ht_);
        if(_ht_ !== Not_found)throw _ht_;
        var _bX_=_bW_}
      var params=_bX_}
    var
     randomized_default=contains(params,82),
     prng=
      [246,
       function(_hr_)
        {var
          seed$0=caml_sys_random_seed(0),
          result=[0,caml_make_vect(55,0),0],
          seed=0 === seed$0.length - 1?[0,0]:seed$0,
          l=seed.length - 1,
          i$0=0;
         for(;;)
          {caml_check_bound(result[1],i$0)[i$0 + 1] = i$0;
           var _hq_=i$0 + 1 | 0;
           if(54 !== i$0){var i$0=_hq_;continue}
           var accu=[0,_bV_],_hm_=54 + max(55,l) | 0,_hl_=0;
           if(!(_hm_ < 0))
            {var i=_hl_;
             for(;;)
              {var
                j=i % 55 | 0,
                k=caml_mod(i,l),
                x=caml_check_bound(seed,k)[k + 1],
                str=_a_(accu[1],caml_new_string("" + x));
               accu[1] = caml_md5_string(str,0,caml_ml_string_length(str));
               var
                _hn_=accu[1],
                _hh_=caml_string_get(_hn_,3) << 24,
                _hi_=caml_string_get(_hn_,2) << 16,
                _hj_=caml_string_get(_hn_,1) << 8,
                _hk_=
                 ((caml_string_get(_hn_,0) + _hj_ | 0) + _hi_ | 0)
                 +
                 _hh_
                 |
                 0,
                _ho_=
                 (caml_check_bound(result[1],j)[j + 1] ^ _hk_)
                 &
                 1073741823;
               caml_check_bound(result[1],j)[j + 1] = _ho_;
               var _hp_=i + 1 | 0;
               if(_hm_ !== i){var i=_hp_;continue}
               break}}
           result[2] = 0;
           return result}}];
    function create$1(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized_default;
      var x=16;
      for(;;)
       {if(!(initial_size <= x))
         if(!(max_array_length < (x * 2 | 0)))
          {var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         {var
           _hf_=caml_obj_tag(prng),
           _hg_=250 === _hf_?prng[1]:246 === _hf_?force_lazy_block(prng):prng;
          _hg_[2] = (_hg_[2] + 1 | 0) % 55 | 0;
          var
           _hc_=_hg_[2],
           curval=caml_check_bound(_hg_[1],_hc_)[_hc_ + 1],
           _hd_=(_hg_[2] + 24 | 0) % 55 | 0,
           newval=
            caml_check_bound(_hg_[1],_hd_)[_hd_ + 1]
            +
            (curval ^ (curval >>> 25 | 0) & 31)
            |
            0,
           newval30=newval & 1073741823,
           _he_=_hg_[2];
          caml_check_bound(_hg_[1],_he_)[_he_ + 1] = newval30;
          var seed=newval30}
        else
         var seed=0;
        return [0,0,caml_make_vect(x,0),seed,x]}}
    function add_queue(x,q)
     {var c=[0,[0,x,0]],_hb_=q[1];
      if(_hb_){var cell=_hb_[1];q[1] = c;cell[2] = c;return 0}
      q[1] = c;
      q[2] = c;
      return 0}
    var Empty_queue=[248,_bY_,caml_fresh_oo_id(0)];
    function take_queue(q)
     {var _ha_=q[2];
      if(_ha_)
       {var match=_ha_[1],x=match[1],tl=match[2];
        q[2] = tl;
        if(0 === tl)q[1] = 0;
        return x}
      throw Empty_queue}
    function pp_enqueue(state,token)
     {var len=token[3];
      state[13] = state[13] + len | 0;
      return add_queue(token,state[27])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function pp_output_spaces(state,n){return caml_call1(state[20],n)}
    function break_new_line(state,offset,width)
     {pp_output_newline(state);
      state[11] = 1;
      var
       y=(state[6] - width | 0) + offset | 0,
       _g$_=state[8],
       real_indent=caml_lessequal(_g$_,y)?_g$_:y;
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      return pp_output_spaces(state,state[10])}
    function break_line(state,width){return break_new_line(state,0,width)}
    function break_same_line(state,width)
     {state[9] = state[9] - width | 0;return pp_output_spaces(state,width)}
    function pp_force_break_line(state)
     {var _g8_=state[2];
      if(_g8_)
       {var
         match=_g8_[1],
         width=match[2],
         bl_ty=match[1],
         _g9_=state[9] < width?1:0;
        if(_g9_)
         {if(0 !== bl_ty)return 5 <= bl_ty?0:break_line(state,width);
          var _g__=0}
        else
         var _g__=_g9_;
        return _g__}
      return pp_output_newline(state)}
    function pp_skip_token(state)
     {var match=take_queue(state[27]),size=match[1],len=match[3];
      state[12] = state[12] - len | 0;
      state[9] = state[9] + size | 0;
      return 0}
    function format_pp_token(state,size,param)
     {if(typeof param === "number")
       switch(param)
        {case 0:
          var _gX_=state[3];
          if(_gX_)
           {var
             match=_gX_[1],
             tabs=match[1],
             add_tab=
              function(n,ls)
               {if(ls)
                 {var l=ls[2],x=ls[1];
                  return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]}
                return [0,n,0]};
            tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1]);
            return 0}
          return 0;
         case 1:
          var _gY_=state[2];
          if(_gY_){var ls=_gY_[2];state[2] = ls;return 0}
          return 0;
         case 2:
          var _gZ_=state[3];
          if(_gZ_){var ls$0=_gZ_[2];state[3] = ls$0;return 0}
          return 0;
         case 3:
          var _g0_=state[2];
          if(_g0_)
           {var match$0=_g0_[1],width=match$0[2];
            return break_line(state,width)}
          return pp_output_newline(state);
         case 4:
          var _g1_=state[10] !== (state[6] - state[9] | 0)?1:0;
          return _g1_?pp_skip_token(state):_g1_;
         default:
          var _g2_=state[5];
          if(_g2_)
           {var
             tags=_g2_[2],
             tag_name=_g2_[1],
             marker=caml_call1(state[24],tag_name);
            pp_output_string(state,marker);
            state[5] = tags;
            return 0}
          return 0}
      else
       switch(param[0])
        {case 0:
          var s=param[1];
          state[9] = state[9] - size | 0;
          pp_output_string(state,s);
          state[11] = 0;
          return 0;
         case 1:
          var off=param[2],n=param[1],_g3_=state[2];
          if(_g3_)
           {var match$1=_g3_[1],width$0=match$1[2],ty=match$1[1];
            switch(ty)
             {case 0:return break_same_line(state,n);
              case 1:return break_new_line(state,off,width$0);
              case 2:return break_new_line(state,off,width$0);
              case 3:
               return state[9] < size
                       ?break_new_line(state,off,width$0)
                       :break_same_line(state,n);
              case 4:
               return state[11]
                       ?break_same_line(state,n)
                       :state[9] < size
                         ?break_new_line(state,off,width$0)
                         :((state[6] - width$0 | 0) + off | 0) < state[10]
                           ?break_new_line(state,off,width$0)
                           :break_same_line(state,n);
              default:return break_same_line(state,n)}}
          return 0;
         case 2:
          var
           off$0=param[2],
           n$0=param[1],
           insertion_point=state[6] - state[9] | 0,
           _g4_=state[3];
          if(_g4_)
           {var
             match$2=_g4_[1],
             tabs$0=match$2[1],
             find=
              function(n,param)
               {var param$0=param;
                for(;;)
                 {if(param$0)
                   {var l=param$0[2],x=param$0[1];
                    if(caml_greaterequal(x,n))return x;
                    var param$0=l;
                    continue}
                  throw Not_found}},
             _g5_=tabs$0[1];
            if(_g5_)
             {var x=_g5_[1];
              try
               {var _g6_=find(insertion_point,tabs$0[1]),x$0=_g6_}
              catch(_g7_)
               {_g7_ = caml_wrap_exception(_g7_);
                if(_g7_ !== Not_found)throw _g7_;
                var x$0=x}
              var tab=x$0}
            else
             var tab=insertion_point;
            var offset=tab - insertion_point | 0;
            return 0 <= offset
                    ?break_same_line(state,offset + n$0 | 0)
                    :break_new_line(state,tab + off$0 | 0,state[6])}
          return 0;
         case 3:
          var
           ty$0=param[2],
           off$1=param[1],
           insertion_point$0=state[6] - state[9] | 0;
          if(state[8] < insertion_point$0)pp_force_break_line(state);
          var
           offset$0=state[9] - off$1 | 0,
           bl_type=1 === ty$0?1:state[9] < size?ty$0:5;
          state[2] = [0,[0,bl_type,offset$0],state[2]];
          return 0;
         case 4:var tbox=param[1];state[3] = [0,tbox,state[3]];return 0;
         default:
          var tag_name$0=param[1],marker$0=caml_call1(state[23],tag_name$0);
          pp_output_string(state,marker$0);
          state[5] = [0,tag_name$0,state[5]];
          return 0}}
    function advance_loop(state)
     {for(;;)
       {var _gT_=state[27][2];
        if(_gT_)
         {var
           match=_gT_[1],
           x=match[1],
           size=x[1],
           len=x[3],
           tok=x[2],
           _gU_=size < 0?1:0,
           _gV_=_gU_?(state[13] - state[12] | 0) < state[9]?1:0:_gU_,
           _gW_=1 - _gV_;
          if(_gW_)
           {take_queue(state[27]);
            var size$0=0 <= size?size:pp_infinity;
            format_pp_token(state,size$0,tok);
            state[12] = len + state[12] | 0;
            continue}
          return _gW_}
        throw Empty_queue}}
    function advance_left(state)
     {try
       {var _gR_=advance_loop(state);return _gR_}
      catch(_gS_)
       {_gS_ = caml_wrap_exception(_gS_);
        if(_gS_ === Empty_queue)return 0;
        throw _gS_}}
    var q_elem=[0,-1,_bZ_,0],scan_stack_bottom=[0,[0,-1,q_elem],0];
    function clear_scan_stack(state){state[1] = scan_stack_bottom;return 0}
    function set_size(state,ty)
     {var _gN_=state[1];
      if(_gN_)
       {var
         match=_gN_[1],
         queue_elem=match[2],
         left_tot=match[1],
         size=queue_elem[1],
         t=_gN_[2],
         tok=queue_elem[2];
        if(left_tot < state[12])return clear_scan_stack(state);
        if(typeof tok !== "number")
         switch(tok[0])
          {case 3:
            var
             _gP_=1 - ty,
             _gQ_=
              _gP_?(queue_elem[1] = state[13] + size | 0,state[1] = t,0):_gP_;
            return _gQ_;
           case 1:
           case 2:
            var
             _gO_=
              ty?(queue_elem[1] = state[13] + size | 0,state[1] = t,0):ty;
            return _gO_
           }
        return 0}
      return 0}
    var blank_line=make$0(80,32);
    function default_pp_mark_open_tag(s){return _a_(_b2_,_a_(s,_b1_))}
    function default_pp_mark_close_tag(s){return _a_(_b4_,_a_(s,_b3_))}
    function default_pp_print_open_tag(_gM_){return 0}
    function default_pp_print_close_tag(_gL_){return 0}
    function make_formatter(output,flush)
     {function i(_gK_){return 0}
      function h(_gJ_){return 0}
      var pp_queue=[0,0,0],sys_tok=[0,-1,_b5_,0];
      add_queue(sys_tok,pp_queue);
      var
       sys_scan_stack=[0,[0,1,sys_tok],scan_stack_bottom],
       ppf=
        [0,
         sys_scan_stack,
         0,
         0,
         0,
         0,
         78,
         10,
         68,
         78,
         0,
         1,
         1,
         1,
         1,
         max_int,
         _b6_,
         output,
         flush,
         h,
         i,
         0,
         0,
         default_pp_mark_open_tag,
         default_pp_mark_close_tag,
         default_pp_print_open_tag,
         default_pp_print_close_tag,
         pp_queue];
      ppf[19] = function(_gI_){return caml_call3(ppf[17],_b0_,0,1)};
      ppf[20]
      =
      function(n$1)
       {var n=n$1;
        for(;;)
         {var _gH_=0 < n?1:0;
          if(_gH_)
           {if(80 < n)
             {caml_call3(ppf[17],blank_line,0,80);
              var n$0=n - 80 | 0,n=n$0;
              continue}
            return caml_call3(ppf[17],blank_line,0,n)}
          return _gH_}};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _gG_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(s,ofs,len)
                {if(0 <= ofs)
                  if(0 <= len)
                   if(!((caml_ml_string_length(s) - len | 0) < ofs))
                    return caml_ml_output(oc,s,ofs,len);
                 return invalid_arg(_f_)},
               _gG_)}
    function formatter_of_buffer(b)
     {function _gB_(_gF_){return 0}
      return make_formatter
              (function(s,offset,len)
                {var _gC_=offset < 0?1:0;
                 if(_gC_)
                  var _gD_=_gC_;
                 else
                  var
                   _gE_=len < 0?1:0,
                   _gD_=
                    _gE_
                    ||
                    (caml_ml_string_length(s) < (offset + len | 0)?1:0);
                 if(_gD_)invalid_arg(_G_);
                 var new_position=b[2] + len | 0;
                 if(b[3] < new_position)resize(b,len);
                 blit$0(s,offset,b[1],b[2],len);
                 b[2] = new_position;
                 return 0},
               _gB_)}
    var pp_buffer_size=512;
    function pp_make_buffer(param){return create$0(pp_buffer_size)}
    var stdbuf=pp_make_buffer(0),state=formatter_of_out_channel(stdout);
    formatter_of_out_channel(stderr);
    formatter_of_buffer(stdbuf);
    function print_flush(_gA_)
     {for(;;)
       {if(1 < state[14])
         {if(1 < state[14])
           {if(state[14] < state[15])
             {pp_enqueue(state,[0,0,1,0]);set_size(state,1);set_size(state,0)}
            state[14] = state[14] - 1 | 0}
          continue}
        state[13] = pp_infinity;
        advance_left(state);
        state[12] = 1;
        state[13] = 1;
        var _gy_=state[27];
        _gy_[1] = 0;
        _gy_[2] = 0;
        clear_scan_stack(state);
        state[2] = 0;
        state[3] = 0;
        state[4] = 0;
        state[5] = 0;
        state[10] = 0;
        state[14] = 0;
        state[9] = state[6];
        state[14] = state[14] + 1 | 0;
        var br_ty=3,indent=0;
        if(state[14] < state[15])
         {var tok$0=[0,-state[13] | 0,[3,indent,br_ty],0];
          pp_enqueue(state,tok$0);
          state[1] = [0,[0,state[13],tok$0],state[1]]}
        else
         if(state[14] === state[15])
          {var
            _gz_=state[16],
            size=caml_ml_string_length(_gz_),
            tok=[0,size,[0,_gz_],size];
           pp_enqueue(state,tok);
           advance_left(state)}
        return caml_call1(state[18],0)}}
    at_exit(print_flush);
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var initial_object_size=2;
    function public_method_label(s)
     {var accu=[0,0],_gv_=caml_ml_string_length(s) - 1 | 0,_gu_=0;
      if(!(_gv_ < 0))
       {var i=_gu_;
        for(;;)
         {var _gw_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _gw_ | 0;
          var _gx_=i + 1 | 0;
          if(_gv_ !== i){var i=_gx_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    var
     compare=caml_string_compare,
     Vars=_C_([0,compare]),
     compare$0=caml_string_compare,
     Meths=_C_([0,compare$0]),
     compare$1=caml_int_compare,
     Labs=_C_([0,compare$1]),
     table_count=[0,0],
     dummy_met=caml_obj_block(0,0);
    function fit_size(n){return 2 < n?fit_size((n + 1 | 0) / 2 | 0) * 2 | 0:n}
    function new_table(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       methods=caml_make_vect((len * 2 | 0) + 2 | 0,dummy_met);
      caml_check_bound(methods,0)[1] = len;
      var _go_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
      caml_check_bound(methods,1)[2] = _go_;
      var _gq_=len - 1 | 0,_gp_=0;
      if(!(_gq_ < 0))
       {var i=_gp_;
        for(;;)
         {var
           _gs_=(i * 2 | 0) + 3 | 0,
           _gr_=caml_check_bound(pub_labels,i)[i + 1];
          caml_check_bound(methods,_gs_)[_gs_ + 1] = _gr_;
          var _gt_=i + 1 | 0;
          if(_gq_ !== i){var i=_gt_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function resize$0(array,new_size)
     {var len=array[2].length - 1,_gl_=len < new_size?1:0;
      if(_gl_)
       {var
         a2=caml_make_vect(new_size,dummy_met),
         _gm_=array[2],
         switch$0=
          0 <= len
           ?(_gm_.length - 1 - len | 0) < 0
             ?0
             :(a2.length - 1 - len | 0) < 0
               ?0
               :(caml_array_blit(_gm_,0,a2,0,len),1)
           :0;
        if(!switch$0)invalid_arg(_t_);
        array[2] = a2;
        var _gn_=0}
      else
       var _gn_=_gl_;
      return _gn_}
    var method_count=[0,0],inst_var_count=[0,0];
    function new_method(table)
     {var index=table[2].length - 1;
      resize$0(table,index + 1 | 0);
      return index}
    function get_method_label(table,name)
     {try
       {var _gj_=caml_call2(Meths[23],name,table[3]);return _gj_}
      catch(_gk_)
       {_gk_ = caml_wrap_exception(_gk_);
        if(_gk_ === Not_found)
         {var label=new_method(table);
          table[3] = caml_call3(Meths[4],name,label,table[3]);
          table[4] = caml_call3(Labs[4],label,1,table[4]);
          return label}
        throw _gk_}}
    function new_slot(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function new_variable(table,name)
     {try
       {var _gh_=caml_call2(Vars[23],name,table[7]);return _gh_}
      catch(_gi_)
       {_gi_ = caml_wrap_exception(_gi_);
        if(_gi_ === Not_found)
         {var index=new_slot(table);
          if(caml_string_notequal(name,_b7_))
           table[7] = caml_call3(Vars[4],name,index,table[7]);
          return index}
        throw _gi_}}
    function make_class(pub_meths,class_init)
     {if(pub_meths === 0)
       var table$0=new_table([0]);
      else
       {var
         tags=map$0(public_method_label,pub_meths),
         table=new_table(tags),
         _gf_=pub_meths.length - 1 - 1 | 0,
         _ge_=0;
        if(!(_gf_ < 0))
         {var i=_ge_;
          for(;;)
           {var met=pub_meths[i + 1],lab=(i * 2 | 0) + 2 | 0;
            table[3] = caml_call3(Meths[4],met,lab,table[3]);
            table[4] = caml_call3(Labs[4],lab,1,table[4]);
            var _gg_=i + 1 | 0;
            if(_gf_ !== i){var i=_gg_;continue}
            break}}
        var table$0=table}
      var env_init=caml_call1(class_init,table$0);
      inst_var_count[1] = (inst_var_count[1] + table$0[1] | 0) - 1 | 0;
      table$0[8] = rev(table$0[8]);
      resize$0
       (table$0,
        3 + ((caml_check_bound(table$0[2],1)[2] * 16 | 0) / 32 | 0) | 0);
      return [0,caml_call1(env_init,0),class_init,env_init,0]}
    function new_cache(table)
     {var n=new_method(table);
      if(0 === (n % 2 | 0))
       var switch$0=0;
      else
       if((2 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0) < n)
        var switch$0=0;
       else
        var n$0=new_method(table),switch$0=1;
      if(!switch$0)var n$0=n;
      caml_check_bound(table[2],n$0)[n$0 + 1] = 0;
      return n$0}
    caml_fresh_oo_id(0);
    function create$2(param)
     {var seq=[];caml_update_dummy(seq,[0,seq,seq]);return seq}
    var
     Canceled=[248,_b8_,caml_fresh_oo_id(0)],
     compare$2=caml_compare,
     Int_map=_C_([0,compare$2]),
     current_data=[0,Int_map[1]];
    function repr_rec(t)
     {var _gd_=t[1];
      if(3 === _gd_[0])
       {var t$0=_gd_[1],t$1=repr_rec(t$0);
        if(t$1 !== t$0)t[1] = [3,t$1];
        return t$1}
      return t}
    function repr(t){return repr_rec(t)}
    var
     async_exception_hook=
      [0,
       function(exn)
        {prerr_string(_b9_);
         prerr_string(to_string(exn));
         caml_ml_output_char(stderr,10);
         print_backtrace(stderr);
         caml_ml_flush(stderr);
         do_at_exit(0);
         return caml_sys_exit(2)}];
    function call_unsafe(f,x)
     {try
       {var _gc_=caml_call1(f,x);return _gc_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call1(async_exception_hook[1],exn)}}
    function run_waiters_rec$0(counter,state,ws,rem)
     {var ws$0=ws,rem$0=rem;
      for(;;)
       if(typeof ws$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return run_waiters_rec_next(counter$0,state,rem$0)}
         return caml_trampoline_return(run_waiters_rec_next,[0,state,rem$0])}
       else
        switch(ws$0[0])
         {case 0:
           var _gb_=ws$0[1][1];
           if(_gb_)
            {var f=_gb_[1];
             caml_call1(f,state);
             if(counter < 50)
              {var counter$1=counter + 1 | 0;
               return run_waiters_rec_next(counter$1,state,rem$0)}
             return caml_trampoline_return
                     (run_waiters_rec_next,[0,state,rem$0])}
           if(counter < 50)
            {var counter$2=counter + 1 | 0;
             return run_waiters_rec_next(counter$2,state,rem$0)}
           return caml_trampoline_return(run_waiters_rec_next,[0,state,rem$0]);
          case 1:
           var f$0=ws$0[1];
           caml_call1(f$0,state);
           if(counter < 50)
            {var counter$3=counter + 1 | 0;
             return run_waiters_rec_next(counter$3,state,rem$0)}
           return caml_trampoline_return(run_waiters_rec_next,[0,state,rem$0]);
          default:
           var
            ws2=ws$0[2],
            ws$1=ws$0[1],
            rem$1=[0,ws2,rem$0],
            ws$0=ws$1,
            rem$0=rem$1;
           continue}}
    function run_waiters_rec_next(counter,state,rem)
     {if(rem)
       {var rem$0=rem[2],ws=rem[1];
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return run_waiters_rec$0(counter$0,state,ws,rem$0)}
        return caml_trampoline_return(run_waiters_rec$0,[0,state,ws,rem$0])}
      return 0}
    function run_waiters_rec(state,ws,rem)
     {return caml_trampoline(run_waiters_rec$0(0,state,ws,rem))}
    function run_cancel_handlers_rec$0(counter,chs,rem)
     {var chs$0=chs,rem$0=rem;
      for(;;)
       if(typeof chs$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return run_cancel_handlers_rec_next(counter$0,rem$0)}
         return caml_trampoline_return(run_cancel_handlers_rec_next,[0,rem$0])}
       else
        switch(chs$0[0])
         {case 0:
           var f=chs$0[2],data=chs$0[1];
           current_data[1] = data;
           call_unsafe(f,0);
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return run_cancel_handlers_rec_next(counter$1,rem$0)}
           return caml_trampoline_return
                   (run_cancel_handlers_rec_next,[0,rem$0]);
          case 1:
           var n=chs$0[1];
           if(n[4]){n[4] = 0;n[1][2] = n[2];n[2][1] = n[1]}
           if(counter < 50)
            {var counter$2=counter + 1 | 0;
             return run_cancel_handlers_rec_next(counter$2,rem$0)}
           return caml_trampoline_return
                   (run_cancel_handlers_rec_next,[0,rem$0]);
          default:
           var
            chs2=chs$0[2],
            chs$1=chs$0[1],
            rem$1=[0,chs2,rem$0],
            chs$0=chs$1,
            rem$0=rem$1;
           continue}}
    function run_cancel_handlers_rec_next(counter,rem)
     {if(rem)
       {var rem$0=rem[2],chs=rem[1];
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return run_cancel_handlers_rec$0(counter$0,chs,rem$0)}
        return caml_trampoline_return(run_cancel_handlers_rec$0,[0,chs,rem$0])}
      return 0}
    function run_cancel_handlers_rec(chs,rem)
     {return caml_trampoline(run_cancel_handlers_rec$0(0,chs,rem))}
    function unsafe_run_waiters(sleeper,state)
     {var
       switch$0=
        1 === state[0]
         ?state[1] === Canceled?(run_cancel_handlers_rec(sleeper[4],0),1):0
         :0;
      return run_waiters_rec(state,sleeper[2],0)}
    var wakening=[0,0],q=create(0);
    function safe_run_waiters(sleeper,state)
     {var
       snapshot=current_data[1],
       already_wakening=wakening[1]?1:(wakening[1] = 1,0);
      unsafe_run_waiters(sleeper,state);
      if(already_wakening){current_data[1] = snapshot;return 0}
      for(;;)
       {if(0 === q[1]){wakening[1] = 0;current_data[1] = snapshot;return 0}
        var _f__=q[2];
        if(_f__)
         {var _f$_=_f__[1],_ga_=_f__[2];
          if(_ga_)
           {q[1] = q[1] - 1 | 0;q[2] = _ga_}
          else
           {q[1] = 0;q[2] = 0;q[3] = 0}
          unsafe_run_waiters(_f$_[1],_f$_[2]);
          continue}
        throw Empty}}
    function state_of_result(param)
     {if(0 === param[0]){var x=param[1];return [0,x]}
      var e=param[1];
      return [1,e]}
    function wakeup(t$0,v)
     {var result=[0,v],t=repr_rec(t$0),_f9_=t[1];
      switch(_f9_[0])
       {case 1:if(_f9_[1] === Canceled)return 0;break;
        case 2:
         var sleeper=_f9_[1],state=state_of_result(result);
         t[1] = state;
         return safe_run_waiters(sleeper,state)
        }
      return invalid_arg(_b__)}
    function wakeup_later_result(t,result)
     {var t$0=repr_rec(t),_f8_=t$0[1];
      switch(_f8_[0])
       {case 1:if(_f8_[1] === Canceled)return 0;break;
        case 2:
         var sleeper=_f8_[1],state=state_of_result(result);
         t$0[1] = state;
         if(wakening[1])
          {var x=[0,sleeper,state],cell=[0,x,0],_f7_=q[3];
           return _f7_
                   ?(q[1] = q[1] + 1 | 0,_f7_[2] = cell,q[3] = cell,0)
                   :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
         return safe_run_waiters(sleeper,state)
        }
      return invalid_arg(_b$_)}
    function wakeup_later(t,v){return wakeup_later_result(t,[0,v])}
    function append(l1,l2)
     {return typeof l1 === "number"?l2:typeof l2 === "number"?l1:[2,l1,l2]}
    function cleanup(ws)
     {if(typeof ws !== "number")
       switch(ws[0])
        {case 0:if(!ws[1][1])return 0;break;
         case 2:
          var l2=ws[2],l1=ws[1],_f6_=cleanup(l2);
          return append(cleanup(l1),_f6_)
         }
      return ws}
    function connect(t1,t2)
     {var t1$0=repr(t1),t2$0=repr(t2),_f1_=t1$0[1];
      if(2 === _f1_[0])
       {var sleeper1=_f1_[1];
        if(t1$0 === t2$0)return 0;
        var _f2_=t2$0[1];
        if(2 === _f2_[0])
         {var sleeper2=_f2_[1];
          t2$0[1] = [3,t1$0];
          sleeper1[1] = sleeper2[1];
          var
           waiters=append(sleeper1[2],sleeper2[2]),
           removed=sleeper1[3] + sleeper2[3] | 0;
          if(42 < removed)
           {sleeper1[3] = 0;sleeper1[2] = cleanup(waiters)}
          else
           {sleeper1[3] = removed;sleeper1[2] = waiters}
          var
           _f3_=sleeper2[4],
           _f4_=sleeper1[4],
           _f5_=
            typeof _f4_ === "number"
             ?_f3_
             :typeof _f3_ === "number"?_f4_:[2,_f4_,_f3_];
          sleeper1[4] = _f5_;
          return 0}
        t1$0[1] = _f2_;
        return unsafe_run_waiters(sleeper1,_f2_)}
      throw [0,Assert_failure,_ca_]}
    function fast_connect(t,state)
     {var t$0=repr(t),_f0_=t$0[1];
      if(2 === _f0_[0])
       {var sleeper=_f0_[1];
        t$0[1] = state;
        return unsafe_run_waiters(sleeper,state)}
      throw [0,Assert_failure,_cb_]}
    function return$0(v){return [0,[0,v]]}
    var return_unit=[0,state_return_unit],return_none=return$0(0);
    function fail(e){return [0,[1,e]]}
    function temp(t){return [0,[2,[0,[0,[0,t]],0,0,0]]]}
    function wait(param){var t=[0,[2,[0,0,0,0,0]]];return [0,t,t]}
    function task_aux(param){return [0,[2,[0,1,0,0,0]]]}
    function task(param){var t=task_aux(0);return [0,t,t]}
    function add_waiter(sleeper,waiter)
     {var
       _fZ_=sleeper[2],
       waiter$0=typeof _fZ_ === "number"?waiter:[2,waiter,_fZ_];
      sleeper[2] = waiter$0;
      return 0}
    function add_immutable_waiter(sleeper,waiter)
     {return add_waiter(sleeper,[1,waiter])}
    function on_cancel(t,f)
     {var _fX_=repr(t)[1];
      switch(_fX_[0])
       {case 1:if(_fX_[1] === Canceled)return call_unsafe(f,0);break;
        case 2:
         var
          sleeper=_fX_[1],
          handler=[0,current_data[1],f],
          _fY_=sleeper[4],
          handler$0=typeof _fY_ === "number"?handler:[2,handler,_fY_];
         sleeper[4] = handler$0;
         return 0
        }
      return 0}
    function _ce_(t$0,f)
     {var t=repr(t$0),_fU_=t[1];
      switch(_fU_[0])
       {case 0:var v=_fU_[1];return caml_call1(f,v);
        case 1:return [0,_fU_];
        case 2:
         var sleeper=_fU_[1],res=temp(t),data=current_data[1];
         add_immutable_waiter
          (sleeper,
           function(state)
            {switch(state[0])
              {case 0:
                var v=state[1];
                current_data[1] = data;
                try
                 {var _fW_=caml_call1(f,v),_fV_=_fW_}
                catch(exn){exn = caml_wrap_exception(exn);var _fV_=fail(exn)}
                return connect(res,_fV_);
               case 1:return fast_connect(res,state);
               default:throw [0,Assert_failure,_cc_]}});
         return res;
        default:throw [0,Assert_failure,_cd_]}}
    function catch$0(x,f)
     {try
       {var _fR_=caml_call1(x,0),_fP_=_fR_}
      catch(exn){exn = caml_wrap_exception(exn);var _fP_=fail(exn)}
      var t=repr(_fP_),_fQ_=t[1];
      switch(_fQ_[0])
       {case 0:return t;
        case 1:var exn=_fQ_[1];return caml_call1(f,exn);
        case 2:
         var sleeper=_fQ_[1],res=temp(t),data=current_data[1];
         add_immutable_waiter
          (sleeper,
           function(state)
            {switch(state[0])
              {case 0:return fast_connect(res,state);
               case 1:
                var exn=state[1];
                current_data[1] = data;
                try
                 {var _fT_=caml_call1(f,exn),_fS_=_fT_}
                catch(exn){exn = caml_wrap_exception(exn);var _fS_=fail(exn)}
                return connect(res,_fS_);
               default:throw [0,Assert_failure,_cf_]}});
         return res;
        default:throw [0,Assert_failure,_cg_]}}
    function async(f)
     {try
       {var _fO_=caml_call1(f,0),_fM_=_fO_}
      catch(exn){exn = caml_wrap_exception(exn);var _fM_=fail(exn)}
      var t=repr(_fM_),_fN_=t[1];
      switch(_fN_[0])
       {case 0:return 0;
        case 1:var exn=_fN_[1];return caml_call1(async_exception_hook[1],exn);
        case 2:
         var sleeper=_fN_[1];
         return add_immutable_waiter
                 (sleeper,
                  function(param)
                   {switch(param[0])
                     {case 0:return 0;
                      case 1:
                       var exn=param[1];
                       return caml_call1(async_exception_hook[1],exn);
                      default:throw [0,Assert_failure,_ch_]}});
        default:throw [0,Assert_failure,_ci_]}}
    function protected$0(t)
     {switch(repr(t)[1][0])
       {case 2:
         var
          t$0=task_aux(0),
          waiter=[],
          waiter$0=function _fL_(_fK_){return _fL_.fun(_fK_)};
         caml_update_dummy(waiter,[0,[0,waiter$0]]);
         caml_update_dummy
          (waiter$0,
           function(state)
            {var t=repr(t$0),_fJ_=t[1];
             if(2 === _fJ_[0])
              {var sleeper=_fJ_[1];
               t[1] = state;
               return unsafe_run_waiters(sleeper,state)}
             return 0});
         var threads=[0,t,0],node=[0,waiter];
         iter
          (function(t)
            {var _fI_=repr(t)[1];
             if(2 === _fI_[0])
              {var sleeper=_fI_[1];return add_waiter(sleeper,node)}
             throw [0,Assert_failure,_cj_]},
           threads);
         on_cancel
          (t$0,
           function(param)
            {waiter[1] = 0;
             var l=[0,t,0];
             return iter
                     (function(t)
                       {var _fF_=repr(t)[1];
                        if(2 === _fF_[0])
                         {var _fG_=_fF_[1],_fH_=_fG_[2];
                          if(typeof _fH_ !== "number" && 0 === _fH_[0])
                           {_fG_[2] = 0;return 0}
                          var removed=_fG_[3] + 1 | 0;
                          return 42 < removed
                                  ?(_fG_[3] = 0,_fG_[2] = cleanup(_fG_[2]),0)
                                  :(_fG_[3] = removed,0)}
                        return 0},
                      l)});
         return t$0;
        case 3:throw [0,Assert_failure,_ck_];
        default:return t}}
    var pause_hook=[0,function(_fE_){return 0}],s1=create$2(0),_cl_=[0,0];
    function wakeup_paused(param)
     {if(s1[2] === s1){_cl_[1] = 0;return 0}
      var seq=create$2(0);
      seq[1][2] = s1[2];
      s1[2][1] = seq[1];
      seq[1] = s1[1];
      s1[1][2] = seq;
      s1[1] = s1;
      s1[2] = s1;
      _cl_[1] = 0;
      var curr=seq[2];
      for(;;)
       {var _fD_=curr !== seq?1:0;
        if(_fD_)
         {if(curr[4])wakeup(curr[3],0);
          var curr$0=curr[2],curr=curr$0;
          continue}
        return _fD_}}
    function register_pause_notifier(f){pause_hook[1] = f;return 0}
    function is_sleeping(t$1)
     {var t=t$1;
      for(;;)
       {var _fC_=t[1];
        switch(_fC_[0])
         {case 2:return 1;
          case 3:var t$0=_fC_[1],t=t$0;continue;
          default:return 0}}}
    var
     e=[248,_cm_,caml_fresh_oo_id(0)],
     Full=[248,_cn_,caml_fresh_oo_id(0)],
     Empty$0=[248,_co_,caml_fresh_oo_id(0)];
    function new_node(param)
     {var node=[];caml_update_dummy(node,[0,node,0]);return node}
    function from_source(source)
     {var last=new_node(0),match=wait(0),close=match[2];
      return [0,source,close,last,[0,last]]}
    function enqueue(e,last)
     {var _fB_=last[1],new_last=new_node(0);
      _fB_[2] = e;
      _fB_[1] = new_last;
      last[1] = new_last;
      return 0}
    function enqueue$0(e,s){return enqueue(e,s[4])}
    function notify_pusher(info,last)
     {enqueue(info[5],last);
      info[5] = 0;
      var old_wakener=info[7],match=task(0),wakener=match[2],waiter=match[1];
      info[6] = waiter;
      info[7] = wakener;
      return wakeup_later(old_wakener,0)}
    make_class
     (shared,
      function(table)
       {var
         _e3_=new_variable(table,_cp_),
         _e4_=new_variable(table,_cq_),
         _e5_=new_variable(table,_cr_),
         _e6_=new_variable(table,_cs_),
         nmeths=meths.length - 1,
         nvals=vals.length - 1,
         res=caml_make_vect(nmeths + nvals | 0,0),
         _eU_=nmeths - 1 | 0,
         _eT_=0;
        if(!(_eU_ < 0))
         {var i$0=_eT_;
          for(;;)
           {var
             _e0_=
              get_method_label(table,caml_check_bound(meths,i$0)[i$0 + 1]);
            caml_check_bound(res,i$0)[i$0 + 1] = _e0_;
            var _e1_=i$0 + 1 | 0;
            if(_eU_ !== i$0){var i$0=_e1_;continue}
            break}}
        var _eW_=nvals - 1 | 0,_eV_=0;
        if(!(_eW_ < 0))
         {var i=_eV_;
          for(;;)
           {var
             _eY_=i + nmeths | 0,
             _eX_=new_variable(table,caml_check_bound(vals,i)[i + 1]);
            caml_check_bound(res,_eY_)[_eY_ + 1] = _eX_;
            var _eZ_=i + 1 | 0;
            if(_eW_ !== i){var i=_eZ_;continue}
            break}}
        var
         _fd_=res[9],
         _e7_=res[1],
         _e8_=res[2],
         _e9_=res[3],
         _e__=res[4],
         _e$_=res[5],
         _fa_=res[6],
         _fb_=res[7],
         _fc_=res[8];
        function _fe_(self_1,x){self_1[_e3_ + 1][8] = x;return 0}
        function _ff_(self_1){return self_1[_fd_ + 1]}
        function _fg_(self_1){return 0 !== self_1[_e3_ + 1][5]?1:0}
        function _fh_(self_1){return self_1[_e3_ + 1][4]}
        function _fi_(self_1)
         {var _fz_=1 - self_1[_fd_ + 1];
          if(_fz_)
           {self_1[_fd_ + 1] = 1;
            var _fA_=self_1[_e5_ + 1][1],new_last=new_node(0);
            _fA_[2] = 0;
            _fA_[1] = new_last;
            self_1[_e5_ + 1][1] = new_last;
            if(0 !== self_1[_e3_ + 1][5])
             {self_1[_e3_ + 1][5] = 0;
              wakeup_later_result(self_1[_e3_ + 1][7],[1,e])}
            if(self_1[_e3_ + 1][2])
             {self_1[_e3_ + 1][2] = 0;
              var old_wakener=self_1[_e4_ + 1][1];
              wakeup_later(old_wakener,0)}
            return wakeup(self_1[_e6_ + 1],0)}
          return _fz_}
        function _fj_(self_1,x)
         {if(self_1[_fd_ + 1])return fail(e);
          if(0 === self_1[_e3_ + 1][5])
           {if(self_1[_e3_ + 1][3] <= self_1[_e3_ + 1][4])
             {self_1[_e3_ + 1][5] = [0,x];
              var
               _fy_=
                function(exn)
                 {if(exn === Canceled)
                   {self_1[_e3_ + 1][5] = 0;
                    var match=task(0),wakener=match[2],waiter=match[1];
                    self_1[_e3_ + 1][6] = waiter;
                    self_1[_e3_ + 1][7] = wakener;
                    return fail(exn)}
                  return fail(exn)};
              return catch$0(function(param){return self_1[_e3_ + 1][6]},_fy_)}
            enqueue([0,x],self_1[_e5_ + 1]);
            self_1[_e3_ + 1][4] = self_1[_e3_ + 1][4] + 1 | 0;
            if(self_1[_e3_ + 1][2])
             {self_1[_e3_ + 1][2] = 0;
              var
               old_wakener=self_1[_e4_ + 1][1],
               match=wait(0),
               new_wakener=match[2],
               new_waiter=match[1];
              self_1[_e3_ + 1][1] = new_waiter;
              self_1[_e4_ + 1][1] = new_wakener;
              wakeup_later(old_wakener,0)}
            return return_unit}
          return fail(Full)}
        function _fk_(self_1,size)
         {if(size < 0)invalid_arg(_ct_);
          self_1[_e3_ + 1][3] = size;
          var
           _fw_=self_1[_e3_ + 1][4] < self_1[_e3_ + 1][3]?1:0,
           _fx_=_fw_?0 !== self_1[_e3_ + 1][5]?1:0:_fw_;
          return _fx_
                  ?(self_1[_e3_ + 1][4]
                    =
                    self_1[_e3_ + 1][4]
                    +
                    1
                    |
                    0,
                    notify_pusher(self_1[_e3_ + 1],self_1[_e5_ + 1]))
                  :_fx_}
        var
         methods=
          [0,
           _e7_,
           function(self_1){return self_1[_e3_ + 1][3]},
           _e9_,
           _fk_,
           _e__,
           _fj_,
           _fb_,
           _fi_,
           _e$_,
           _fh_,
           _fc_,
           _fg_,
           _fa_,
           _ff_,
           _e8_,
           _fe_],
         len=methods.length - 1,
         i$1=[0,0];
        for(;;)
         {if(i$1[1] < len)
           {var
             _e2_=i$1[1],
             label=caml_check_bound(methods,_e2_)[_e2_ + 1],
             next=
              function(param)
               {i$1[1]++;
                var _fv_=i$1[1];
                return caml_check_bound(methods,_fv_)[_fv_ + 1]},
             clo=next(0);
            if(typeof clo === "number")
             switch(clo)
              {case 0:
                var
                 x=next(0),
                 clo$0=function(x){return function(obj){return x}}(x);
                break;
               case 1:
                var
                 n=next(0),
                 clo$0=function(n){return function(obj){return obj[n + 1]}}(n);
                break;
               case 2:
                var
                 e$0=next(0),
                 n$0=next(0),
                 clo$0=
                  function(e,n)
                    {return function(obj){return obj[e + 1][n + 1]}}
                   (e$0,n$0);
                break;
               case 3:
                var
                 n$1=next(0),
                 clo$0=
                  function(n)
                    {return function(obj){return caml_call1(obj[1][n + 1],obj)}}
                   (n$1);
                break;
               case 4:
                var
                 n$2=next(0),
                 clo$0=
                  function(n){return function(obj,x){obj[n + 1] = x;return 0}}
                   (n$2);
                break;
               case 5:
                var
                 f=next(0),
                 x$0=next(0),
                 clo$0=
                  function(f,x){return function(obj){return caml_call1(f,x)}}
                   (f,x$0);
                break;
               case 6:
                var
                 f$0=next(0),
                 n$3=next(0),
                 clo$0=
                  function(f,n)
                    {return function(obj){return caml_call1(f,obj[n + 1])}}
                   (f$0,n$3);
                break;
               case 7:
                var
                 f$1=next(0),
                 e$1=next(0),
                 n$4=next(0),
                 clo$0=
                  function(f,e,n)
                    {return function(obj)
                      {return caml_call1(f,obj[e + 1][n + 1])}}
                   (f$1,e$1,n$4);
                break;
               case 8:
                var
                 f$2=next(0),
                 n$5=next(0),
                 clo$0=
                  function(f,n)
                    {return function(obj)
                      {return caml_call1(f,caml_call1(obj[1][n + 1],obj))}}
                   (f$2,n$5);
                break;
               case 9:
                var
                 f$3=next(0),
                 x$1=next(0),
                 y=next(0),
                 clo$0=
                  function(f,x,y)
                    {return function(obj){return caml_call2(f,x,y)}}
                   (f$3,x$1,y);
                break;
               case 10:
                var
                 f$4=next(0),
                 x$2=next(0),
                 n$6=next(0),
                 clo$0=
                  function(f,x,n)
                    {return function(obj){return caml_call2(f,x,obj[n + 1])}}
                   (f$4,x$2,n$6);
                break;
               case 11:
                var
                 f$5=next(0),
                 x$3=next(0),
                 e$2=next(0),
                 n$7=next(0),
                 clo$0=
                  function(f,x,e,n)
                    {return function(obj)
                      {return caml_call2(f,x,obj[e + 1][n + 1])}}
                   (f$5,x$3,e$2,n$7);
                break;
               case 12:
                var
                 f$6=next(0),
                 x$4=next(0),
                 n$8=next(0),
                 clo$0=
                  function(f,x,n)
                    {return function(obj)
                      {return caml_call2(f,x,caml_call1(obj[1][n + 1],obj))}}
                   (f$6,x$4,n$8);
                break;
               case 13:
                var
                 f$7=next(0),
                 n$9=next(0),
                 x$5=next(0),
                 clo$0=
                  function(f,n,x)
                    {return function(obj){return caml_call2(f,obj[n + 1],x)}}
                   (f$7,n$9,x$5);
                break;
               case 14:
                var
                 f$8=next(0),
                 e$3=next(0),
                 n$10=next(0),
                 x$6=next(0),
                 clo$0=
                  function(f,e,n,x)
                    {return function(obj)
                      {return caml_call2(f,obj[e + 1][n + 1],x)}}
                   (f$8,e$3,n$10,x$6);
                break;
               case 15:
                var
                 f$9=next(0),
                 n$11=next(0),
                 x$7=next(0),
                 clo$0=
                  function(f,n,x)
                    {return function(obj)
                      {return caml_call2(f,caml_call1(obj[1][n + 1],obj),x)}}
                   (f$9,n$11,x$7);
                break;
               case 16:
                var
                 n$12=next(0),
                 x$8=next(0),
                 clo$0=
                  function(n,x)
                    {return function(obj)
                      {return caml_call2(obj[1][n + 1],obj,x)}}
                   (n$12,x$8);
                break;
               case 17:
                var
                 n$13=next(0),
                 m=next(0),
                 clo$0=
                  function(n,m)
                    {return function(obj)
                      {return caml_call2(obj[1][n + 1],obj,obj[m + 1])}}
                   (n$13,m);
                break;
               case 18:
                var
                 n$14=next(0),
                 e$4=next(0),
                 m$0=next(0),
                 clo$0=
                  function(n,e,m)
                    {return function(obj)
                      {return caml_call2(obj[1][n + 1],obj,obj[e + 1][m + 1])}}
                   (n$14,e$4,m$0);
                break;
               case 19:
                var
                 n$15=next(0),
                 m$1=next(0),
                 clo$0=
                  function(n,m)
                    {return function(obj)
                      {var _ft_=caml_call1(obj[1][m + 1],obj);
                       return caml_call2(obj[1][n + 1],obj,_ft_)}}
                   (n$15,m$1);
                break;
               case 20:
                var m$2=next(0),x$9=next(0);
                new_cache(table);
                var
                 clo$0=
                  function(m,x)
                    {return function(obj)
                      {return caml_call1(caml_get_public_method(x,m,0),x)}}
                   (m$2,x$9);
                break;
               case 21:
                var m$3=next(0),n$16=next(0);
                new_cache(table);
                var
                 clo$0=
                  function(m,n)
                    {return function(obj)
                      {var _fs_=obj[n + 1];
                       return caml_call1(caml_get_public_method(_fs_,m,0),_fs_)}}
                   (m$3,n$16);
                break;
               case 22:
                var m$4=next(0),e$5=next(0),n$17=next(0);
                new_cache(table);
                var
                 clo$0=
                  function(m,e,n)
                    {return function(obj)
                      {var _fr_=obj[e + 1][n + 1];
                       return caml_call1(caml_get_public_method(_fr_,m,0),_fr_)}}
                   (m$4,e$5,n$17);
                break;
               default:
                var m$5=next(0),n$18=next(0);
                new_cache(table);
                var
                 clo$0=
                  function(m,n)
                    {return function(obj)
                      {var _fu_=caml_call1(obj[1][n + 1],obj);
                       return caml_call1(caml_get_public_method(_fu_,m,0),_fu_)}}
                   (m$5,n$18)}
            else
             var clo$0=clo;
            method_count[1]++;
            if(caml_call2(Labs[23],label,table[4]))
             {resize$0(table,label + 1 | 0);
              caml_check_bound(table[2],label)[label + 1] = clo$0}
            else
             table[6] = [0,[0,label,clo$0],table[6]];
            i$1[1]++;
            continue}
          return function(_fp_,obj_0,_fo_,_fn_,_fm_,_fl_)
           {if(obj_0)
             var _fq_=obj_0;
            else
             {var obj=caml_obj_block(248,table[1]);
              obj[1] = table[2];
              var _fq_=caml_set_oo_id(obj)}
            _fq_[_e6_ + 1] = _fl_;
            _fq_[_e5_ + 1] = _fm_;
            _fq_[_e4_ + 1] = _fn_;
            _fq_[_e3_ + 1] = _fo_;
            _fq_[_fd_ + 1] = 0;
            return _fq_}}});
    function feed(s)
     {var _eR_=s[1];
      switch(_eR_[0])
       {case 0:
         var from=_eR_[1];
         if(is_sleeping(from[2]))return protected$0(from[2]);
         var
          _eS_=
           function(x)
            {enqueue$0(x,s);if(0 === x)wakeup(s[2],0);return return_unit},
          thread=_ce_(caml_call1(from[1],0),_eS_);
         from[2] = thread;
         return protected$0(thread);
        case 1:
         var f=_eR_[1],x=caml_call1(f,0);
         enqueue$0(x,s);
         if(0 === x)wakeup(s[2],0);
         return return_unit;
        case 2:var push=_eR_[1];push[2] = 1;return protected$0(push[1]);
        default:var push$0=_eR_[1];push$0[2] = 1;return protected$0(push$0[1])}}
    function consume(s,node)
     {var _eP_=node === s[3]?1:0;
      if(_eP_)
       {s[3] = node[1];
        var _eQ_=s[1];
        if(3 === _eQ_[0])
         {var info=_eQ_[1];
          return 0 === info[5]
                  ?(info[4] = info[4] - 1 | 0,0)
                  :notify_pusher(info,s[4])}
        return 0}
      return _eP_}
    function get_rec(s,node)
     {if(node === s[4][1])
       {var _eO_=function(param){return get_rec(s,node)};
        return _ce_(feed(s),_eO_)}
      if(0 !== node[2])consume(s,node);
      return return$0(node[2])}
    function next_rec(s,node)
     {if(node === s[4][1])
       {var _eM_=function(param){return next_rec(s,node)};
        return _ce_(feed(s),_eM_)}
      var _eN_=node[2];
      if(_eN_){var x=_eN_[1];consume(s,node);return return$0(x)}
      return fail(Empty$0)}
    var window$0=joo_global_object,no_handler=null,empty=undefined;
    function test(x){return x !== empty?1:0}
    var
     jsoo_a44ae7e3=true,
     array_get=caml_js_get,
     jsoo_7bc72a9e=window$0.Array,
     jsoo_442f87c4=window$0.Date,
     jsoo_obj=window$0.Math,
     Error$0=[248,_cu_,caml_fresh_oo_id(0)];
    register_exception(_cv_,[0,Error$0,{}]);
    (function(exn){throw exn});
    var jsoo_23bc3efc=false;
    register_printer
     (function(param)
       {if(param[1] === Error$0)
         {var e=param[2];return [0,caml_js_to_string(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof jsoo_7bc72a9e
                ?0
                :[0,caml_js_to_string(e.toString())]});
    function preventDefault(ev)
     {return test(ev.preventDefault)?ev.preventDefault():ev.returnValue = !!0}
    var
     mousedown="mousedown",
     mouseup="mouseup",
     mousemove="mousemove",
     touchstart="touchstart",
     touchmove="touchmove",
     touchend="touchend",
     load="load",
     document=window$0.document;
    caml_fresh_oo_id(0);
    var html_element=window$0.HTMLElement,jsoo_67e0736b="2d";
    html_element === empty;
    function unsafeCoerce(tag,e)
     {var _eL_=tag.toString();
      return e.tagName.toLowerCase() === _eL_?e:no_handler}
    function canvas(e){return unsafeCoerce(_cw_,e)}
    function video(e){return unsafeCoerce(_cx_,e)}
    var
     requestAnimationFrame=
      caml_js_pure_expr
       (function(param)
         {var
           l=
            [0,
             window$0.requestAnimationFrame,
             [0,
              window$0.mozRequestAnimationFrame,
              [0,
               window$0.webkitRequestAnimationFrame,
               [0,
                window$0.oRequestAnimationFrame,
                [0,window$0.msRequestAnimationFrame,0]]]]];
          try
           {var
             req=find(function(c){return test(c)},l),
             _eJ_=function(callback){return req(callback)};
            return _eJ_}
          catch(_eK_)
           {_eK_ = caml_wrap_exception(_eK_);
            if(_eK_ === Not_found)
             {var
               now=function(param){return new jsoo_442f87c4().getTime()},
               last=[0,now(0)];
              return function(callback)
               {var
                 t=now(0),
                 dt=last[1] + 16.6666666666666679 - t,
                 dt$0=dt < 0?0:dt;
                last[1] = t;
                window$0.setTimeout(callback,dt$0);
                return 0}}
            throw _eK_}}),
     jsoo_self=caml_js_get_console(0),
     overflow_limit=2147483e3;
    function sleep(d)
     {var match=task(0),w=match[2],t=match[1],d$0=d * 1e3;
      function callback(_eI_){return wakeup(w,_eI_)}
      var id=[0,0];
      function loop(step,param)
       {if(2147483e3 < step)
         var step$0=overflow_limit,remain=step - 2147483e3;
        else
         var step$0=step,remain=0;
        var cb=remain == 0?callback:function(_eH_){return loop(remain,_eH_)};
        id[1] = [0,window$0.setTimeout(caml_js_wrap_callback(cb),step$0)];
        return 0}
      loop(d$0,0);
      on_cancel
       (t,
        function(param)
         {var _eG_=id[1];
          if(_eG_){var x=_eG_[1];id[1] = 0;return window$0.clearTimeout(x)}
          return 0});
      return t}
    function wakeup$0(param)
     {return 1 === param
              ?(window$0.setTimeout(caml_js_wrap_callback(wakeup_paused),0),0)
              :0}
    register_pause_notifier(wakeup$0);
    function prerr_string$0(s){return jsoo_self.log(s.toString())}
    async_exception_hook[1]
    =
    function(exn)
     {prerr_string$0(_cy_);
      prerr_string$0(to_string(exn));
      return print_backtrace(stderr)};
    var Unix_error=[248,_cz_,caml_fresh_oo_id(0)];
    register_exception(_cC_,[0,Unix_error,0,_cB_,_cA_]);
    register_printer
     (function(param)
       {if(param[1] === Unix_error)
         {var s=param[4],s$0=param[3],e=param[2];
          if(typeof e === "number")
           {var _eF_=e;
            if(34 <= _eF_)
             switch(_eF_)
              {case 34:var msg=_da_;break;
               case 35:var msg=_db_;break;
               case 36:var msg=_dc_;break;
               case 37:var msg=_dd_;break;
               case 38:var msg=_de_;break;
               case 39:var msg=_df_;break;
               case 40:var msg=_dg_;break;
               case 41:var msg=_dh_;break;
               case 42:var msg=_di_;break;
               case 43:var msg=_dj_;break;
               case 44:var msg=_dk_;break;
               case 45:var msg=_dl_;break;
               case 46:var msg=_dm_;break;
               case 47:var msg=_dn_;break;
               case 48:var msg=_do_;break;
               case 49:var msg=_dp_;break;
               case 50:var msg=_dq_;break;
               case 51:var msg=_dr_;break;
               case 52:var msg=_ds_;break;
               case 53:var msg=_dt_;break;
               case 54:var msg=_du_;break;
               case 55:var msg=_dv_;break;
               case 56:var msg=_dw_;break;
               case 57:var msg=_dx_;break;
               case 58:var msg=_dy_;break;
               case 59:var msg=_dz_;break;
               case 60:var msg=_dA_;break;
               case 61:var msg=_dB_;break;
               case 62:var msg=_dC_;break;
               case 63:var msg=_dD_;break;
               case 64:var msg=_dE_;break;
               case 65:var msg=_dF_;break;
               case 66:var msg=_dG_;break;
               default:var msg=_dH_}
            else
             switch(_eF_)
              {case 0:var msg=_cD_;break;
               case 1:var msg=_cF_;break;
               case 2:var msg=_cG_;break;
               case 3:var msg=_cH_;break;
               case 4:var msg=_cI_;break;
               case 5:var msg=_cJ_;break;
               case 6:var msg=_cK_;break;
               case 7:var msg=_cL_;break;
               case 8:var msg=_cM_;break;
               case 9:var msg=_cN_;break;
               case 10:var msg=_cO_;break;
               case 11:var msg=_cP_;break;
               case 12:var msg=_cQ_;break;
               case 13:var msg=_cR_;break;
               case 14:var msg=_cS_;break;
               case 15:var msg=_cT_;break;
               case 16:var msg=_cU_;break;
               case 17:var msg=_cV_;break;
               case 18:var msg=_cW_;break;
               case 19:var msg=_cX_;break;
               case 20:var msg=_cY_;break;
               case 21:var msg=_cZ_;break;
               case 22:var msg=_c0_;break;
               case 23:var msg=_c1_;break;
               case 24:var msg=_c2_;break;
               case 25:var msg=_c3_;break;
               case 26:var msg=_c4_;break;
               case 27:var msg=_c5_;break;
               case 28:var msg=_c6_;break;
               case 29:var msg=_c7_;break;
               case 30:var msg=_c8_;break;
               case 31:var msg=_c9_;break;
               case 32:var msg=_c__;break;
               default:var msg=_c$_}}
          else
           var x=e[1],msg=caml_call1(sprintf(_dI_),x);
          return [0,caml_call3(sprintf(_cE_),msg,s$0,s)]}
        return 0});
    unix_inet_addr_of_string(_dJ_);
    unix_inet_addr_of_string(_dK_);
    try
     {unix_inet_addr_of_string(_dX_)}
    catch(_eE_)
     {_eE_ = caml_wrap_exception(_eE_);if(_eE_[1] !== Failure)throw _eE_}
    try
     {unix_inet_addr_of_string(_dW_)}
    catch(_eD_)
     {_eD_ = caml_wrap_exception(_eD_);if(_eD_[1] !== Failure)throw _eD_}
    create$1(0,7);
    var Shutdown=[248,_dL_,caml_fresh_oo_id(0)];
    function error(f)
     {return ksprintf(function(s){return jsoo_self.error(s.toString())},f)}
    var _dM_=caml_js_to_string(window$0.location.host);
    caml_call1(sprintf(_dN_),_dM_);
    function value_exn(x){return x === empty?failwith(_dO_):x}
    function some_if(b,x){return b?[0,x]:0}
    function take(t,n)
     {function loop(n,acc)
       {if(0 === n)return return$0(rev(acc));
        function _eC_(x){return loop(n - 1 | 0,[0,x,acc])}
        return _ce_(next_rec(t,t[3]),_eC_)}
      return loop(n,0)}
    function flip(f,x,y){return caml_call2(f,y,x)}
    function add_event_listener(jsoo_self,jsoo_4ec1b650,f)
     {function f$0(ev)
       {try
         {caml_call1(f,ev)}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn === Shutdown)throw Shutdown;
          var _eB_=to_string(exn);
          caml_call1(error(_dP_),_eB_)}
        return jsoo_a44ae7e3}
      function jsoo_c9a9e1c3(x)
       {if(1 - (x == no_handler?1:0))
         {var res=f$0(x);if(!(res | 0))x.preventDefault();return res}
        var e=event,res$0=f$0(e);
        if(!(res$0 | 0))e.returnValue = res$0;
        return res$0}
      if(jsoo_self.addEventListener === empty)
       {var jsoo_6bc4b4e3="on".concat(jsoo_4ec1b650);
        jsoo_self.attachEvent
         (jsoo_6bc4b4e3,
          function(e)
           {var _ey_=[0,jsoo_c9a9e1c3,e,[0]];
            return function(_ez_,_eA_){return caml_js_call(_ey_,_ez_,_eA_)}})}
      else
       jsoo_self.addEventListener(jsoo_4ec1b650,jsoo_c9a9e1c3,jsoo_a44ae7e3);
      return 0}
    function top_level(f)
     {return add_event_listener
              (window$0,
               load,
               function(param)
                {return async
                         (function(param)
                           {return catch$0(f,function(_ex_){throw _ex_})})})}
    function get_element_by_id(id,f$0)
     {var
       x=document.getElementById(id.toString()),
       _ew_=x == no_handler?no_handler:caml_call1(f$0,x);
      return _ew_ == no_handler?caml_call1(ksprintf(failwith,f),id):_ew_}
    caml_js_eval_string(_dQ_);
    function of_array(a)
     {return caml_js_from_array(map$0(caml_js_from_array,a))}
    var zero=0;
    function create_float(x,y){return [0,x,y,1]}
    function create$3(x,y){return create_float(x,y)}
    function coords(param){var y=param[2],x=param[1];return [0,x,y]}
    var zero$0=create_float(0,0);
    function translate(v)
     {var match=coords(v),y=match[2],x=match[1];
      return of_array([0,[254,1,0,x],[254,0,1,y],[254,0,0,1]])}
    translate(zero$0);
    function apply(t,match)
     {var v2=match[3],v1=match[2],v0=match[1];
      function c(i,j)
       {return value_exn(flip(array_get,j,value_exn(flip(array_get,i,t))))}
      function coord(i)
       {var _eu_=c(i,2) * v2,_ev_=c(i,1) * v1;
        return c(i,0) * v0 + _ev_ + _eu_}
      var z=coord(2),y=coord(1),x=coord(0);
      return [0,x / z,y / z,1]}
    var a=1,b=255,g=255,r=255;
    function create$4(id){return caml_call1(sprintf(_dS_),id)}
    function is_inside(v,target)
     {var match=coords(v),y=match[2],x=match[1],_eq_=0 <= x?1:0;
      if(_eq_)
       {var _er_=x <= target.clientWidth?1:0;
        if(_er_)
         var _es_=0 <= y?1:0,_et_=_es_?y <= target.clientHeight?1:0:_es_;
        else
         var _et_=_er_}
      else
       var _et_=_eq_;
      return _et_}
    function action(target,ev,kind)
     {var
       position=
        create$3
         (ev.clientX - target.offsetLeft | 0,
          ev.clientY - target.offsetTop | 0),
       x=ev.which;
      if(x === empty)
       {var match=ev.button,switcher=match - 1 | 0;
        if(3 < switcher >>> 0)
         var switch$0=0;
        else
         switch(switcher)
          {case 0:var _ep_=1,switch$0=1;break;
           case 1:var _ep_=3,switch$0=1;break;
           case 2:var switch$0=0;break;
           default:var _ep_=2,switch$0=1}
        if(!switch$0)var _ep_=0;
        var match$0=_ep_}
      else
       var match$0=x;
      switch(match$0)
       {case 0:var button=-922086728;break;
        case 1:var button=-944764921;break;
        case 2:var button=-866200747;break;
        default:var button=-379319332}
      var
       id=create$4(1),
       changed_touches=is_inside(position,target)?[0,[0,id,position],0]:0;
      return [0,kind,changed_touches,button]}
    function action$0(jsoo_obj,t$0,kind)
     {var changed_touches$0=t$0.changedTouches,n=changed_touches$0.length;
      function init(i)
       {if(i === n)return 0;
        var _eo_=init(i + 1 | 0);
        return [0,changed_touches$0.item(i),_eo_]}
      var t=init(0);
      function loop(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             xs=param$0[2],
             x=param$0[1],
             touch=value_exn(x),
             position=
              create$3
               (touch.clientX - jsoo_obj.offsetLeft | 0,
                touch.clientY - jsoo_obj.offsetTop | 0),
             id=create$4(touch.identifier),
             match=is_inside(position,jsoo_obj)?[0,[0,id,position]]:0;
            if(match){var x$0=match[1];return [0,x$0,loop(xs)]}
            var param$0=xs;
            continue}
          return 0}}
      var changed_touches=loop(t);
      return [0,kind,changed_touches,338892735]}
    function width(t){return t.canvas.clientWidth}
    function height(t){return t.canvas.clientHeight}
    function clear(t)
     {var jsoo_2c7d0868=width(t);
      return t.clearRect(0,0,jsoo_2c7d0868,height(t))}
    function draw_circle(t,p,radius)
     {t.beginPath();
      t.arc(p[1],p[2],radius,0,2 * jsoo_obj.PI,jsoo_23bc3efc);
      return t.fill()}
    function get_frame(opt,t,ctx)
     {if(opt)var sth=opt[1],delay=sth;else var delay=0;
      function _el_(param)
       {function _en_(param)
         {clear(ctx);
          var match=t.readyState;
          return 4 <= match
                  ?(ctx.drawImage(t,0,0),return$0(0))
                  :get_frame(_dT_,t,ctx)}
        var match=wait(0),s=match[2],t$0=match[1];
        caml_call1
         (requestAnimationFrame,
          caml_js_wrap_callback(function(param){return wakeup(s,0)}));
        return _ce_(t$0,_en_)}
      var _em_=delay?sleep(3):return$0(0);
      return _ce_(_em_,_el_)}
    var n=7;
    function main(param)
     {var video$0=get_element_by_id(id,video);
      js_read_camera(video$0);
      var canvas$0=get_element_by_id(id$0,canvas);
      canvas$0.width = canvas$0.offsetWidth;
      canvas$0.height = canvas$0.offsetHeight;
      var
       ctx=canvas$0.getContext(jsoo_67e0736b),
       target=ctx.canvas,
       match=wait(0),
       wakener=match[2],
       waiter=match[1],
       wakener_cell=[0,wakener],
       source=[0,waiter,0,0],
       stream=from_source([2,source]),
       close=stream[2],
       last=stream[4];
      function write(x)
       {var x$0=[0,x];
        if(1 - is_sleeping(close))throw e;
        enqueue(x$0,last);
        if(source[2])
         {source[2] = 0;
          var
           old_wakener=wakener_cell[1],
           match=wait(0),
           new_wakener=match[2],
           new_waiter=match[1];
          source[1] = new_waiter;
          wakener_cell[1] = new_wakener;
          wakeup_later(old_wakener,0)}
        var _ek_=0 === x$0?1:0;
        return _ek_?wakeup(close,0):_ek_}
      add_event_listener
       (target,
        mousedown,
        function(ev){return write(action(target,ev,-1032980382))});
      add_event_listener
       (target,mouseup,function(ev){return write(action(target,ev,26203))});
      add_event_listener
       (target,
        mousemove,
        function(ev){return write(action(target,ev,-933174511))});
      add_event_listener
       (target,
        touchstart,
        function(ev)
         {preventDefault(ev);return write(action$0(target,ev,-1032980382))});
      add_event_listener
       (target,
        touchend,
        function(ev)
         {preventDefault(ev);return write(action$0(target,ev,26203))});
      add_event_listener
       (target,
        touchmove,
        function(ev)
         {preventDefault(ev);return write(action$0(target,ev,-933174511))});
      function f(param)
       {function _ei_(param)
         {if(param)
           {var x=param[1],_ej_=x[2];
            if(_ej_)var a=_ej_[1],p=a;else var p=failwith(_g_);
            var x$0=some_if(-1032980382 === x[1]?1:0,p[2]);
            return x$0?return$0(x$0):f(0)}
          return return_none}
        return _ce_(get_rec(stream,stream[3]),_ei_)}
      var clicks=from_source([0,[0,f,return_unit]]);
      function _d2_(canvas_markers)
       {iter
         (function(v)
           {ctx.fillStyle = caml_call4(sprintf(_dR_),r,g,b,a).toString();
            return draw_circle(ctx,v,5)},
          canvas_markers);
        function _d3_(param)
         {function _d4_(camera_markers)
           {function s(i){return nth(canvas_markers,i)}
            function d(i){return nth(camera_markers,i)}
            var
             prism=
              map
               (function(param)
                 {var
                   i4=param[4],
                   i3=param[3],
                   i2=param[2],
                   i1=param[1],
                   _ec_=s(i4),
                   _ed_=s(i3),
                   _ee_=s(i2),
                   canvas=[0,s(i1),_ee_,_ed_,_ec_],
                   _ef_=d(i4),
                   _eg_=d(i3),
                   _eh_=d(i2),
                   camera=[0,d(i1),_eh_,_eg_,_ef_],
                   v3=canvas[4],
                   v2=canvas[3],
                   v1=canvas[2],
                   v0=canvas[1],
                   u3=camera[4],
                   u2=camera[3],
                   u1=camera[2],
                   u0=camera[1],
                   m$1=
                    of_array
                     ([0,
                       [254,v0[1],v0[2],1,0,0,0,-v0[1] * u0[1],-v0[2] * u0[1]],
                       [254,v1[1],v1[2],1,0,0,0,-v1[1] * u1[1],-v1[2] * u1[1]],
                       [254,v2[1],v2[2],1,0,0,0,-v2[1] * u2[1],-v2[2] * u2[1]],
                       [254,v3[1],v3[2],1,0,0,0,-v3[1] * u3[1],-v3[2] * u3[1]],
                       [254,0,0,0,v0[1],v0[2],1,-v0[1] * u0[2],-v0[2] * u0[2]],
                       [254,0,0,0,v1[1],v1[2],1,-v1[1] * u1[2],-v1[2] * u1[2]],
                       [254,0,0,0,v2[1],v2[2],1,-v2[1] * u2[2],-v2[2] * u2[2]],
                       [254,0,0,0,v3[1],v3[2],1,-v3[1] * u3[2],-v3[2] * u3[2]]]),
                   x=
                    caml_js_from_array
                     ([254,u0[1],u1[1],u2[1],u3[1],u0[2],u1[2],u2[2],u3[2]]),
                   m=math.lusolve(m$1,x),
                   x$0=caml_js_to_array(math.flatten(m)),
                   z2=caml_check_bound(x$0,7)[8],
                   z1=caml_check_bound(x$0,6)[7],
                   y3=caml_check_bound(x$0,5)[6],
                   y2=caml_check_bound(x$0,4)[5],
                   y1=caml_check_bound(x$0,3)[4],
                   x3=caml_check_bound(x$0,2)[3],
                   x2=caml_check_bound(x$0,1)[2],
                   x1=caml_check_bound(x$0,0)[1],
                   m$0=
                    of_array([0,[254,x1,x2,x3],[254,y1,y2,y3],[254,z1,z2,1]]),
                   camera_to_canvas=math.inv(m$0);
                  return [0,canvas,camera,camera_to_canvas]},
                _dU_);
            clear(ctx);
            function loop(angle)
             {var
               a$0=angle + 0.0174532925199432955,
               r=
                of_array
                 ([0,
                   [254,Math.cos(a$0),Math.sin(a$0),0],
                   [254,-Math.sin(a$0),Math.cos(a$0),0],
                   [254,0,0,1]]),
               _d7_=height(ctx),
               param$0=create_float(width(ctx),_d7_),
               z=param$0[3],
               y=param$0[2],
               x$2=param$0[1],
               m1=translate([0,x$2 * 0.5,y * 0.5,z]),
               m=math.multiply(m1,r);
              clear(ctx);
              var i=-50;
              a:
              for(;;)
               {var j=-50;
                b:
                for(;;)
                 {var
                   v$0=apply(m,create$3(30 * i | 0,30 * j | 0)),
                   param=prism;
                  c:
                  for(;;)
                   {if(param)
                     {var
                       xs=param[2],
                       x$0=param[1],
                       v=apply(x$0[3],v$0),
                       _d6_=x$0[1],
                       u3=_d6_[4],
                       u2=_d6_[3],
                       u1=_d6_[2],
                       u0=_d6_[1],
                       angles=
                        function(param)
                         {if(param)
                           {var _ea_=param[2];
                            if(_ea_)
                             {var
                               vs=_ea_[2],
                               v2=_ea_[1],
                               v1=param[1],
                               _eb_=angles([0,v2,vs]),
                               y2$0=v2[2],
                               x2$0=v2[1],
                               y1$0=v1[2],
                               x1$0=v1[1],
                               y2=v2[2],
                               x2=v2[1],
                               y1=v1[2],
                               x1=v1[1];
                              return [0,
                                      Math.atan2(x1 * y2 - x2 * y1,x1$0 * x2$0 + y1$0 * y2$0),
                                      _eb_]}}
                          return 0},
                       _d5_=[0,u0,[0,u1,[0,u2,[0,u3,[0,u0,0]]]]],
                       l$1=
                        angles
                         (map
                           (function(v)
                              {return function(u)
                                {var x=u[1] - v[1],y=u[2] - v[2];return create_float(x,y)}}
                             (v),
                            _d5_)),
                       accu=0,
                       l=l$1;
                      for(;;)
                       {if(l)
                         {var l$0=l[2],a=l[1],accu$0=accu + a,accu=accu$0,l=l$0;
                          continue}
                        var match=some_if(1 < Math.abs(accu)?1:0,v);
                        if(!match){var param=xs;continue c}
                        var x$1=match[1],_d__=[0,x$1];
                        break}}
                    else
                     var _d__=0;
                    if(_d__){var x=_d__[1];draw_circle(ctx,x,5)}
                    var _d$_=j + 1 | 0;
                    if(50 !== j){var j=_d$_;continue b}
                    var _d9_=i + 1 | 0;
                    if(50 !== i){var i=_d9_;continue a}
                    var _d8_=function(param){return loop(a$0)};
                    return _ce_(sleep(0.04),_d8_)}}}}
            return loop(zero)}
          return _ce_(take(clicks,n),_d4_)}
        return _ce_(get_frame(_dV_,video$0,ctx),_d3_)}
      return _ce_(take(clicks,n),_d2_)}
    top_level(main);
    do_at_exit(0);
    return}
  (function(){return this}()));

//# sourceMappingURL=index.map