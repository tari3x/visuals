// Generated by js_of_ocaml 3.0
(function(joo_global_object)
   {"use strict";
    function Base_am_testing(x){return 0}
    function Base_clear_caml_backtrace_pos(x){return 0}
    if(!Math.imul)
     Math.imul
     =
     function(x,y){y |= 0;return ((x >> 16) * y << 16) + (x & 65535) * y | 0};
    var caml_mul=Math.imul;
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,3432918353 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,461845907);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (3864292196 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {var lo=v[1] | v[2] << 24,hi=v[2] >>> 8 | v[3] << 16;
      h = caml_hash_mix_int(h,hi ^ lo);
      return h}
    var log2_ok=Math.log2 && Math.log2(1.12355820928894744e+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return -Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int64_bits_of_float(x)
     {if(!isFinite(x))
       {if(isNaN(x))return [255,1,0,32752];
        return x > 0?[255,0,0,32752]:[255,0,0,65520]}
      var sign=x == 0 && 1 / x == -Infinity?32768:x >= 0?0:32768;
      if(sign)x = -x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,-1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 15 | sign | exp << 4;
      return [255,r1,r2,r3]}
    function caml_hash_mix_float(h,v0)
     {var
       v=caml_int64_bits_of_float(v0),
       lo=v[1] | v[2] << 24,
       hi=v[2] >>> 8 | v[3] << 16;
      h = caml_hash_mix_int(h,lo);
      h = caml_hash_mix_int(h,hi);
      return h}
    function caml_hash_mix_string_arr(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_hash_mix_string_str(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w
        =
        s.charCodeAt(i)
        |
        s.charCodeAt(i + 1)
        <<
        8
        |
        s.charCodeAt(i + 2)
        <<
        16
        |
        s.charCodeAt(i + 3)
        <<
        24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s.charCodeAt(i + 2) << 16;
        case 2:w |= s.charCodeAt(i + 1) << 8;
        case 1:w |= s.charCodeAt(i);h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function caml_str_repeat(n,s)
     {if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_hash_mix_string(h,v)
     {switch(v.t & 6)
       {default:caml_convert_string_to_bytes(v);case 0:
         h = caml_hash_mix_string_str(h,v.c);break;
        case 2:h = caml_hash_mix_string_arr(h,v.c)
        }
      return h}
    function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h = caml_mul(h,2246822507 | 0);
      h ^= h >>> 13;
      h = caml_mul(h,3266489909 | 0);
      h ^= h >>> 16;
      return h}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return !/[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 128)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 224)
           {v = c - 12416;if(v < 128)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & -64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 240)
               {v = c - 925824;if(v < 2048 || v >= 55295 && v < 57344)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & -64)
                  ==
                  128
                  &&
                  c1
                  <
                  245)
                 {v = c2 - 63447168 + (c << 6);
                  if(v < 65536 || v > 1114111)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 65535)
          t += String.fromCharCode(55232 + (v >> 10),56320 + (v & 1023));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlString(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlString.prototype.toString = function(){return caml_to_js_string(this)};
    var HASH_QUEUE_SIZE=256;
    function caml_hash(count,limit,seed,obj)
     {var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
      if(sz < 0 || sz > HASH_QUEUE_SIZE)sz = HASH_QUEUE_SIZE;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
      while(rd < wr && num > 0)
       {v = queue[rd++];
        if(v instanceof Array && v[0] === (v[0] | 0))
         switch(v[0])
          {case 248:h = caml_hash_mix_int(h,v[2]);num--;break;
           case 250:queue[--rd] = v[1];break;
           case 255:h = caml_hash_mix_int64(h,v);num--;break;
           default:
            var tag=v.length - 1 << 10 | v[0];
            h = caml_hash_mix_int(h,tag);
            for(i = 1,len = v.length;i < len;i++)
             {if(wr >= sz)break;queue[wr++] = v[i]}
            break}
        else
         if(v instanceof MlString)
          {h = caml_hash_mix_string(h,v);num--}
         else
          if(v === (v | 0))
           {h = caml_hash_mix_int(h,v + v + 1);num--}
          else
           if(v === +v){h = caml_hash_mix_float(h,v);num--}}
      h = caml_hash_mix_final(h);
      return h & 1073741823}
    function Base_hash_double(d){return caml_hash(1,1,0,d)}
    function Base_hash_string(s){return caml_hash(1,1,0,s)}
    function Base_int_math_int_popcount(v)
     {v = v - (v >>> 1 & 1431655765);
      v = (v & 858993459) + (v >>> 2 & 858993459);
      return (v + (v >>> 4) & 252645135) * 16843009 >>> 24}
    var
     Base_internalhash_fold_float=caml_hash_mix_float,
     Base_internalhash_fold_int=caml_hash_mix_int,
     Base_internalhash_fold_int64=caml_hash_mix_int64,
     Base_internalhash_fold_string=caml_hash_mix_string;
    function Base_internalhash_get_hash_value(seed)
     {var h=caml_hash_mix_final(seed);return h & 1073741823}
    function caml_array_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_string(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    var caml_blit_bytes=caml_blit_string;
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_new_string(s){return new MlString(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_bytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.22507385850720138e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int_compare(a,b)
     {if(a < b)return -1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?-1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(!(total && a === b))
         if(a instanceof MlString)
          if(b instanceof MlString)
           {if(a !== b){var x=caml_string_compare(a,b);if(x != 0)return x}}
          else
           return 1;
         else
          if(a instanceof Array && a[0] === (a[0] | 0))
           {var ta=a[0];
            if(ta === 254)ta = 0;
            if(ta === 250)
             {a = a[1];continue}
            else
             if(b instanceof Array && b[0] === (b[0] | 0))
              {var tb=b[0];
               if(tb === 254)tb = 0;
               if(tb === 250)
                {b = b[1];continue}
               else
                if(ta != tb)
                 return ta < tb?-1:1;
                else
                 switch(ta)
                  {case 248:
                    var x=caml_int_compare(a[2],b[2]);if(x != 0)return x;break;
                   case 251:caml_invalid_argument("equal: abstract value");
                   case 255:
                    var x=caml_int64_compare(a,b);if(x != 0)return x;break;
                   default:
                    if(a.length != b.length)return a.length < b.length?-1:1;
                    if(a.length > 1)stack.push(a,b,1)}}
             else
              return 1}
          else
           if
            (b instanceof MlString
             ||
             b instanceof Array
             &&
             b[0]
             ===
             (b[0] | 0))
            return -1;
           else
            if(typeof a != "number" && a && a.compare)
             return a.compare(b,total);
            else
             if(typeof a == "function")
              caml_invalid_argument("compare: functional value");
             else
              {if(a < b)return -1;
               if(a > b)return 1;
               if(a != b)
                {if(!total)return NaN;if(a == a)return 1;if(b == b)return -1}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_convert_raw_backtrace(){return [0]}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlString(len?2:9,"",len)}
    function caml_create_string(len)
     {if(len < 0)caml_invalid_argument("String.create");
      return new MlString(len?2:9,"",len)}
    function caml_raise_constant(tag){throw tag}
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function caml_div(x,y)
     {if(y == 0)caml_raise_zero_divide();return x / y | 0}
    var caml_ephe_key_offset=3;
    function caml_weak_create(n)
     {if(n < 0)caml_invalid_argument("Weak.create");
      var x=[251,"caml_ephe_list_head"];
      x.length = caml_ephe_key_offset + n;
      return x}
    var caml_ephe_create=caml_weak_create,caml_ephe_data_offset=2;
    function caml_ephe_get_data(x)
     {return x[caml_ephe_data_offset] === undefined
              ?0
              :[0,x[caml_ephe_data_offset]]}
    function caml_ephe_set_data(x,data)
     {x[caml_ephe_data_offset] = data;return 0}
    function caml_weak_set(x,i,v)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.set");
      x[caml_ephe_key_offset + i] = v;
      return 0}
    function caml_ephe_set_key(x,i,v){return caml_weak_set(x,i,[0,v])}
    function caml_equal(x,y){return +(caml_compare_val(x,y,false) == 0)}
    function caml_fill_string(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    var caml_fill_bytes=caml_fill_string;
    function caml_final_register(){return 0}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_float_of_string(s)
     {var res;
      s = caml_bytes_of_string(s);
      res = +s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = +s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[4] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return -Infinity;
      caml_failwith("float_of_string")}
    function caml_parse_format(fmt)
     {fmt = caml_bytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:-1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_new_string(buffer)}
    function caml_format_float(fmt,x)
     {var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == -Infinity){f.sign = -1;x = -x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(!isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = x.toFixed(prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+s.slice(j + 1);
           if(exp < -4 || x >= 1e+21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_bytes_of_string(fmt) == "%d")return caml_new_string("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = -1;i = -i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_get_exception_raw_backtrace(){return [0]}
    var caml_method_cache=[];
    function caml_get_public_method(obj,tag,cacheid)
     {var meths=obj[1],ofs=caml_method_cache[cacheid];
      if(ofs === null)
       for(var i=caml_method_cache.length;i < cacheid;i++)
        caml_method_cache[i] = 0;
      else
       if(meths[ofs] === tag)return meths[ofs - 1];
      var li=3,hi=meths[1] * 2 + 1,mi;
      while(li < hi)
       {mi = li + hi >> 1 | 1;if(tag < meths[mi + 1])hi = mi - 2;else li = mi}
      caml_method_cache[cacheid] = li + 1;
      return tag == meths[li + 1]?meths[li]:0}
    function caml_greaterequal(x,y)
     {return +(caml_compare_val(x,y,false) >= 0)}
    function caml_greaterthan(x,y){return +(caml_compare_val(x,y,false) > 0)}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 128)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 128;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 2048)
         {t += String.fromCharCode(192 | c >> 6);
          t += String.fromCharCode(128 | c & 63)}
        else
         if(c < 55296 || c >= 57343)
          t
          +=
          String.fromCharCode(224 | c >> 12,128 | c >> 6 & 63,128 | c & 63);
         else
          if
           (c
            >=
            56319
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            56320
            ||
            d
            >
            57343)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 56613888;
            t
            +=
            String.fromCharCode
             (240 | c >> 18,128 | c >> 12 & 63,128 | c >> 6 & 63,128 | c & 63)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(!caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlString(tag,s,s.length)}
    function caml_hexstring_of_float(x,prec,style)
     {if(!isFinite(x))
       {if(isNaN(x))return caml_js_to_string("nan");
        return caml_js_to_string(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == -Infinity?1:x >= 0?0:1;
      if(sign)x = -x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > -1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_js_to_string
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_hypot_float(x,y)
     {var
       x=Math.abs(x),
       y=Math.abs(y),
       a=Math.max(x,y),
       b=Math.min(x,y) / (a?a:1);
      return a * Math.sqrt(1 + b * b)}
    function caml_int64_add(x,y)
     {var
       z1=x[1] + y[1],
       z2=x[2] + y[2] + (z1 >> 24),
       z3=x[3] + y[3] + (z2 >> 24);
      return [255,z1 & 16777215,z2 & 16777215,z3 & 65535]}
    function caml_int64_and(x,y)
     {return [255,x[1] & y[1],x[2] & y[2],x[3] & y[3]]}
    function caml_int64_neg(x)
     {var y1=-x[1],y2=-x[2] + (y1 >> 24),y3=-x[3] + (y2 >> 24);
      return [255,y1 & 16777215,y2 & 16777215,y3 & 65535]}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_int64_sub(x,y)
     {var
       z1=x[1] - y[1],
       z2=x[2] - y[2] + (z1 >> 24),
       z3=x[3] - y[3] + (z2 >> 24);
      return [255,z1 & 16777215,z2 & 16777215,z3 & 65535]}
    function caml_int64_ucompare(x,y)
     {if(x[3] > y[3])return 1;
      if(x[3] < y[3])return -1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return -1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return -1;
      return 0}
    function caml_int64_lsl1(x)
     {x[3] = x[3] << 1 | x[2] >> 23;
      x[2] = (x[2] << 1 | x[1] >> 23) & 16777215;
      x[1] = x[1] << 1 & 16777215}
    function caml_int64_lsr1(x)
     {x[1] = (x[1] >>> 1 | x[2] << 23) & 16777215;
      x[2] = (x[2] >>> 1 | x[3] << 23) & 16777215;
      x[3] = x[3] >>> 1}
    function caml_int64_udivmod(x,y)
     {var
       offset=0,
       modulus=caml_obj_dup(x),
       divisor=caml_obj_dup(y),
       quotient=[255,0,0,0];
      while(caml_int64_ucompare(modulus,divisor) > 0)
       {offset++;caml_int64_lsl1(divisor)}
      while(offset >= 0)
       {offset--;
        caml_int64_lsl1(quotient);
        if(caml_int64_ucompare(modulus,divisor) >= 0)
         {quotient[1]++;modulus = caml_int64_sub(modulus,divisor)}
        caml_int64_lsr1(divisor)}
      return [0,quotient,modulus]}
    function caml_int64_is_zero(x){return (x[3] | x[2] | x[1]) == 0}
    function caml_int64_div(x,y)
     {if(caml_int64_is_zero(y))caml_raise_zero_divide();
      var sign=x[3] ^ y[3];
      if(x[3] & 32768)x = caml_int64_neg(x);
      if(y[3] & 32768)y = caml_int64_neg(y);
      var q=caml_int64_udivmod(x,y)[1];
      if(sign & 32768)q = caml_int64_neg(q);
      return q}
    function caml_int64_float_of_bits(x)
     {var exp=(x[3] & 32767) >> 4;
      if(exp == 2047)
       return (x[1] | x[2] | x[3] & 15) == 0
               ?x[3] & 32768?-Infinity:Infinity
               :NaN;
      var k=Math.pow(2,-24),res=(x[1] * k + x[2]) * k + (x[3] & 15);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,-1026);
      if(x[3] & 32768)res = -res;
      return res}
    function caml_int64_of_int32(x)
     {return [255,x & 16777215,x >> 24 & 16777215,x >> 31 & 65535]}
    function caml_int64_to_int32(x){return x[1] | x[2] << 24}
    function caml_int64_is_negative(x){return x[3] << 16 < 0}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = -1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=caml_int64_udivmod(x,wbase);
        x = p[1];
        buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer}
      while
       (!caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_int64_mod(x,y)
     {if(caml_int64_is_zero(y))caml_raise_zero_divide();
      var sign=x[3];
      if(x[3] & 32768)x = caml_int64_neg(x);
      if(y[3] & 32768)y = caml_int64_neg(y);
      var r=caml_int64_udivmod(x,y)[2];
      if(sign & 32768)r = caml_int64_neg(r);
      return r}
    var caml_int64_offset=Math.pow(2,-24);
    function caml_int64_mul(x,y)
     {var
       z1=x[1] * y[1],
       z2=(z1 * caml_int64_offset | 0) + x[2] * y[1] + x[1] * y[2],
       z3=
        (z2 * caml_int64_offset | 0)
        +
        x[3]
        *
        y[1]
        +
        x[2]
        *
        y[2]
        +
        x[1]
        *
        y[3];
      return [255,z1 & 16777215,z2 & 16777215,z3 & 65535]}
    function caml_int64_of_float(x)
     {if(x < 0)x = Math.ceil(x);
      return [255,
              x & 16777215,
              Math.floor(x * caml_int64_offset) & 16777215,
              Math.floor(x * caml_int64_offset * caml_int64_offset) & 65535]}
    function caml_ml_string_length(s){return s.l}
    function caml_string_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_int64_ult(x,y){return caml_int64_ucompare(x,y) < 0}
    function caml_parse_sign_and_base(s)
     {var
       i=0,
       len=caml_ml_string_length(s),
       base=10,
       sign=len > 0 && caml_string_unsafe_get(s,0) == 45?(i++,-1):1;
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return -1}
    function caml_int64_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       base64=caml_int64_of_int32(base),
       threshold=caml_int64_udivmod([255,16777215,268435455,65535],base64)[1],
       c=caml_string_unsafe_get(s,i),
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=caml_int64_of_int32(d);
      for(;;)
       {i++;
        c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        if(caml_int64_ult(threshold,res))caml_failwith("int_of_string");
        d = caml_int64_of_int32(d);
        res = caml_int64_add(caml_int64_mul(base64,res),d);
        if(caml_int64_ult(res,d))caml_failwith("int_of_string")}
      if(i != caml_ml_string_length(s))caml_failwith("int_of_string");
      if(r[2] == 10 && caml_int64_ult([255,0,0,32768],res))
       caml_failwith("int_of_string");
      if(sign < 0)res = caml_int64_neg(res);
      return res}
    function caml_int64_or(x,y)
     {return [255,x[1] | y[1],x[2] | y[2],x[3] | y[3]]}
    function caml_int64_shift_left(x,s)
     {s = s & 63;
      if(s == 0)return x;
      if(s < 24)
       return [255,
               x[1] << s & 16777215,
               (x[2] << s | x[1] >> 24 - s) & 16777215,
               (x[3] << s | x[2] >> 24 - s) & 65535];
      if(s < 48)
       return [255,
               0,
               x[1] << s - 24 & 16777215,
               (x[2] << s - 24 | x[1] >> 48 - s) & 65535];
      return [255,0,0,x[1] << s - 48 & 65535]}
    function caml_int64_shift_right(x,s)
     {s = s & 63;
      if(s == 0)return x;
      var h=x[3] << 16 >> 16;
      if(s < 24)
       return [255,
               (x[1] >> s | x[2] << 24 - s) & 16777215,
               (x[2] >> s | h << 24 - s) & 16777215,
               x[3] << 16 >> s >>> 16];
      var sign=x[3] << 16 >> 31;
      if(s < 48)
       return [255,
               (x[2] >> s - 24 | x[3] << 48 - s) & 16777215,
               x[3] << 16 >> s - 24 >> 16 & 16777215,
               sign & 65535];
      return [255,
              x[3] << 16 >> s - 32 & 16777215,
              sign & 16777215,
              sign & 65535]}
    function caml_int64_to_float(x)
     {return (x[3] << 16) * Math.pow(2,32) + x[2] * Math.pow(2,24) + x[1]}
    function caml_int64_xor(x,y)
     {return [255,x[1] ^ y[1],x[2] ^ y[2],x[3] ^ y[3]]}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=-1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_from_array(a){return raw_array_sub(a,1,a.length - 1)}
    function caml_js_call(f,o,args)
     {return f.apply(o,caml_js_from_array(args))}
    function caml_js_eval_string(s){return eval(s.toString())}
    function caml_js_get(o,f){return o[f]}
    function caml_js_get_console()
     {var
       c=joo_global_object.console?joo_global_object.console:{},
       m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
      function f(){}
      for(var i=0;i < m.length;i++)if(!c[m[i]])c[m[i]] = f;
      return c}
    function raw_array_cons(a,x)
     {var l=a.length,b=new Array(l + 1);
      b[0] = x;
      for(var i=1;i <= l;i++)b[i] = a[i - 1];
      return b}
    function caml_js_to_array(a){return raw_array_cons(a,0)}
    function caml_js_to_byte_string(s){return caml_new_string(s)}
    function caml_js_wrap_callback(f)
     {return function()
       {return arguments.length > 0
                ?caml_call_gen(f,arguments)
                :caml_call_gen(f,[undefined])}}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {return caml_call_gen(f,raw_array_cons(arguments,this))}}
    var JSON=joo_global_object.JSON;
    if(typeof JSON !== "object")JSON = {};
    (function()
       {"use strict";
        var
         rx_one=/^[\],:{}\s]*$/,
         rx_two=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
         rx_three=
          /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
         rx_four=/(?:^|:|,)(?:\s*\[)+/g,
         rx_escapable=
          /[\\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
         rx_dangerous=
          /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        function f(n){return n < 10?"0" + n:n}
        function this_value(){return this.valueOf()}
        if(typeof Date.prototype.toJSON !== "function")
         {Date.prototype.toJSON
          =
          function()
           {return isFinite(this.valueOf())
                    ?this.getUTCFullYear()
                     +
                     "-"
                     +
                     f(this.getUTCMonth() + 1)
                     +
                     "-"
                     +
                     f(this.getUTCDate())
                     +
                     "T"
                     +
                     f(this.getUTCHours())
                     +
                     ":"
                     +
                     f(this.getUTCMinutes())
                     +
                     ":"
                     +
                     f(this.getUTCSeconds())
                     +
                     "Z"
                    :null};
          Boolean.prototype.toJSON = this_value;
          Number.prototype.toJSON = this_value;
          String.prototype.toJSON = this_value}
        var gap,indent,meta,rep;
        function quote(string)
         {rx_escapable.lastIndex = 0;
          return rx_escapable.test(string)
                  ?'"'
                   +
                   string.replace
                    (rx_escapable,
                     function(a)
                      {var c=meta[a];
                       return typeof c === "string"
                               ?c
                               :"\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)})
                   +
                   '"'
                  :'"' + string + '"'}
        function str(key,holder)
         {var i,k,v,length,mind=gap,partial,value=holder[key];
          if
           (value
            &&
            typeof value
            ===
            "object"
            &&
            typeof value.toJSON
            ===
            "function")
           value = value.toJSON(key);
          if(typeof rep === "function")value = rep.call(holder,key,value);
          switch(typeof value)
           {case "string":return quote(value);
            case "number":return isFinite(value)?String(value):"null";
            case "boolean":
            case "null":return String(value);
            case "object":
             if(!value)return "null";
             gap += indent;
             partial = [];
             if(Object.prototype.toString.apply(value) === "[object Array]")
              {length = value.length;
               for(i = 0;i < length;i += 1)
                partial[i] = str(i,value) || "null";
               v
               =
               partial.length === 0
                ?"[]"
                :gap
                  ?"[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]"
                  :"[" + partial.join(",") + "]";
               gap = mind;
               return v}
             if(rep && typeof rep === "object")
              {length = rep.length;
               for(i = 0;i < length;i += 1)
                if(typeof rep[i] === "string")
                 {k = rep[i];
                  v = str(k,value);
                  if(v)partial.push(quote(k) + (gap?": ":":") + v)}}
             else
              for(k in value)
               if(Object.prototype.hasOwnProperty.call(value,k))
                {v = str(k,value);
                 if(v)partial.push(quote(k) + (gap?": ":":") + v)}
             v
             =
             partial.length === 0
              ?"{}"
              :gap
                ?"{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}"
                :"{" + partial.join(",") + "}";
             gap = mind;
             return v
            }}
        if(typeof JSON.stringify !== "function")
         {meta
          =
          {"\b":"\\b",
           "\t":"\\t",
           "\n":"\\n",
           "\f":"\\f",
           "\r":"\\r",
           '"':'\\"',
           "\\":"\\\\"};
          JSON.stringify
          =
          function(value,replacer,space)
           {var i;
            gap = "";
            indent = "";
            if(typeof space === "number")
             for(i = 0;i < space;i += 1)indent += " ";
            else
             if(typeof space === "string")indent = space;
            rep = replacer;
            if
             (replacer
              &&
              typeof replacer
              !==
              "function"
              &&
              (typeof replacer
               !==
               "object"
               ||
               typeof replacer.length
               !==
               "number"))
             throw new Error("JSON.stringify");
            return str("",{"":value})}}
        if(typeof JSON.parse !== "function")
         JSON.parse
         =
         function(text,reviver)
          {var j;
           function walk(holder,key)
            {var k,v,value=holder[key];
             if(value && typeof value === "object")
              for(k in value)
               if(Object.prototype.hasOwnProperty.call(value,k))
                {v = walk(value,k);
                 if(v !== undefined)value[k] = v;else delete value[k]}
             return reviver.call(holder,key,value)}
           text = String(text);
           rx_dangerous.lastIndex = 0;
           if(rx_dangerous.test(text))
            text
            =
            text.replace
             (rx_dangerous,
              function(a)
               {return "\\u"
                       +
                       ("0000" + a.charCodeAt(0).toString(16)).slice(-4)});
           if
            (rx_one.test
              (text.replace(rx_two,"@").replace(rx_three,"]").replace
                (rx_four,"")))
            {j = eval("(" + text + ")");
             return typeof reviver === "function"?walk({"":j},""):j}
           throw new SyntaxError("JSON.parse")}}
      ());
    function caml_json(){return JSON}
    function caml_lazy_make_forward(v){return [250,v]}
    function caml_lessequal(x,y){return +(caml_compare_val(x,y,false) <= 0)}
    function caml_lessthan(x,y){return +(caml_compare_val(x,y,false) < 0)}
    function caml_make_vect(len,init)
     {var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_string_of_array(a){return new MlString(4,a,a.length)}
    var
     caml_md5_string=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 128 << 8 * (i & 3);
           for(i = (i & ~3) + 8;(i & 63) < 60;i += 4)buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 536870911;
           var w=[1732584193,4023233417,2562383102,271733878];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,3614090360);
             d = ff(d,a,b,c,buffer[i + 1],12,3905402710);
             c = ff(c,d,a,b,buffer[i + 2],17,606105819);
             b = ff(b,c,d,a,buffer[i + 3],22,3250441966);
             a = ff(a,b,c,d,buffer[i + 4],7,4118548399);
             d = ff(d,a,b,c,buffer[i + 5],12,1200080426);
             c = ff(c,d,a,b,buffer[i + 6],17,2821735955);
             b = ff(b,c,d,a,buffer[i + 7],22,4249261313);
             a = ff(a,b,c,d,buffer[i + 8],7,1770035416);
             d = ff(d,a,b,c,buffer[i + 9],12,2336552879);
             c = ff(c,d,a,b,buffer[i + 10],17,4294925233);
             b = ff(b,c,d,a,buffer[i + 11],22,2304563134);
             a = ff(a,b,c,d,buffer[i + 12],7,1804603682);
             d = ff(d,a,b,c,buffer[i + 13],12,4254626195);
             c = ff(c,d,a,b,buffer[i + 14],17,2792965006);
             b = ff(b,c,d,a,buffer[i + 15],22,1236535329);
             a = gg(a,b,c,d,buffer[i + 1],5,4129170786);
             d = gg(d,a,b,c,buffer[i + 6],9,3225465664);
             c = gg(c,d,a,b,buffer[i + 11],14,643717713);
             b = gg(b,c,d,a,buffer[i + 0],20,3921069994);
             a = gg(a,b,c,d,buffer[i + 5],5,3593408605);
             d = gg(d,a,b,c,buffer[i + 10],9,38016083);
             c = gg(c,d,a,b,buffer[i + 15],14,3634488961);
             b = gg(b,c,d,a,buffer[i + 4],20,3889429448);
             a = gg(a,b,c,d,buffer[i + 9],5,568446438);
             d = gg(d,a,b,c,buffer[i + 14],9,3275163606);
             c = gg(c,d,a,b,buffer[i + 3],14,4107603335);
             b = gg(b,c,d,a,buffer[i + 8],20,1163531501);
             a = gg(a,b,c,d,buffer[i + 13],5,2850285829);
             d = gg(d,a,b,c,buffer[i + 2],9,4243563512);
             c = gg(c,d,a,b,buffer[i + 7],14,1735328473);
             b = gg(b,c,d,a,buffer[i + 12],20,2368359562);
             a = hh(a,b,c,d,buffer[i + 5],4,4294588738);
             d = hh(d,a,b,c,buffer[i + 8],11,2272392833);
             c = hh(c,d,a,b,buffer[i + 11],16,1839030562);
             b = hh(b,c,d,a,buffer[i + 14],23,4259657740);
             a = hh(a,b,c,d,buffer[i + 1],4,2763975236);
             d = hh(d,a,b,c,buffer[i + 4],11,1272893353);
             c = hh(c,d,a,b,buffer[i + 7],16,4139469664);
             b = hh(b,c,d,a,buffer[i + 10],23,3200236656);
             a = hh(a,b,c,d,buffer[i + 13],4,681279174);
             d = hh(d,a,b,c,buffer[i + 0],11,3936430074);
             c = hh(c,d,a,b,buffer[i + 3],16,3572445317);
             b = hh(b,c,d,a,buffer[i + 6],23,76029189);
             a = hh(a,b,c,d,buffer[i + 9],4,3654602809);
             d = hh(d,a,b,c,buffer[i + 12],11,3873151461);
             c = hh(c,d,a,b,buffer[i + 15],16,530742520);
             b = hh(b,c,d,a,buffer[i + 2],23,3299628645);
             a = ii(a,b,c,d,buffer[i + 0],6,4096336452);
             d = ii(d,a,b,c,buffer[i + 7],10,1126891415);
             c = ii(c,d,a,b,buffer[i + 14],15,2878612391);
             b = ii(b,c,d,a,buffer[i + 5],21,4237533241);
             a = ii(a,b,c,d,buffer[i + 12],6,1700485571);
             d = ii(d,a,b,c,buffer[i + 3],10,2399980690);
             c = ii(c,d,a,b,buffer[i + 10],15,4293915773);
             b = ii(b,c,d,a,buffer[i + 1],21,2240044497);
             a = ii(a,b,c,d,buffer[i + 8],6,1873313359);
             d = ii(d,a,b,c,buffer[i + 15],10,4264355552);
             c = ii(c,d,a,b,buffer[i + 6],15,2734768916);
             b = ii(b,c,d,a,buffer[i + 13],21,1309151649);
             a = ii(a,b,c,d,buffer[i + 4],6,4149444226);
             d = ii(d,a,b,c,buffer[i + 11],10,3174756917);
             c = ii(c,d,a,b,buffer[i + 2],15,718787259);
             b = ii(b,c,d,a,buffer[i + 9],21,3951481745);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 255;
           return t}
         return function(s,ofs,len)
          {var buf=[];
           switch(s.t & 6)
            {default:caml_convert_string_to_bytes(s);case 0:
              var b=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                b.charCodeAt(j)
                |
                b.charCodeAt(j + 1)
                <<
                8
                |
                b.charCodeAt(j + 2)
                <<
                16
                |
                b.charCodeAt(j + 3)
                <<
                24}
              for(;i < len;i++)
               buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3);
              break;
             case 4:
              var a=s.c;
              for(var i=0;i < len;i += 4)
               {var j=i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
              for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_ml_bytes_length(s){return s.l}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(!chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(!chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_ml_refill_input(chan)
     {var str=chan.refill(),str_len=caml_ml_string_length(str);
      if(str_len == 0)chan.refill = null;
      chan.file.write(chan.file.length(),str,0,str_len);
      return str_len}
    function caml_ml_input(chanid,s,i,l)
     {var chan=caml_ml_channels[chanid],l2=chan.file.length() - chan.offset;
      if(l2 == 0 && chan.refill != null)l2 = caml_ml_refill_input(chan);
      if(l2 < l)l = l2;
      chan.file.read(chan.offset,s,i,l);
      chan.offset += l;
      return l}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd();
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(-1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = name instanceof MlString?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_raise_no_such_file(name)
     {name = name instanceof MlString?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_string_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_string(len | 0);
      caml_blit_string(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_string_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_string(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_string(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_string(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_string_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(!this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun(caml_new_string(this.root),caml_new_string(name));
        if(res != 0)this.content[name] = new MlFakeFile(res[1])}};
    MlFakeDevice.prototype.exists
    =
    function(name){this.lookup(name);return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);if(m && !seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_string(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(content instanceof MlString)
       this.content[name] = new MlFakeFile(content);
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_string_of_array(content));
       else
        if(content.toString)
         {var mlstring=caml_new_string(content.toString());
          this.content[name] = new MlFakeFile(mlstring)}};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    function caml_string_unsafe_set(s,i,c)
     {c &= 255;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_string_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_set(s,i,c)}
    var Buffer=joo_global_object.Buffer;
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len){this.fs.ftruncateSync(this.fd,len | 0)};
    MlNodeFile.prototype.length
    =
    function(){return this.fs.fstatSync(this.fd).size};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(!a instanceof joo_global_object.Uint8Array)
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.writeSync(this.fd,buffer,buf_offset,len,offset);
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(!(a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,buf_offset,len,offset);
      for(var i=0;i < len;i++)
       caml_string_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (joo_global_object.Uint8Array)(1),buffer=new Buffer(a);
      this.fs.readSync(this.fd,buffer,0,1,offset);
      return buffer[0]};
    MlNodeFile.prototype.close = function(){this.fs.closeSync(this.fd)};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name){return this.fs.existsSync(this.nm(name))?1:0};
    MlNodeDevice.prototype.readdir
    =
    function(name){return this.fs.readdirSync(this.nm(name))};
    MlNodeDevice.prototype.is_dir
    =
    function(name){return this.fs.statSync(this.nm(name)).isDirectory()?1:0};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {var b=this.fs.existsSync(this.nm(name))?1:0;
      this.fs.unlinkSync(this.nm(name));
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      var fd=this.fs.openSync(this.nm(name),res);
      return new MlNodeFile(fd)};
    MlNodeDevice.prototype.rename
    =
    function(o,n){this.fs.renameSync(this.nm(o),this.nm(n))};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var jsoo_mount_point=[];
    if(typeof require == "undefined")
     jsoo_mount_point.push({path:"/",device:new MlFakeDevice("/")});
    else
     jsoo_mount_point.push({path:"/",device:new MlNodeDevice("/")});
    jsoo_mount_point.push
     ({path:"/static/",device:new MlFakeDevice("/static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (!res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_new_string(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(!caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_string(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_string(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c],l];
      return l}
    function caml_ml_output(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(!chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var string;
      if(offset == 0 && caml_ml_string_length(buffer) == len)
       string = buffer;
      else
       {string = caml_create_string(len);
        caml_blit_string(buffer,offset,string,0,len)}
      var jsstring=string.toString(),id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output_char(chanid,c)
     {var s=caml_new_string(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_notequal(x,y){return +(caml_compare_val(x,y,false) != 0)}
    function caml_obj_block(tag,size)
     {var o=new Array(size + 1);
      o[0] = tag;
      for(var i=1;i <= size;i++)o[i] = 0;
      return o}
    function caml_obj_set_tag(x,tag){x[0] = tag;return 0}
    function caml_obj_tag(x)
     {return x instanceof Array?x[0]:x instanceof MlString?252:1e3}
    function caml_record_backtrace(){return 0}
    function caml_register_global(n,v,name_opt)
     {caml_global_data[n + 1] = v;if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_bytes_of_string(nm)] = v;return 0}
    function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
    function caml_string_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_lessequal(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c <= s2.c?1:0}
    function caml_string_greaterequal(s1,s2)
     {return caml_string_lessequal(s2,s1)}
    function caml_string_lessthan(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?1:0}
    function caml_string_greaterthan(s1,s2)
     {return caml_string_lessthan(s2,s1)}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_sys_const_max_wosize(){return 2147483647 / 4 | 0}
    function caml_sys_exit(code)
     {var g=joo_global_object;
      if(g.quit)g.quit(code);
      if(g.process && g.process.exit)g.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    function caml_sys_get_config(){return [0,caml_new_string("Unix"),32,0]}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=joo_global_object,n=name.toString();
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_js_to_string(g.process.env[n]);
      caml_raise_not_found()}
    function caml_sys_random_seed()
     {var x=new Date() ^ 4294967295 * Math.random();return [0,x]}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function unix_gettimeofday(){return new Date().getTime() / 1e3}
    function unix_inet_addr_of_string(){return 0}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4?f(a0,a1,a2,a3):caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     zero$0=[255,0,0,0],
     one=[255,1,0,0],
     minus_one=[255,16777215,16777215,65535],
     min_int64=[255,0,0,32768],
     max_int64=[255,16777215,16777215,32767],
     param=
      [0,
       [11,caml_new_string("invalid box description "),[3,0,0]],
       caml_new_string("invalid box description %S")],
     partial=[4,0,0,0,0],
     locfmt=
      [0,
       [11,
        caml_new_string('File "'),
        [2,
         0,
         [11,
          caml_new_string('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", characters "),
            [4,0,0,0,[12,45,[4,0,0,0,[11,caml_new_string(": "),[2,0,0]]]]]]]]]],
       caml_new_string('File "%s", line %d, characters %d-%d: %s')],
     dummy_string=caml_new_string(""),
     state_return_unit=[0,0],
     meths=
      [0,
       caml_new_string("size"),
       caml_new_string("set_reference"),
       caml_new_string("resize"),
       caml_new_string("push"),
       caml_new_string("count"),
       caml_new_string("closed"),
       caml_new_string("close"),
       caml_new_string("blocked")],
     vals=[0,caml_new_string("closed")],
     shared=
      [0,
       caml_new_string("blocked"),
       caml_new_string("close"),
       caml_new_string("push"),
       caml_new_string("count"),
       caml_new_string("size"),
       caml_new_string("set_reference"),
       caml_new_string("resize"),
       caml_new_string("closed")],
     description=caml_new_string("internalhash"),
     param$0=[0,[15,[17,2,0]],caml_new_string("%a@?")],
     module_name=caml_new_string("Base.Exn"),
     loc=caml_new_string("src/sign0.ml.t"),
     module_name$0=caml_new_string("Base.Sign"),
     module_name$1=caml_new_string("Base.Char"),
     module_name$2=caml_new_string("Base.Int"),
     module_name$3=caml_new_string("Base.Int63"),
     module_name$4=caml_new_string("Base.Int64"),
     module_name$5=caml_new_string("Base.Float"),
     module_name$6=caml_new_string("Base.Int32"),
     module_name$7=caml_new_string("Base.Nativeint"),
     module_name$8=caml_new_string("Base.Unit"),
     name=caml_new_string("Client_id"),
     name$0=caml_new_string("Shape_id"),
     name$1=caml_new_string("Ordered_stream_id"),
     partial$0=
      [12,
       32,
       [8,
        0,
        0,
        0,
        [11,
         caml_new_string(" ]; [ "),
         [8,
          0,
          0,
          0,
          [12,32,[8,0,0,0,[12,32,[8,0,0,0,[11,caml_new_string(" ]"),0]]]]]]]]],
     global=caml_new_string("/global"),
     f=
      [0,
       [11,
        caml_new_string("At most "),
        [4,0,0,0,[11,caml_new_string(" users are allowed."),0]]],
       caml_new_string("At most %d users are allowed.")],
     opt=[0,10];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _i_=caml_new_string("input"),
     _h_=caml_new_string("output_substring"),
     _g_=caml_new_string("%.12g"),
     _f_=caml_new_string("."),
     _d_=caml_new_string("true"),
     _e_=caml_new_string("false"),
     _a_=caml_new_string("Pervasives.Exit"),
     _b_=[255,1,0,32752],
     _j_=caml_new_string("hd"),
     _k_=caml_new_string("\\\\"),
     _l_=caml_new_string("\\'"),
     _m_=caml_new_string("\\b"),
     _n_=caml_new_string("\\t"),
     _o_=caml_new_string("\\n"),
     _p_=caml_new_string("\\r"),
     _s_=caml_new_string("String.blit / Bytes.blit_string"),
     _r_=caml_new_string("Bytes.blit"),
     _q_=caml_new_string("String.sub / Bytes.sub"),
     _w_=caml_new_string("String.contains_from / Bytes.contains_from"),
     _v_=caml_new_string("String.index_from / Bytes.index_from"),
     _u_=caml_new_string(""),
     _t_=caml_new_string("String.concat"),
     _x_=caml_new_string("Sys.Break"),
     _z_=caml_new_string("Obj.extension_constructor"),
     _y_=caml_new_string("Obj.extension_constructor"),
     _B_=caml_new_string("Array.blit"),
     _A_=caml_new_string("Array.init"),
     _C_=caml_new_string("%d"),
     _E_=caml_new_string("%d"),
     _D_=[255,0,0,0],
     _F_=caml_new_string("%d"),
     _G_=caml_new_string("Parsing.Parse_error"),
     _L_=caml_new_string("Map.remove_min_elt"),
     _M_=[0,0,0,0],
     _N_=[0,caml_new_string("map.ml"),274,10],
     _O_=[0,0,0],
     _H_=caml_new_string("Map.bal"),
     _I_=caml_new_string("Map.bal"),
     _J_=caml_new_string("Map.bal"),
     _K_=caml_new_string("Map.bal"),
     _Q_=caml_new_string("Stack.Empty"),
     _R_=caml_new_string("Queue.Empty"),
     _S_=caml_new_string("CamlinternalLazy.Undefined"),
     _T_=caml_new_string("Stream.Failure"),
     _U_=caml_new_string("Stream.Error"),
     _X_=caml_new_string("Buffer.add_substring/add_subbytes"),
     _W_=caml_new_string("Buffer.add: cannot grow buffer"),
     _V_=caml_new_string("Buffer.sub"),
     _ae_=caml_new_string("%c"),
     _af_=caml_new_string("%s"),
     _ag_=caml_new_string("%i"),
     _ah_=caml_new_string("%li"),
     _ai_=caml_new_string("%ni"),
     _aj_=caml_new_string("%Li"),
     _ak_=caml_new_string("%f"),
     _al_=caml_new_string("%B"),
     _am_=caml_new_string("%{"),
     _an_=caml_new_string("%}"),
     _ao_=caml_new_string("%("),
     _ap_=caml_new_string("%)"),
     _aq_=caml_new_string("%a"),
     _ar_=caml_new_string("%t"),
     _as_=caml_new_string("%?"),
     _at_=caml_new_string("%r"),
     _au_=caml_new_string("%_r"),
     _av_=[0,caml_new_string("camlinternalFormat.ml"),845,23],
     _aG_=[0,caml_new_string("camlinternalFormat.ml"),809,21],
     _ay_=[0,caml_new_string("camlinternalFormat.ml"),810,21],
     _aH_=[0,caml_new_string("camlinternalFormat.ml"),813,21],
     _az_=[0,caml_new_string("camlinternalFormat.ml"),814,21],
     _aI_=[0,caml_new_string("camlinternalFormat.ml"),817,19],
     _aA_=[0,caml_new_string("camlinternalFormat.ml"),818,19],
     _aJ_=[0,caml_new_string("camlinternalFormat.ml"),821,22],
     _aB_=[0,caml_new_string("camlinternalFormat.ml"),822,22],
     _aK_=[0,caml_new_string("camlinternalFormat.ml"),826,30],
     _aC_=[0,caml_new_string("camlinternalFormat.ml"),827,30],
     _aE_=[0,caml_new_string("camlinternalFormat.ml"),831,26],
     _aw_=[0,caml_new_string("camlinternalFormat.ml"),832,26],
     _aF_=[0,caml_new_string("camlinternalFormat.ml"),841,28],
     _ax_=[0,caml_new_string("camlinternalFormat.ml"),842,28],
     _aD_=[0,caml_new_string("camlinternalFormat.ml"),846,23],
     _bH_=caml_new_string("%u"),
     _bF_=[0,caml_new_string("camlinternalFormat.ml"),1520,4],
     _bG_=caml_new_string("Printf: bad conversion %["),
     _bI_=[0,caml_new_string("camlinternalFormat.ml"),1588,39],
     _bJ_=[0,caml_new_string("camlinternalFormat.ml"),1611,31],
     _bK_=[0,caml_new_string("camlinternalFormat.ml"),1612,31],
     _bL_=caml_new_string("Printf: bad conversion %_"),
     _bM_=caml_new_string("@{"),
     _bN_=caml_new_string("@["),
     _bO_=caml_new_string("@{"),
     _bP_=caml_new_string("@["),
     _bQ_=caml_new_string(""),
     _bR_=[0,0,4],
     _bS_=caml_new_string(""),
     _bT_=caml_new_string("b"),
     _bU_=caml_new_string("h"),
     _bV_=caml_new_string("hov"),
     _bW_=caml_new_string("hv"),
     _bX_=caml_new_string("v"),
     _bD_=caml_new_string("nan"),
     _bE_=caml_new_string("."),
     _bB_=caml_new_string("neg_infinity"),
     _bC_=caml_new_string("infinity"),
     _bA_=caml_new_string("%.12g"),
     _bn_=caml_new_string("%nd"),
     _bo_=caml_new_string("%+nd"),
     _bp_=caml_new_string("% nd"),
     _bq_=caml_new_string("%ni"),
     _br_=caml_new_string("%+ni"),
     _bs_=caml_new_string("% ni"),
     _bt_=caml_new_string("%nx"),
     _bu_=caml_new_string("%#nx"),
     _bv_=caml_new_string("%nX"),
     _bw_=caml_new_string("%#nX"),
     _bx_=caml_new_string("%no"),
     _by_=caml_new_string("%#no"),
     _bz_=caml_new_string("%nu"),
     _ba_=caml_new_string("%ld"),
     _bb_=caml_new_string("%+ld"),
     _bc_=caml_new_string("% ld"),
     _bd_=caml_new_string("%li"),
     _be_=caml_new_string("%+li"),
     _bf_=caml_new_string("% li"),
     _bg_=caml_new_string("%lx"),
     _bh_=caml_new_string("%#lx"),
     _bi_=caml_new_string("%lX"),
     _bj_=caml_new_string("%#lX"),
     _bk_=caml_new_string("%lo"),
     _bl_=caml_new_string("%#lo"),
     _bm_=caml_new_string("%lu"),
     _aZ_=caml_new_string("%Ld"),
     _a0_=caml_new_string("%+Ld"),
     _a1_=caml_new_string("% Ld"),
     _a2_=caml_new_string("%Li"),
     _a3_=caml_new_string("%+Li"),
     _a4_=caml_new_string("% Li"),
     _a5_=caml_new_string("%Lx"),
     _a6_=caml_new_string("%#Lx"),
     _a7_=caml_new_string("%LX"),
     _a8_=caml_new_string("%#LX"),
     _a9_=caml_new_string("%Lo"),
     _a__=caml_new_string("%#Lo"),
     _a$_=caml_new_string("%Lu"),
     _aM_=caml_new_string("%d"),
     _aN_=caml_new_string("%+d"),
     _aO_=caml_new_string("% d"),
     _aP_=caml_new_string("%i"),
     _aQ_=caml_new_string("%+i"),
     _aR_=caml_new_string("% i"),
     _aS_=caml_new_string("%x"),
     _aT_=caml_new_string("%#x"),
     _aU_=caml_new_string("%X"),
     _aV_=caml_new_string("%#X"),
     _aW_=caml_new_string("%o"),
     _aX_=caml_new_string("%#o"),
     _aY_=caml_new_string("%u"),
     _Y_=caml_new_string("@]"),
     _Z_=caml_new_string("@}"),
     ___=caml_new_string("@?"),
     _$_=caml_new_string("@\n"),
     _aa_=caml_new_string("@."),
     _ab_=caml_new_string("@@"),
     _ac_=caml_new_string("@%"),
     _ad_=caml_new_string("@"),
     _aL_=caml_new_string("CamlinternalFormat.Type_mismatch"),
     _bY_=caml_new_string("Arg.Bad"),
     _bZ_=caml_new_string("Arg.Help"),
     _b3_=caml_new_string(""),
     _b4_=
      [0,[11,caml_new_string(", "),[2,0,[2,0,0]]],caml_new_string(", %s%s")],
     _ck_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _cl_=
      [0,
       [11,
        caml_new_string
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_new_string
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _cc_=caml_new_string("Raised at"),
     _cd_=caml_new_string("Re-raised at"),
     _ce_=caml_new_string("Raised by primitive operation at"),
     _cf_=caml_new_string("Called from"),
     _cg_=caml_new_string(" (inlined)"),
     _ci_=caml_new_string(""),
     _ch_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(' file "'),
         [2,
          0,
          [12,
           34,
           [2,
            0,
            [11,
             caml_new_string(", line "),
             [4,
              0,
              0,
              0,
              [11,caml_new_string(", characters "),[4,0,0,0,[12,45,partial]]]]]]]]]],
       caml_new_string('%s file "%s"%s, line %d, characters %d-%d')],
     _cj_=
      [0,
       [2,0,[11,caml_new_string(" unknown location"),0]],
       caml_new_string("%s unknown location")],
     _b9_=caml_new_string("Out of memory"),
     _b__=caml_new_string("Stack overflow"),
     _b$_=caml_new_string("Pattern matching failed"),
     _ca_=caml_new_string("Assertion failed"),
     _cb_=caml_new_string("Undefined recursive module"),
     _b5_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_new_string("(%s%s)")],
     _b6_=caml_new_string(""),
     _b7_=caml_new_string(""),
     _b8_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _b2_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _b0_=[0,[3,0,0],caml_new_string("%S")],
     _b1_=caml_new_string("_"),
     _cn_=caml_new_string("Random.int"),
     _cm_=caml_new_string("x"),
     _co_=
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
     _jm_=caml_new_string("OCAMLRUNPARAM"),
     _jk_=caml_new_string("CAMLRUNPARAM"),
     _cp_=caml_new_string(""),
     _cy_=[3,0,3],
     _cz_=caml_new_string("."),
     _cw_=caml_new_string(">"),
     _cx_=caml_new_string("</"),
     _cu_=caml_new_string(">"),
     _cv_=caml_new_string("<"),
     _ct_=caml_new_string("\n"),
     _cr_=caml_new_string("Format.Empty_queue"),
     _cs_=[0,caml_new_string("")],
     _cA_=caml_new_string("-"),
     _cB_=caml_new_string("Scanf.Scan_failure"),
     _cC_=caml_new_string(""),
     _jj_=caml_new_string("TMPDIR"),
     _ji_=caml_new_string("TEMP"),
     _cD_=caml_new_string("Cygwin"),
     _cE_=caml_new_string("Win32"),
     _cF_=caml_new_string("Js.Error"),
     _cG_=caml_new_string("jsError"),
     _cV_=[0,caml_new_string("src/core/lwt.ml"),1125,8],
     _cU_=[0,caml_new_string("src/core/lwt.ml"),898,13],
     _cS_=[0,caml_new_string("src/core/lwt.ml"),822,35],
     _cT_=[0,caml_new_string("src/core/lwt.ml"),824,8],
     _cQ_=[0,caml_new_string("src/core/lwt.ml"),716,35],
     _cR_=[0,caml_new_string("src/core/lwt.ml"),719,8],
     _cN_=[0,caml_new_string("src/core/lwt.ml"),672,35],
     _cO_=[0,caml_new_string("src/core/lwt.ml"),675,8],
     _cM_=[0,caml_new_string("src/core/lwt.ml"),511,8],
     _cL_=[0,caml_new_string("src/core/lwt.ml"),500,9],
     _cK_=caml_new_string("Lwt.wakeup_later_result"),
     _cJ_=caml_new_string("Lwt.wakeup_result"),
     _cI_=caml_new_string("Fatal error: exception "),
     _cH_=caml_new_string("Lwt.Canceled"),
     _c3_=caml_new_string("Lwt_stream.bounded_push#resize"),
     _cZ_=caml_new_string(""),
     _c0_=caml_new_string(""),
     _c1_=caml_new_string(""),
     _c2_=caml_new_string(""),
     _cX_=caml_new_string("Lwt_stream.Closed"),
     _cY_=caml_new_string("Lwt_stream.Full"),
     _c4_=caml_new_string("Exception during Lwt.async: "),
     _c5_=
      [0,
       [11,
        caml_new_string("Char.of_int_exn got integer out of range: "),
        [4,0,0,0,0]],
       caml_new_string("Char.of_int_exn got integer out of range: %d")],
     _c__=caml_new_string(""),
     _dj_=caml_new_string(""),
     _df_=caml_new_string("("),
     _dg_=caml_new_string("()"),
     _dh_=caml_new_string(")"),
     _di_=caml_new_string("()"),
     _db_=caml_new_string("\\"),
     _dc_=caml_new_string("\\n"),
     _dd_=caml_new_string(' "'),
     _de_=caml_new_string('"'),
     _c$_=caml_new_string("Base__Sexp.Of_sexp_error"),
     _el_=caml_new_string("Assert_failure"),
     _em_=[0,caml_new_string("src/sexp_conv.ml"),344,17],
     _ei_=[0,caml_new_string("Exit")],
     _ej_=[0,caml_new_string("src/sexp_conv.ml"),349,17],
     _ef_=[0,caml_new_string("End_of_file")],
     _eg_=[0,caml_new_string("src/sexp_conv.ml"),354,17],
     _ec_=[0,caml_new_string("Failure")],
     _ed_=[0,caml_new_string("src/sexp_conv.ml"),359,17],
     _d$_=[0,caml_new_string("Not_found")],
     _ea_=[0,caml_new_string("src/sexp_conv.ml"),364,17],
     _d8_=[0,caml_new_string("Invalid_argument")],
     _d9_=[0,caml_new_string("src/sexp_conv.ml"),369,17],
     _d5_=caml_new_string("Match_failure"),
     _d6_=[0,caml_new_string("src/sexp_conv.ml"),374,17],
     _d2_=[0,caml_new_string("Sys_error")],
     _d3_=[0,caml_new_string("src/sexp_conv.ml"),379,17],
     _dZ_=[0,caml_new_string("Arg.Help")],
     _d0_=[0,caml_new_string("src/sexp_conv.ml"),384,17],
     _dW_=[0,caml_new_string("Arg.Bad")],
     _dX_=[0,caml_new_string("src/sexp_conv.ml"),389,17],
     _dT_=[0,caml_new_string("Lazy.Undefined")],
     _dU_=[0,caml_new_string("src/sexp_conv.ml"),394,17],
     _dQ_=[0,caml_new_string("Parsing.Parse_error")],
     _dR_=[0,caml_new_string("src/sexp_conv.ml"),399,17],
     _dN_=[0,caml_new_string("Queue.Empty")],
     _dO_=[0,caml_new_string("src/sexp_conv.ml"),404,17],
     _dK_=[0,caml_new_string("Scanf.Scan_failure")],
     _dL_=[0,caml_new_string("src/sexp_conv.ml"),409,17],
     _dH_=[0,caml_new_string("Stack.Empty")],
     _dI_=[0,caml_new_string("src/sexp_conv.ml"),414,17],
     _dE_=[0,caml_new_string("Stream.Failure")],
     _dF_=[0,caml_new_string("src/sexp_conv.ml"),419,17],
     _dB_=[0,caml_new_string("Stream.Error")],
     _dC_=[0,caml_new_string("src/sexp_conv.ml"),424,17],
     _dy_=[0,caml_new_string("Sys.Break")],
     _dz_=[0,caml_new_string("src/sexp_conv.ml"),429,17],
     _dv_=[0,caml_new_string("Sexplib.Conv.Of_sexp_error")],
     _dw_=[0,caml_new_string("src/sexp_conv.ml"),435,17],
     _dt_=[0,0],
     _dr_=
      [0,
       [2,0,[12,32,[2,0,[12,58,[4,0,0,0,[12,58,[4,0,0,0,0]]]]]]],
       caml_new_string("%s %s:%d:%d")],
     _dp_=
      caml_new_string
       ("char_of_sexp: atom string must contain one character only"),
     _dq_=caml_new_string("char_of_sexp: atom needed"),
     _do_=caml_new_string("string_of_sexp: atom needed"),
     _dn_=caml_new_string("unit_of_sexp: empty list needed"),
     _dm_=[0,2],
     _dl_=[1,0],
     _dk_=[1,0],
     _eq_=caml_new_string("_of_sexp: unexpected sum tag"),
     _ep_=caml_new_string("_of_sexp: the empty list is an invalid sum"),
     _eo_=caml_new_string("_of_sexp: a nested list is an invalid sum"),
     _en_=caml_new_string("_of_sexp: sum tag does not take arguments"),
     _er_=
      caml_new_string
       ("initializing Random with a nondeterministic seed is forbidden in inline tests"),
     _et_=caml_new_string(".pp"),
     _es_=[0,caml_new_string("Sexplib.Sexp.pp_hum"),0],
     _eE_=[0,2],
     _eD_=[0,caml_new_string("src/exn.ml"),49,8],
     _eA_=[0,caml_new_string("src/exn.ml.Reraised")],
     _eB_=[0,caml_new_string("src/exn.ml"),30,13],
     _ex_=[0,caml_new_string("src/exn.ml.Finally")],
     _ey_=[0,caml_new_string("src/exn.ml"),17,13],
     _ew_=caml_new_string("Base__Exn.Finally"),
     _ez_=caml_new_string("Base__Exn.Reraised"),
     _eC_=caml_new_string("Base__Exn.Sexp"),
     _eG_=
      caml_new_string
       ("use of [return] from a [with_return] that already returned"),
     _eF_=caml_new_string("Return"),
     _eH_=
      [0,
       [11,caml_new_string("Negative position: "),[4,0,0,0,0]],
       caml_new_string("Negative position: %d")],
     _eI_=
      [0,
       [11,caml_new_string("Negative length: "),[4,0,0,0,0]],
       caml_new_string("Negative length: %d")],
     _eJ_=
      [0,
       [11,
        caml_new_string("pos + len past end: "),
        [4,
         0,
         0,
         0,
         [11,
          caml_new_string(" + "),
          [4,0,0,0,[11,caml_new_string(" > "),[4,0,0,0,0]]]]]],
       caml_new_string("pos + len past end: %d + %d > %d")],
     _eL_=caml_new_string("List.last"),
     _eS_=
      [0,
       caml_new_string("src/list.ml.Transpose_got_lists_of_different_lengths")],
     _eT_=[0,caml_new_string("src/list.ml"),1026,13],
     _eQ_=[0,caml_new_string("src/list.ml"),721,4],
     _eP_=
      [0,
       [11,caml_new_string("List.init "),[4,0,0,0,0]],
       caml_new_string("List.init %d")],
     _eN_=[0,caml_new_string("src/list.ml.Duplicate_found")],
     _eO_=[0,caml_new_string("src/list.ml"),701,13],
     _eK_=
      [0,
       [11,
        caml_new_string("List.nth_exn "),
        [4,
         0,
         0,
         0,
         [11,caml_new_string(" called on list of length "),[4,0,0,0,0]]]],
       caml_new_string("List.nth_exn %d called on list of length %d")],
     _eM_=caml_new_string("Base__List.Duplicate_found"),
     _eR_=
      caml_new_string("Base__List.Transpose_got_lists_of_different_lengths"),
     _eX_=caml_new_string(":"),
     _eY_=caml_new_string(":"),
     _e9_=[0,caml_new_string("src/info.ml"),205,8],
     _eZ_=[0,caml_new_string("Could_not_construct")],
     _e0_=[0,caml_new_string("String")],
     _e1_=[0,caml_new_string("Exn")],
     _e2_=[0,caml_new_string("Sexp")],
     _e3_=[0,caml_new_string("Tag_sexp")],
     _e4_=[0,caml_new_string("Tag_t")],
     _e5_=[0,caml_new_string("Tag_arg")],
     _e6_=[0,caml_new_string("Of_list")],
     _e7_=[0,caml_new_string("With_backtrace")],
     _e8_=caml_new_string("Base__Info.Exn"),
     _e__=caml_new_string("Base.Info.pp"),
     _e$_=caml_new_string("Base.Error.pp"),
     _fa_=
      caml_new_string
       ("Maybe_bound.compare_to_interval_exn: lower bound > upper bound"),
     _fb_=[0,caml_new_string("src/validate.ml"),166,21],
     _fc_=
      [0,
       [11,
        caml_new_string("value "),
        [2,0,[11,caml_new_string(" < bound "),[2,0,0]]]],
       caml_new_string("value %s < bound %s")],
     _fd_=
      [0,
       [11,
        caml_new_string("value "),
        [2,0,[11,caml_new_string(" <= bound "),[2,0,0]]]],
       caml_new_string("value %s <= bound %s")],
     _fe_=[0,caml_new_string("src/validate.ml"),173,21],
     _ff_=
      [0,
       [11,
        caml_new_string("value "),
        [2,0,[11,caml_new_string(" > bound "),[2,0,0]]]],
       caml_new_string("value %s > bound %s")],
     _fg_=
      [0,
       [11,
        caml_new_string("value "),
        [2,0,[11,caml_new_string(" >= bound "),[2,0,0]]]],
       caml_new_string("value %s >= bound %s")],
     _fh_=caml_new_string("Option.value_exn None"),
     _fi_=[0,caml_new_string("src/array.ml"),711,14],
     _fq_=[0,caml_new_string("src/avltree.ml"),303,15],
     _fr_=[0,caml_new_string("src/avltree.ml"),320,17],
     _fp_=[0,caml_new_string("src/avltree.ml"),185,9],
     _fo_=[0,caml_new_string("src/avltree.ml"),172,9],
     _fl_=[0,caml_new_string("src/avltree.ml"),110,30],
     _fk_=[0,caml_new_string("src/avltree.ml"),96,26],
     _fn_=[0,caml_new_string("src/avltree.ml"),138,30],
     _fm_=[0,caml_new_string("src/avltree.ml"),125,26],
     _fj_=[0,caml_new_string("src/avltree.ml"),76,22],
     _fE_=[0,caml_new_string("Neg")],
     _fF_=[0,caml_new_string("Zero")],
     _fG_=[0,caml_new_string("Pos")],
     _fs_=caml_new_string("Neg"),
     _ft_=caml_new_string("Pos"),
     _fu_=caml_new_string("Zero"),
     _fv_=caml_new_string("neg"),
     _fw_=caml_new_string("pos"),
     _fx_=caml_new_string("zero"),
     _fy_=caml_new_string("Neg"),
     _fz_=caml_new_string("Pos"),
     _fA_=caml_new_string("Zero"),
     _fB_=caml_new_string("neg"),
     _fC_=caml_new_string("pos"),
     _fD_=caml_new_string("zero"),
     _fI_=caml_new_string("max"),
     _fJ_=caml_new_string("min"),
     _fK_=caml_new_string("clamp requires [min <= max]"),
     _fH_=[0,caml_new_string("src/comparable.ml"),154,4],
     _fQ_=[0,caml_new_string("src/float0.ml"),91,6],
     _fP_=[0,caml_new_string("src/float0.ml"),97,6],
     _fN_=[255,16777215,16777215,65535],
     _fO_=[255,1,0,0],
     _fM_=[255,0,0,0],
     _fL_=[0,[255,0,0,0]],
     _fS_=
      [0,
       [11,caml_new_string("Char.of_string: "),[3,0,0]],
       caml_new_string("Char.of_string: %S")],
     _fX_=[0,caml_new_string("src/set.ml.Tree0.Set_max_elt_exn_of_empty_set")],
     _fY_=[0,caml_new_string("src/set.ml"),269,15],
     _fU_=[0,caml_new_string("src/set.ml.Tree0.Set_min_elt_exn_of_empty_set")],
     _fV_=[0,caml_new_string("src/set.ml"),259,15],
     _fT_=caml_new_string("Base__Set.Tree0.Set_min_elt_exn_of_empty_set"),
     _fW_=caml_new_string("Base__Set.Tree0.Set_max_elt_exn_of_empty_set"),
     _f6_=caml_new_string("max"),
     _f7_=caml_new_string("min"),
     _f8_=caml_new_string("clamp requires [min <= max]"),
     _f5_=[0,caml_new_string("src/string.ml"),1215,4],
     _gc_=caml_new_string("int63"),
     _gd_=caml_new_string("int64"),
     _ga_=caml_new_string("int"),
     _gb_=caml_new_string("int64"),
     _f__=caml_new_string("int32"),
     _f$_=caml_new_string("int"),
     _f9_=
      [0,
       [11,
        caml_new_string("conversion from "),
        [2,
         0,
         [11,
          caml_new_string(" to "),
          [2,
           0,
           [11,
            caml_new_string(" failed: "),
            [2,0,[11,caml_new_string(" is out of range"),0]]]]]]],
       caml_new_string("conversion from %s to %s failed: %s is out of range")],
     _jh_=[0,caml_new_string("src/int_conversions.ml"),107,9],
     _jg_=[0,caml_new_string("src/int_conversions.ml"),159,9],
     _jf_=[0,caml_new_string("src/int_conversions.ml"),187,9],
     _ge_=
      [0,
       2147483647,
       2147483647,
       46340,
       1290,
       215,
       73,
       35,
       21,
       14,
       10,
       8,
       7,
       5,
       5,
       4,
       4,
       3,
       3,
       3,
       3,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1],
     _gg_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(" /"),
         [12,
          37,
          [12,
           32,
           [2,
            0,
            [11,
             caml_new_string(" in core_int.ml: divisor should be positive"),
             0]]]]]],
       caml_new_string("%s /%% %s in core_int.ml: divisor should be positive")],
     _gf_=
      [0,
       [2,
        0,
        [12,
         32,
         [12,
          37,
          [12,
           32,
           [2,
            0,
            [11,
             caml_new_string(" in core_int.ml: modulus should be positive"),
             0]]]]]],
       caml_new_string("%s %% %s in core_int.ml: modulus should be positive")],
     _gi_=
      [0,
       [11,caml_new_string("argument must be strictly positive"),0],
       caml_new_string("argument must be strictly positive")],
     _gk_=
      [0,
       [11,
        caml_new_string("Int.of_float: argument ("),
        [8,0,0,0,[11,caml_new_string(") is out of range or NaN"),0]]],
       caml_new_string("Int.of_float: argument (%f) is out of range or NaN")],
     _gj_=
      [0,
       [11,caml_new_string("Int.of_string: "),[3,0,0]],
       caml_new_string("Int.of_string: %S")],
     _gv_=caml_new_string("OCAMLRUNPARAM"),
     _gD_=
      [0,
       [11,
        caml_new_string("Int63.of_float: argument ("),
        [8,0,0,0,[11,caml_new_string(") is out of range or NaN"),0]]],
       caml_new_string("Int63.of_float: argument (%f) is out of range or NaN")],
     _gC_=[255,0,0,0],
     _gA_=[0,1,4003188],
     _gB_=[0,1,3901488],
     _gz_=
      [0,
       [11,caml_new_string("Int63.of_string: invalid input "),[3,0,0]],
       caml_new_string("Int63.of_string: invalid input %S")],
     _gx_=[255,2,0,0],
     _gw_=[255,2,0,0],
     _gy_=[255,1,0,0],
     _gK_=
      [0,
       [11,
        caml_new_string("Int64.of_float: argument ("),
        [8,0,0,0,[11,caml_new_string(") is out of range or NaN"),0]]],
       caml_new_string("Int64.of_float: argument (%f) is out of range or NaN")],
     _gM_=caml_new_string("%.15g"),
     _gN_=caml_new_string("%.17g"),
     _gL_=caml_new_string("."),
     _gO_=caml_new_string("Hashtbl: mutation not allowed during iteration"),
     _gP_=
      [0,
       [11,
        caml_new_string("Int32.of_float: argument ("),
        [8,0,0,0,[11,caml_new_string(") is out of range or NaN"),0]]],
       caml_new_string("Int32.of_float: argument (%f) is out of range or NaN")],
     _g0_=
      [0,
       [11,
        caml_new_string("Nativeint.of_float: argument ("),
        [8,0,0,0,[11,caml_new_string(") is out of range or NaN"),0]]],
       caml_new_string
        ("Nativeint.of_float: argument (%f) is out of range or NaN")],
     _hb_=caml_new_string("()"),
     _g$_=caml_new_string("()"),
     _ha_=caml_new_string("Base.Unit.of_string: () expected"),
     _hg_=caml_new_string("E2BIG"),
     _hi_=caml_new_string("EACCES"),
     _hj_=caml_new_string("EAGAIN"),
     _hk_=caml_new_string("EBADF"),
     _hl_=caml_new_string("EBUSY"),
     _hm_=caml_new_string("ECHILD"),
     _hn_=caml_new_string("EDEADLK"),
     _ho_=caml_new_string("EDOM"),
     _hp_=caml_new_string("EEXIST"),
     _hq_=caml_new_string("EFAULT"),
     _hr_=caml_new_string("EFBIG"),
     _hs_=caml_new_string("EINTR"),
     _ht_=caml_new_string("EINVAL"),
     _hu_=caml_new_string("EIO"),
     _hv_=caml_new_string("EISDIR"),
     _hw_=caml_new_string("EMFILE"),
     _hx_=caml_new_string("EMLINK"),
     _hy_=caml_new_string("ENAMETOOLONG"),
     _hz_=caml_new_string("ENFILE"),
     _hA_=caml_new_string("ENODEV"),
     _hB_=caml_new_string("ENOENT"),
     _hC_=caml_new_string("ENOEXEC"),
     _hD_=caml_new_string("ENOLCK"),
     _hE_=caml_new_string("ENOMEM"),
     _hF_=caml_new_string("ENOSPC"),
     _hG_=caml_new_string("ENOSYS"),
     _hH_=caml_new_string("ENOTDIR"),
     _hI_=caml_new_string("ENOTEMPTY"),
     _hJ_=caml_new_string("ENOTTY"),
     _hK_=caml_new_string("ENXIO"),
     _hL_=caml_new_string("EPERM"),
     _hM_=caml_new_string("EPIPE"),
     _hN_=caml_new_string("ERANGE"),
     _hO_=caml_new_string("EROFS"),
     _hP_=caml_new_string("ESPIPE"),
     _hQ_=caml_new_string("ESRCH"),
     _hR_=caml_new_string("EXDEV"),
     _hS_=caml_new_string("EWOULDBLOCK"),
     _hT_=caml_new_string("EINPROGRESS"),
     _hU_=caml_new_string("EALREADY"),
     _hV_=caml_new_string("ENOTSOCK"),
     _hW_=caml_new_string("EDESTADDRREQ"),
     _hX_=caml_new_string("EMSGSIZE"),
     _hY_=caml_new_string("EPROTOTYPE"),
     _hZ_=caml_new_string("ENOPROTOOPT"),
     _h0_=caml_new_string("EPROTONOSUPPORT"),
     _h1_=caml_new_string("ESOCKTNOSUPPORT"),
     _h2_=caml_new_string("EOPNOTSUPP"),
     _h3_=caml_new_string("EPFNOSUPPORT"),
     _h4_=caml_new_string("EAFNOSUPPORT"),
     _h5_=caml_new_string("EADDRINUSE"),
     _h6_=caml_new_string("EADDRNOTAVAIL"),
     _h7_=caml_new_string("ENETDOWN"),
     _h8_=caml_new_string("ENETUNREACH"),
     _h9_=caml_new_string("ENETRESET"),
     _h__=caml_new_string("ECONNABORTED"),
     _h$_=caml_new_string("ECONNRESET"),
     _ia_=caml_new_string("ENOBUFS"),
     _ib_=caml_new_string("EISCONN"),
     _ic_=caml_new_string("ENOTCONN"),
     _id_=caml_new_string("ESHUTDOWN"),
     _ie_=caml_new_string("ETOOMANYREFS"),
     _if_=caml_new_string("ETIMEDOUT"),
     _ig_=caml_new_string("ECONNREFUSED"),
     _ih_=caml_new_string("EHOSTDOWN"),
     _ii_=caml_new_string("EHOSTUNREACH"),
     _ij_=caml_new_string("ELOOP"),
     _ik_=caml_new_string("EOVERFLOW"),
     _il_=
      [0,
       [11,caml_new_string("EUNKNOWNERR "),[4,0,0,0,0]],
       caml_new_string("EUNKNOWNERR %d")],
     _hh_=
      [0,
       [11,
        caml_new_string("Unix.Unix_error(Unix."),
        [2,
         0,
         [11,
          caml_new_string(", "),
          [3,0,[11,caml_new_string(", "),[3,0,[12,41,0]]]]]]],
       caml_new_string("Unix.Unix_error(Unix.%s, %S, %S)")],
     _hc_=caml_new_string("Unix.Unix_error"),
     _hd_=caml_new_string(""),
     _he_=caml_new_string(""),
     _hf_=caml_new_string("Unix.Unix_error"),
     _im_=caml_new_string("0.0.0.0"),
     _in_=caml_new_string("127.0.0.1"),
     _je_=caml_new_string("::"),
     _jd_=caml_new_string("::1"),
     _iv_=
      [0,
       [11,caml_new_string("can't find element "),[2,0,0]],
       caml_new_string("can't find element %s")],
     _iu_=
      [0,
       [11,caml_new_string("uncaught exn in handler: "),[2,0,0]],
       caml_new_string("uncaught exn in handler: %s")],
     _it_=[0,[2,0,[4,0,0,0,0]],caml_new_string("%s%d")],
     _is_=[0,[2,0,0],caml_new_string("%s")],
     _ir_=caml_new_string("Optdef: undefined"),
     _io_=caml_new_string("Common.Shutdown"),
     _iq_=
      [0,[11,caml_new_string("http://"),[2,0,0]],caml_new_string("http://%s")],
     _iw_=
      [0,
       [11,
        caml_new_string("messages out of order, buffer size: "),
        [4,0,0,0,0]],
       caml_new_string("messages out of order, buffer size: %d")],
     _ix_=
      [0,
       [11,
        caml_new_string("max buffer size "),
        [4,0,0,0,[11,caml_new_string(" exceeded"),0]]],
       caml_new_string("max buffer size %d exceeded")],
     _iy_=caml_new_string("math.config({ matrix: 'array' })"),
     _iD_=
      [0,
       [2,0,[11,caml_new_string(" not suitable for context2d"),0]],
       caml_new_string("%s not suitable for context2d")],
     _iB_=
      [0,
       [11,
        caml_new_string("[ "),
        [8,
         0,
         0,
         0,
         [12,
          32,
          [8,
           0,
           0,
           0,
           [12,
            32,
            [8,
             0,
             0,
             0,
             [11,
              caml_new_string(" ]; [ "),
              [8,0,0,0,[12,32,[8,0,0,0,partial$0]]]]]]]]]],
       caml_new_string("[ %f %f %f ]; [ %f %f %f ]; [ %f %f %f ]")],
     _iH_=
      [0,
       [11,
        caml_new_string("rgba("),
        [4,
         0,
         0,
         0,
         [11,
          caml_new_string(", "),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", "),
            [4,0,0,0,[11,caml_new_string(", "),[8,0,0,0,[12,41,0]]]]]]]]],
       caml_new_string("rgba(%d, %d, %d, %f)")],
     _iK_=[0,[2,0,0],caml_new_string("%s")],
     _iI_=[0,caml_new_string("; ")],
     _iJ_=
      [0,
       [11,
        caml_new_string("{ colors = "),
        [2,
         0,
         [11,
          caml_new_string(" ; length = "),
          [8,
           0,
           0,
           0,
           [11,
            caml_new_string(" ; offset = "),
            [8,0,0,0,[11,caml_new_string(" }"),0]]]]]]],
       caml_new_string("{ colors = %s ; length = %f ; offset = %f }")],
     _iL_=
      [0,
       [11,caml_new_string("pointer"),[4,0,0,0,0]],
       caml_new_string("pointer%d")],
     _iW_=
      [0,
       [12,123,[2,0,[11,caml_new_string(", scale = "),[8,0,0,0,[12,125,0]]]]],
       caml_new_string("{%s, scale = %f}")],
     _iV_=
      [0,
       [11,
        caml_new_string("{ "),
        [2,
         0,
         [11,
          caml_new_string("; "),
          [2,
           0,
           [11,
            caml_new_string("; "),
            [2,
             0,
             [11,caml_new_string("; "),[8,0,0,0,[11,caml_new_string(" }"),0]]]]]]]]],
       caml_new_string("{ %s; %s; %s; %f }")],
     _iU_=caml_new_string("BUG in render_bezier"),
     _iN_=caml_new_string("Rectangle"),
     _iO_=caml_new_string("Circle"),
     _iP_=caml_new_string("Horz"),
     _iQ_=caml_new_string("Vert"),
     _iR_=caml_new_string("Cross"),
     _iS_=caml_new_string("Zigzag"),
     _iT_=caml_new_string("Bezier"),
     _iX_=[0,[12,47,[4,0,0,0,0]],caml_new_string("/%d")],
     _iZ_=
      [0,
       [11,
        caml_new_string("http://"),
        [2,0,[11,caml_new_string(":8000/faye"),0]]],
       caml_new_string("http://%s:8000/faye")],
     _i0_=caml_new_string("Request"),
     _i1_=caml_new_string("Grant"),
     _i2_=caml_new_string("Release"),
     _i3_=caml_new_string("Add"),
     _i4_=[0,[11,caml_new_string("Set "),[2,0,0]],caml_new_string("Set %s")],
     _i5_=caml_new_string("Delete"),
     _i6_=caml_new_string("Request_init"),
     _i7_=caml_new_string("Init"),
     _i8_=
      [0,
       [11,caml_new_string("Max_clients_exceeded "),[4,0,0,0,0]],
       caml_new_string("Max_clients_exceeded %d")],
     _ja_=[0,0],
     _i__=
      [0,
       [11,caml_new_string("shape not found in change"),0],
       caml_new_string("shape not found in change")],
     _jb_=caml_new_string("color-picker-canvas"),
     _jc_=caml_new_string("main_canvas");
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:var rest$8=fmt1[1];return [9,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$6=fmt1[1];
          return [13,pad$6,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$7=fmt1[1];
          return [14,pad$7,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function failwith(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    var Exit=[248,_a_,caml_fresh_oo_id(0)];
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:-x | 0}
    var nan=caml_int64_float_of_bits(_b_),max$0=2147483647;
    function _c_(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return s}
    function int_to_string(n){return caml_new_string("" + n)}
    var
     stdin=caml_ml_open_descriptor_in(0),
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try {caml_ml_flush(a)}catch(_vK_){}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function prerr_string(s){return output_string(stderr,s)}
    var exit_function=[0,flush_all];
    function at_exit(f)
     {var g=exit_function[1];
      exit_function[1]
      =
      function(param){caml_call1(f,0);return caml_call1(g,0)};
      return 0}
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function hd_exn(param)
     {if(param){var a=param[1];return a}return failwith(_j_)}
    function rev_append(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1;
          continue}
        return l2$0}}
    function iter(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=l;
          continue}
        return 0}}
    function lowercase(c){if(65 <= c)if(!(90 < c))return c + 32 | 0;return c}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function sub(s,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(!((caml_ml_bytes_length(s) - len | 0) < ofs))
         {var r=caml_create_bytes(len);
          caml_blit_bytes(s,ofs,r,0,len);
          return r}
      return invalid_arg(_q_)}
    function sub_string(b,ofs,len){return sub(b,ofs,len)}
    function blit(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_bytes_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_r_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_s_)}
    function make$0(n,c){return make(n,c)}
    function sub$0(s,ofs,len){return sub(s,ofs,len)}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index_from_exn(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)if(!(l < i))return index_rec(s,l,i,c);
      return invalid_arg(_v_)}
    function contains_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i)
       if(!(l < i))
        try
         {index_rec(s,l,i,c);var _vI_=1;return _vI_}
        catch(_vJ_)
         {_vJ_ = caml_wrap_exception(_vJ_);
          if(_vJ_ === Not_found)return 0;
          throw _vJ_}
      return invalid_arg(_w_)}
    function contains(s,c){return contains_from(s,0,c)}
    var
     compare=caml_string_compare,
     match=caml_sys_get_config(0),
     os_type=match[1],
     max_length=caml_sys_const_max_wosize(0),
     max_length$0=(4 * max_length | 0) - 1 | 0,
     Break=[248,_x_,caml_fresh_oo_id(0)],
     num_bits_int=32;
    function is_block(a){return 1 - (typeof a === "number")}
    function extension_constructor(x)
     {if(is_block(x))
       if(caml_obj_tag(x) !== 248)
        if(1 <= x.length - 1)var slot=x[1],switch$0=1;else var switch$0=0;
       else
        var switch$0=0;
      else
       var switch$0=0;
      if(!switch$0)var slot=x;
      if(is_block(slot))
       if(caml_obj_tag(slot) === 248)
        var name=slot[1],switch$1=1;
       else
        var switch$1=0;
      else
       var switch$1=0;
      if(!switch$1)var name=invalid_arg(_z_);
      return caml_obj_tag(name) === 252?slot:invalid_arg(_y_)}
    function extension_id(slot){return slot[2]}
    function init(l,f)
     {if(0 === l)return [0];
      if(0 <= l)
       {var res=caml_make_vect(l,caml_call1(f,0)),_vG_=l - 1 | 0,_vF_=1;
        if(!(_vG_ < 1))
         {var i=_vF_;
          for(;;)
           {res[i + 1] = caml_call1(f,i);
            var _vH_=i + 1 | 0;
            if(_vG_ !== i){var i=_vH_;continue}
            break}}
        return res}
      return invalid_arg(_A_)}
    function blit$1(a1,ofs1,a2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(!((a1.length - 1 - len | 0) < ofs1))
         if(0 <= ofs2)
          if(!((a2.length - 1 - len | 0) < ofs2))
           return caml_array_blit(a1,ofs1,a2,ofs2,len);
      return invalid_arg(_B_)}
    function map(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_vD_=l - 1 | 0,_vC_=1;
      if(!(_vD_ < 1))
       {var i=_vC_;
        for(;;)
         {r[i + 1] = caml_call1(f,a[i + 1]);
          var _vE_=i + 1 | 0;
          if(_vD_ !== i){var i=_vE_;continue}
          break}}
      return r}
    function to_list(a)
     {var i$1=a.length - 1 - 1 | 0,i=i$1,res=0;
      for(;;)
       {if(0 <= i)
         {var res$0=[0,a[i + 1],res],i$0=i - 1 | 0,i=i$0,res=res$0;continue}
        return res}}
    caml_fresh_oo_id(0);
    var zero=0;
    function abs$0(n){return caml_greaterequal(n,0)?n:-n | 0}
    function int32_to_string(n){return caml_format_int(_C_,n)}
    function abs$1(n){return caml_greaterequal(n,_D_)?n:caml_int64_neg(n)}
    function int64_to_string(n){return caml_int64_format(_E_,n)}
    var zero$1=0;
    function abs$2(n){return caml_greaterequal(n,0)?n:-n | 0}
    function nativeint_to_string(n){return caml_format_int(_F_,n)}
    caml_fresh_oo_id(0);
    var Parse_error=[248,_G_,caml_fresh_oo_id(0)];
    function _P_(Ord)
     {function height(param){if(param){var h=param[5];return h}return 0}
      function create(l,x,d,r)
       {var hl=height(l),hr=height(r),_vB_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_vB_]}
      function singleton(x,d){return [0,0,x,d,0,1]}
      function bal(l,x,d,r)
       {if(l)var h=l[5],hl=h;else var hl=0;
        if(r)var h$0=r[5],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_vw_=height(lr);
            if(_vw_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
            if(lr)
             {var
               lrr=lr[4],
               lrd=lr[3],
               lrv=lr[2],
               lrl=lr[1],
               _vx_=create(lrr,x,d,r);
              return create(create(ll,lv,ld,lrl),lrv,lrd,_vx_)}
            return invalid_arg(_H_)}
          return invalid_arg(_I_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_vy_=height(rl);
            if(_vy_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
            if(rl)
             {var
               rlr=rl[4],
               rld=rl[3],
               rlv=rl[2],
               rll=rl[1],
               _vz_=create(rlr,rv,rd,rr);
              return create(create(l,x,d,rll),rlv,rld,_vz_)}
            return invalid_arg(_J_)}
          return invalid_arg(_K_)}
        var _vA_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_vA_]}
      var empty=0;
      function is_empty(param){return param?0:1}
      function add(x,data,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return d === data?m:[0,l,x,data,r,h];
          if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=add(x,data,l);
          return l === ll?m:bal(ll,v,d,r)}
        return [0,0,x,data,0,1]}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return d;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v),
             _vv_=0 === c?1:0;
            if(_vv_)return _vv_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function min_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _vu_=param$0[1];
            if(_vu_){var param$0=_vu_;continue}
            var d=param$0[3],x=param$0[2];
            return [0,x,d]}
          throw Not_found}}
      function max_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _vr_=param$0[4],_vs_=param$0[3],_vt_=param$0[2];
            if(_vr_){var param$0=_vr_;continue}
            return [0,_vt_,_vs_]}
          throw Not_found}}
      function remove_min_binding(param)
       {if(param)
         {var _vq_=param[1];
          if(_vq_)
           {var r=param[4],d=param[3],x=param[2];
            return bal(remove_min_binding(_vq_),x,d,r)}
          var r$0=param[4];
          return r$0}
        return invalid_arg(_L_)}
      function remove(x$0,t)
       {if(t)
         {var r=t[4],d$0=t[3],v=t[2],l=t[1],c=caml_call2(Ord[1],x$0,v);
          if(0 === c)
           {if(l)
             {if(r)
               {var match=min_binding(r),d=match[2],x=match[1];
                return bal(l,x,d,remove_min_binding(r))}
              return l}
            return r}
          if(0 <= c){var rr=remove(x$0,r);return r === rr?t:bal(l,v,d$0,rr)}
          var ll=remove(x$0,l);
          return l === ll?t:bal(ll,v,d$0,r)}
        return 0}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call2(f,v,d);
            var param$0=r;
            continue}
          return 0}}
      function map(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=map(f,l),
           d$0=caml_call1(f,d),
           r$0=map(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function mapi(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=mapi(f,l),
           d$0=caml_call2(f,v,d),
           r$0=mapi(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function fold(f,m,accu)
       {var m$0=m,accu$0=accu;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
             m$0=r,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _vn_=caml_call2(p,v,d);
            if(_vn_)
             {var _vo_=for_all(p,l);
              if(_vo_){var param$0=r;continue}
              var _vp_=_vo_}
            else
             var _vp_=_vn_;
            return _vp_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _vk_=caml_call2(p,v,d);
            if(_vk_)
             var _vl_=_vk_;
            else
             {var _vm_=exists(p,l);
              if(!_vm_){var param$0=r;continue}
              var _vl_=_vm_}
            return _vl_}
          return 0}}
      function add_min_binding(k,v,param)
       {if(param)
         {var r=param[4],d=param[3],x=param[2],l=param[1];
          return bal(add_min_binding(k,v,l),x,d,r)}
        return singleton(k,v)}
      function add_max_binding(k,v,param)
       {if(param)
         {var r=param[4],d=param[3],x=param[2],l=param[1];
          return bal(l,x,d,add_max_binding(k,v,r))}
        return singleton(k,v)}
      function join(l,v,d,r)
       {if(l)
         {if(r)
           {var
             rh=r[5],
             rr=r[4],
             rd=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[5],
             lr=l[4],
             ld=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,ld,join(lr,v,d,r))
                    :(lh + 2 | 0) < rh
                      ?bal(join(l,v,d,rl),rv,rd,rr)
                      :create(l,v,d,r)}
          return add_max_binding(v,d,l)}
        return add_min_binding(v,d,r)}
      function concat(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return join(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function concat_or_join(t1,v,d,t2)
       {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
      function split(x,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,l,[0,d],r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,d,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,d,r)]}
        return _M_}
      function merge(f,s1,s2)
       {if(s1)
         {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
          if(height(s2) <= h1)
           {var
             match=split(v1,s2),
             r2=match[3],
             d2=match[2],
             l2=match[1],
             _vg_=merge(f,r1,r2),
             _vh_=caml_call3(f,v1,[0,d1],d2);
            return concat_or_join(merge(f,l1,l2),v1,_vh_,_vg_)}}
        else
         if(!s2)return 0;
        if(s2)
         {var
           r2$0=s2[4],
           d2$0=s2[3],
           v2=s2[2],
           l2$0=s2[1],
           match$0=split(v2,s1),
           r1$0=match$0[3],
           d1$0=match$0[2],
           l1$0=match$0[1],
           _vi_=merge(f,r1$0,r2$0),
           _vj_=caml_call3(f,v2,d1$0,[0,d2$0]);
          return concat_or_join(merge(f,l1$0,l2$0),v2,_vj_,_vi_)}
        throw [0,Assert_failure,_N_]}
      function union(f,s1,s2)
       {if(s1)
         {if(s2)
           {var
             h2=s2[5],
             r2=s2[4],
             d2=s2[3],
             v2=s2[2],
             l2=s2[1],
             h1=s1[5],
             r1=s1[4],
             d1=s1[3],
             v1=s1[2],
             l1=s1[1];
            if(h2 <= h1)
             {var
               match=split(v1,s2),
               r2$0=match[3],
               d2$0=match[2],
               l2$0=match[1],
               l=union(f,l1,l2$0),
               r=union(f,r1,r2$0);
              if(d2$0)
               {var d2$1=d2$0[1];
                return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
              return join(l,v1,d1,r)}
            var
             match$0=split(v2,s1),
             r1$0=match$0[3],
             d1$0=match$0[2],
             l1$0=match$0[1],
             l$0=union(f,l1$0,l2),
             r$0=union(f,r1$0,r2);
            if(d1$0)
             {var d1$1=d1$0[1];
              return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
            return join(l$0,v2,d2,r$0)}
          var s=s1}
        else
         var s=s2;
        return s}
      function filter(p,t)
       {if(t)
         {var
           r=t[4],
           d=t[3],
           v=t[2],
           l=t[1],
           l$0=filter(p,l),
           pvd=caml_call2(p,v,d),
           r$0=filter(p,r);
          if(pvd){if(l === l$0)if(r === r$0)return t;return join(l$0,v,d,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pvd=caml_call2(p,v,d),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pvd){var _ve_=concat(lf,rf);return [0,join(lt,v,d,rt),_ve_]}
          var _vf_=join(lf,v,d,rf);
          return [0,concat(lt,rt),_vf_]}
        return _O_}
      function cons_enum(m,e)
       {var m$0=m,e$0=e;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             m$1=m$0[1],
             e$1=[0,v,d,r,e$0],
             m$0=m$1,
             e$0=e$1;
            continue}
          return e$0}}
      function compare(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var c$0=caml_call2(cmp,d1,d2);
                if(0 === c$0)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                return c$0}
              return c}
            return 1}
          return e2?-1:0}}
      function equal(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               _vb_=0 === caml_call2(Ord[1],v1,v2)?1:0;
              if(_vb_)
               {var _vc_=caml_call2(cmp,d1,d2);
                if(_vc_)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                var _vd_=_vc_}
              else
               var _vd_=_vb_;
              return _vd_}
            return 0}
          return e2?0:1}}
      function cardinal(param)
       {if(param)
         {var r=param[4],l=param[1],_va_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _va_ | 0}
        return 0}
      function bindings_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=l;
            continue}
          return accu$0}}
      function bindings(s){return bindings_aux(0,s)}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              singleton,
              remove,
              merge,
              union,
              compare,
              equal,
              iter,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              bindings,
              min_binding,
              max_binding,
              min_binding,
              split,
              find,
              map,
              mapi]}
    var
     Empty=[248,_Q_,caml_fresh_oo_id(0)],
     Empty$0=[248,_R_,caml_fresh_oo_id(0)];
    function create(param){return [0,0,0,0]}
    var Undefined=[248,_S_,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        blk[1] = result;
        caml_obj_set_tag(blk,250);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    function from_val(v)
     {var t=caml_obj_tag(v);
      if(t !== 250)if(t !== 246)if(t !== 253)return v;
      return caml_lazy_make_forward(v)}
    var
     Failure$0=[248,_T_,caml_fresh_oo_id(0)],
     Error$0=[248,_U_,caml_fresh_oo_id(0)];
    function create$0(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_length$0 < n$0?max_length$0:n$0,
       s=caml_create_bytes(n$1);
      return [0,s,0,n$1,s]}
    function contents(b){return sub_string(b[1],0,b[2])}
    function resize(b,more)
     {var len=b[3],new_len=[0,len];
      for(;;)
       {if(new_len[1] < (b[2] + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_length$0 < new_len[1])
         if((b[2] + more | 0) <= max_length$0)
          new_len[1] = max_length$0;
         else
          failwith(_W_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        return 0}}
    function add_char(b,c)
     {var pos=b[2];
      if(b[3] <= pos)resize(b,1);
      caml_string_unsafe_set(b[1],pos,c);
      b[2] = pos + 1 | 0;
      return 0}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      blit$0(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    var default_float_precision=-6;
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _u__=len < min_len?1:0;
      if(_u__)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _u$_=0}
      else
       var _u$_=_u__;
      return _u$_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _Y_;
         case 1:return _Z_;
         case 2:return ___;
         case 3:return _$_;
         case 4:return _aa_;
         case 5:return _ab_;
         default:return _ac_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return _c_(_ad_,make$0(1,c))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,_ae_);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,_af_);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,_ag_);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,_ah_);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,_ai_);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,_aj_);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,_ak_);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,_al_);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_am_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_an_);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_ao_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_ap_);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,_aq_);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,_ar_);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,_as_);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,_at_);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,_au_);
           var fmtty$0=rest$13;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _uM_=function(param){return 0},
         _uN_=function(param){return 0},
         _uO_=function(param){return 0};
        return [0,function(param){return 0},_uO_,_uN_,_uM_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _uP_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_uP_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _uQ_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _uQ_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _uR_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _uR_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _uS_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _uS_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _uT_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _uT_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _uU_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _uU_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _uV_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _uV_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _uW_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _uW_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _uX_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _uX_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _uY_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _uZ_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _u0_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _u0_,
                  _uZ_,
                  _uY_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _u1_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _u1_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _u2_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _u2_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _u3_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _u3_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _u4_=function(param){caml_call1(de$12,0);return 0},
           _u5_=function(param){caml_call1(ed$12,0);return 0},
           _u6_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _u6_,
                  _u5_,
                  _u4_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _u7_=function(param){caml_call1(de$13,0);return 0},
           _u8_=function(param){caml_call1(ed$13,0);return 0},
           _u9_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _u9_,
                  _u8_,
                  _u7_]}}
    function trans(ty1,match)
     {if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:throw [0,Assert_failure,_av_]}
      else
       switch(ty1[0])
        {case 0:
          var _ut_=ty1[1];
          if(typeof match === "number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_ut_,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _uu_=ty1[1];
          if(typeof match === "number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_uu_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _uv_=ty1[1];
          if(typeof match === "number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_uv_,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _uw_=ty1[1];
          if(typeof match === "number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_uw_,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _ux_=ty1[1];
          if(typeof match === "number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_ux_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _uy_=ty1[1];
          if(typeof match === "number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_uy_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _uz_=ty1[1];
          if(typeof match === "number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_uz_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _uA_=ty1[1];
          if(typeof match === "number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_uA_,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _uB_=ty1[2],_uC_=ty1[1];
          if(typeof match === "number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_uD_=trans(_uB_,rest2$7);
              return [8,trans(_uC_,ty2),_uD_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,_aE_];
          break;
         case 9:
          var _uE_=ty1[3],_uF_=ty1[2],_uG_=ty1[1];
          if(typeof match === "number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_uF_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_uG_,ty22,trans(_uE_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_aF_];
          break;
         case 10:
          var _uH_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_uH_,rest2$9)]}
          throw [0,Assert_failure,_aG_];
         case 11:
          var _uI_=ty1[1];
          if(typeof match === "number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:var rest2$10=match[1];return [11,trans(_uI_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_aH_];
          break;
         case 12:
          var _uJ_=ty1[1];
          if(typeof match === "number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:var rest2$11=match[1];return [12,trans(_uJ_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_aI_];
          break;
         case 13:
          var _uK_=ty1[1];
          if(typeof match === "number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:var rest2$12=match[1];return [13,trans(_uK_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_aJ_];
          break;
         default:
          var _uL_=ty1[1];
          if(typeof match === "number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:var rest2$13=match[1];return [14,trans(_uL_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_aK_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_ay_];
        case 1:throw [0,Assert_failure,_az_];
        case 2:throw [0,Assert_failure,_aA_];
        case 3:throw [0,Assert_failure,_aB_];
        case 4:throw [0,Assert_failure,_aC_];
        case 5:throw [0,Assert_failure,_aw_];
        case 6:throw [0,Assert_failure,_ax_];
        default:throw [0,Assert_failure,_aD_]}}
    var Type_mismatch=[248,_aL_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _us_=match[2];
        if(typeof _us_ !== "number" && 2 === _us_[0])
         {var rest$0=_us_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw Type_mismatch}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _t2_=type_padding(pad,fmtty),
           _t3_=_t2_[2],
           _t4_=_t2_[1];
          if(typeof _t3_ !== "number" && 1 === _t3_[0])
           {var
             fmtty_rest$1=_t3_[1],
             match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_t4_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _t5_=type_padding(pad$0,fmtty),
           _t6_=_t5_[2],
           _t7_=_t5_[1];
          if(typeof _t6_ !== "number" && 1 === _t6_[0])
           {var
             fmtty_rest$2=_t6_[1],
             match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_t7_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _t8_=type_padprec(pad$1,prec,fmtty),
           _t9_=_t8_[3],
           _t__=_t8_[2],
           _t$_=_t8_[1];
          if(typeof _t9_ !== "number" && 2 === _t9_[0])
           {var
             fmtty_rest$3=_t9_[1],
             match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_t$_,_t__,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _ua_=type_padprec(pad$2,prec$0,fmtty),
           _ub_=_ua_[3],
           _uc_=_ua_[2],
           _ud_=_ua_[1];
          if(typeof _ub_ !== "number" && 3 === _ub_[0])
           {var
             fmtty_rest$4=_ub_[1],
             match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_ud_,_uc_,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _ue_=type_padprec(pad$3,prec$1,fmtty),
           _uf_=_ue_[3],
           _ug_=_ue_[2],
           _uh_=_ue_[1];
          if(typeof _uf_ !== "number" && 4 === _uf_[0])
           {var
             fmtty_rest$5=_uf_[1],
             match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_uh_,_ug_,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _ui_=type_padprec(pad$4,prec$2,fmtty),
           _uj_=_ui_[3],
           _uk_=_ui_[2],
           _ul_=_ui_[1];
          if(typeof _uj_ !== "number" && 5 === _uj_[0])
           {var
             fmtty_rest$6=_uj_[1],
             match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_ul_,_uk_,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _um_=type_padprec(pad$5,prec$3,fmtty),
           _un_=_um_[3],
           _uo_=_um_[2],
           _up_=_um_[1];
          if(typeof _un_ !== "number" && 6 === _un_[0])
           {var
             fmtty_rest$7=_un_[1],
             match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_up_,_uo_,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          if(typeof fmtty !== "number" && 7 === fmtty[0])
           {var
             fmtty_rest$8=fmtty[1],
             fmt_rest$8=fmt[1],
             match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,fmt$9],fmtty$9]}
          break;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _uq_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_uq_))
             throw Type_mismatch;
            var
             match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=type_format_gen(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,3,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([7,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 8:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _ur_=type_ignored_format_substitution(sub_fmtty$3,rest,fmtty),
               match$27=_ur_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_ur_[1];
              return [0,[23,[8,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 9:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substitution(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substitution(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substitution
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substitution
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substitution
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substitution
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substitution
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substitution
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substitution
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substitution
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _t0_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_t0_))
             throw Type_mismatch;
            var _t1_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_t1_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substitution
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substitution
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substitution
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substitution
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substitution
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _tZ_=2 === padty$0?48:32,res=make(width$0,_tZ_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         if(0 < len)
          {if(43 === caml_string_get(str,0))
            var switch$1=1;
           else
            if(45 === caml_string_get(str,0))
             var switch$1=1;
            else
             if(32 === caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0);
             var switch$0=1}}
         else
          var switch$0=0;
         if(!switch$0)
          {if(1 < len)
            if(48 === caml_string_get(str,0))
             {if(120 === caml_string_get(str,1))
               var switch$3=1;
              else
               if(88 === caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               {caml_bytes_set(res,1,caml_string_get(str,1));
                blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(!switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return res}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0);
      if(58 <= c)
       var switch$0=71 <= c?5 < (c - 97 | 0) >>> 0?1:0:65 <= c?0:1;
      else
       {if(32 === c)
         var switch$1=1;
        else
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0))
               if(1 < len)
                {var
                  switch$2=
                   120 === caml_string_get(str,1)
                    ?0
                    :88 === caml_string_get(str,1)?0:1;
                 if(!switch$2)
                  {var res$1=make(prec$0 + 2 | 0,48);
                   caml_bytes_set(res$1,1,caml_string_get(str,1));
                   blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   return res$1}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         {if(len < (prec$0 + 1 | 0))
           {var res$0=make(prec$0 + 1 | 0,48);
            caml_bytes_set(res$0,0,c);
            blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
            return res$0}
          var switch$0=1}}
      if(!switch$0)
       if(len < prec$0)
        {var res=make(prec$0,48);
         blit$0(str,0,res,prec$0 - len | 0,len);
         return res}
      return str}
    function string_to_caml_string(s$0)
     {var i$1=0;
      for(;;)
       {if(caml_ml_string_length(s$0) <= i$1)
         var _tY_=0;
        else
         {var match$0=caml_string_unsafe_get(s$0,i$1);
          if(32 <= match$0)
           {var _tX_=match$0 - 34 | 0;
            if(58 < _tX_ >>> 0)
             if(93 <= _tX_)var switch$0=0,switch$1=0;else var switch$1=1;
            else
             if(56 < (_tX_ - 1 | 0) >>> 0)
              var switch$0=1,switch$1=0;
             else
              var switch$1=1;
            if(switch$1){var i$2=i$1 + 1 | 0,i$1=i$2;continue}}
          else
           var switch$0=11 <= match$0?13 === match$0?1:0:8 <= match$0?1:0;
          var _tY_=switch$0?1:1}
        if(_tY_)
         {var n=[0,0],_tQ_=caml_ml_bytes_length(s$0) - 1 | 0,_tP_=0;
          if(!(_tQ_ < 0))
           {var i$0=_tP_;
            for(;;)
             {var match=caml_string_unsafe_get(s$0,i$0);
              if(32 <= match)
               {var _tU_=match - 34 | 0;
                if(58 < _tU_ >>> 0)
                 if(93 <= _tU_)var switch$2=0,switch$3=0;else var switch$3=1;
                else
                 if(56 < (_tU_ - 1 | 0) >>> 0)
                  var switch$2=1,switch$3=0;
                 else
                  var switch$3=1;
                if(switch$3)var _tV_=1,switch$2=2}
              else
               var switch$2=11 <= match?13 === match?1:0:8 <= match?1:0;
              switch(switch$2)
               {case 0:var _tV_=4;break;case 1:var _tV_=2;break}
              n[1] = n[1] + _tV_ | 0;
              var _tW_=i$0 + 1 | 0;
              if(_tQ_ !== i$0){var i$0=_tW_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(s$0))
           var str=copy(s$0);
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _tS_=caml_ml_bytes_length(s$0) - 1 | 0,_tR_=0;
            if(!(_tS_ < 0))
             {var i=_tR_;
              for(;;)
               {var c=caml_string_unsafe_get(s$0,i);
                if(35 <= c)
                 var switch$4=92 === c?1:127 <= c?0:2;
                else
                 if(32 <= c)
                  var switch$4=34 <= c?1:2;
                 else
                  if(14 <= c)
                   var switch$4=0;
                  else
                   switch(c)
                    {case 8:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],98);
                      var switch$4=3;
                      break;
                     case 9:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],116);
                      var switch$4=3;
                      break;
                     case 10:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],110);
                      var switch$4=3;
                      break;
                     case 13:
                      caml_string_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_string_unsafe_set(s,n[1],114);
                      var switch$4=3;
                      break;
                     default:var switch$4=0}
                switch(switch$4)
                 {case 0:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 1:
                   caml_string_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_string_unsafe_set(s,n[1],c);
                   break;
                  case 2:caml_string_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _tT_=i + 1 | 0;
                if(_tS_ !== i){var i=_tT_;continue}
                break}}
            var str=s}}
        else
         var str=s$0;
        var l=caml_ml_string_length(str),res=make(l + 2 | 0,34);
        caml_blit_string(str,0,res,1,l);
        return res}}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 0:var _tO_=_aM_;break;
        case 1:var _tO_=_aN_;break;
        case 2:var _tO_=_aO_;break;
        case 3:var _tO_=_aP_;break;
        case 4:var _tO_=_aQ_;break;
        case 5:var _tO_=_aR_;break;
        case 6:var _tO_=_aS_;break;
        case 7:var _tO_=_aT_;break;
        case 8:var _tO_=_aU_;break;
        case 9:var _tO_=_aV_;break;
        case 10:var _tO_=_aW_;break;
        case 11:var _tO_=_aX_;break;
        default:var _tO_=_aY_}
      return caml_format_int(_tO_,n)}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 0:var _tN_=_ba_;break;
        case 1:var _tN_=_bb_;break;
        case 2:var _tN_=_bc_;break;
        case 3:var _tN_=_bd_;break;
        case 4:var _tN_=_be_;break;
        case 5:var _tN_=_bf_;break;
        case 6:var _tN_=_bg_;break;
        case 7:var _tN_=_bh_;break;
        case 8:var _tN_=_bi_;break;
        case 9:var _tN_=_bj_;break;
        case 10:var _tN_=_bk_;break;
        case 11:var _tN_=_bl_;break;
        default:var _tN_=_bm_}
      return caml_format_int(_tN_,n)}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 0:var _tM_=_bn_;break;
        case 1:var _tM_=_bo_;break;
        case 2:var _tM_=_bp_;break;
        case 3:var _tM_=_bq_;break;
        case 4:var _tM_=_br_;break;
        case 5:var _tM_=_bs_;break;
        case 6:var _tM_=_bt_;break;
        case 7:var _tM_=_bu_;break;
        case 8:var _tM_=_bv_;break;
        case 9:var _tM_=_bw_;break;
        case 10:var _tM_=_bx_;break;
        case 11:var _tM_=_by_;break;
        default:var _tM_=_bz_}
      return caml_format_int(_tM_,n)}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 0:var _tL_=_aZ_;break;
        case 1:var _tL_=_a0_;break;
        case 2:var _tL_=_a1_;break;
        case 3:var _tL_=_a2_;break;
        case 4:var _tL_=_a3_;break;
        case 5:var _tL_=_a4_;break;
        case 6:var _tL_=_a5_;break;
        case 7:var _tL_=_a6_;break;
        case 8:var _tL_=_a7_;break;
        case 9:var _tL_=_a8_;break;
        case 10:var _tL_=_a9_;break;
        case 11:var _tL_=_a__;break;
        default:var _tL_=_a$_}
      return caml_int64_format(_tL_,n)}
    function convert_float(fconv,prec$0,x)
     {if(16 <= fconv)
       {if(17 <= fconv)
         switch(fconv - 17 | 0)
          {case 2:var switch$0=0;break;
           case 0:
           case 3:var sign=43,switch$0=1;break;
           default:var sign=32,switch$0=1}
        else
         var switch$0=0;
        if(!switch$0)var sign=45;
        var s=caml_hexstring_of_float(x,prec$0,sign);
        if(19 <= fconv)
         {var l=caml_ml_bytes_length(s);
          if(0 === l)return s;
          var r=caml_create_bytes(l),_tF_=l - 1 | 0,_tE_=0;
          if(!(_tF_ < 0))
           {var i=_tE_;
            for(;;)
             {var c=caml_string_unsafe_get(s,i);
              if(97 <= c)
               if(122 < c)var switch$1=0;else var _tG_=c - 32 | 0,switch$1=1;
              else
               var switch$1=0;
              if(!switch$1)var _tG_=c;
              caml_string_unsafe_set(r,i,_tG_);
              var _tH_=i + 1 | 0;
              if(_tF_ !== i){var i=_tH_;continue}
              break}}
          return r}
        return s}
      if(15 === fconv)
       var _tI_=_bA_;
      else
       {var prec=abs(prec$0);
        switch(fconv)
         {case 15:var symb=70;break;
          case 0:
          case 1:
          case 2:var symb=102;break;
          case 3:
          case 4:
          case 5:var symb=101;break;
          case 6:
          case 7:
          case 8:var symb=69;break;
          case 9:
          case 10:
          case 11:var symb=103;break;
          case 12:
          case 13:
          case 14:var symb=71;break;
          case 16:
          case 17:
          case 18:var symb=104;break;
          default:var symb=72}
        var buf=buffer_create(16);
        buffer_add_char(buf,37);
        switch(fconv)
         {case 1:
          case 4:
          case 7:
          case 10:
          case 13:
          case 17:
          case 20:buffer_add_char(buf,43);break;
          case 2:
          case 5:
          case 8:
          case 11:
          case 14:
          case 18:
          case 21:buffer_add_char(buf,32);break
          }
        buffer_add_char(buf,46);
        buffer_add_string(buf,caml_new_string("" + prec));
        buffer_add_char(buf,symb);
        var _tI_=buffer_contents(buf)}
      var str=caml_format_float(_tI_,x);
      if(15 === fconv)
       {var len=caml_ml_string_length(str),match$0=caml_classify_float(x);
        if(3 === match$0)return x < 0?_bB_:_bC_;
        if(4 <= match$0)return _bD_;
        var i$0=0;
        for(;;)
         {if(i$0 === len)
           var _tK_=0;
          else
           {var
             match=caml_string_get(str,i$0),
             _tJ_=match - 46 | 0,
             switch$2=
              23 < _tJ_ >>> 0?55 === _tJ_?1:0:21 < (_tJ_ - 1 | 0) >>> 0?1:0;
            if(!switch$2){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
            var _tK_=1}
          return _tK_?str:_c_(str,_bE_)}}
      return str}
    function make_int_padding_precision(k,o,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,o,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _tB_=pad[2],_tC_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=fix_padding(_tC_,_tB_,caml_call2(trans,iconv,x));
                      return make_printf(k,o,[4,acc,str],fmt)}
                   :function(p,x)
                     {var
                       str=
                        fix_padding
                         (_tC_,_tB_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,o,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_tC_,_tB_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,o,[4,acc,str],fmt)}}
        var _tD_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=fix_padding(_tD_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,o,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_tD_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,o,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_tD_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,o,[4,acc,str],fmt)}}}
    function make_string_padding(k,o,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,o,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,o,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,o,new_acc,fmt)}}}
    function make_printf$0(counter,k,o,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call2(k$0,o,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,o,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {if(40 <= c)
              if(92 === c)
               var str=_k_,switch$0=2;
              else
               var switch$0=127 <= c?0:1;
             else
              if(32 <= c)
               if(39 <= c)var str=_l_,switch$0=2;else var switch$0=1;
              else
               if(14 <= c)
                var switch$0=0;
               else
                switch(c)
                 {case 8:var str=_m_,switch$0=2;break;
                  case 9:var str=_n_,switch$0=2;break;
                  case 10:var str=_o_,switch$0=2;break;
                  case 13:var str=_p_,switch$0=2;break;
                  default:var switch$0=0}
             switch(switch$0)
              {case 0:
                var s=caml_create_bytes(4);
                caml_string_unsafe_set(s,0,92);
                caml_string_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_string_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_string_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=s;
                break;
               case 1:
                var s$0=caml_create_bytes(1);
                caml_string_unsafe_set(s$0,0,c);
                var str=s$0;
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,res];
             return make_printf(k$0,o,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_string_padding
                   (k$0,o,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_string_padding
                   (k$0,o,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,o,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var str=convert_float(fconv,default_float_precision,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _tw_=pad$5[2],_tx_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var
                            str=convert_float(fconv,default_float_precision,x),
                            str$0=fix_padding(_tx_,_tw_,str);
                           return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=fix_padding(_tx_,_tw_,convert_float(fconv,p,x));
                           return make_printf(k$0,o,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_tx_,_tw_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
             var _ty_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision,x),
                          str$0=fix_padding(_ty_,w,str);
                         return make_printf(k$0,o,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=fix_padding(_ty_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,o,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_ty_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,o,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[1];
           return function(b)
            {var _tA_=b?_d_:_e_;
             return make_printf(k$0,o,[4,acc$0,_tA_],rest$8)};
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str)
            {return make_printf(k$0,o,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _tz_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _tz_[2] === "number")
              {var fmt=_tz_[1];
               return make_printf(k$0,o,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      o,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,o,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _tu_=fmt$0[1];
           if(0 === _tu_[0])
            {var
              rest$13=fmt$0[2],
              match=_tu_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(koc,kacc)
                  {return make_printf(k,koc,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_tu_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(koc,kacc)
                {return make_printf(k,koc,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bF_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bG_];
           return function(param){return make_printf(k$0,o,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bH_,n)];
             return make_printf(k$0,o,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];
             return make_printf(k$0,o,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 3:throw [0,Assert_failure,_bI_];
              default:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              case 8:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,o,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,o,acc$0,fmtty$0,rest$18]);
              case 9:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,o,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,o,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _tv_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,o,acc$0,rest$19,arity,_tv_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,o,acc$0,rest$19,arity,_tv_])}}
    function make_from_fmtty$0(counter,k,o,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,o,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,o,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,o,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,o,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_tt_)
           {return make_from_fmtty(k,o,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,o,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bJ_];
         default:throw [0,Assert_failure,_bK_]}}
    function make_invalid_arg(counter,k,o,acc,fmt)
     {var _ts_=[8,acc,_bL_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_ts_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_ts_,fmt])}
    function make_custom$0(counter,k,o,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,o,acc,rest,arity$0,caml_call1(f,x))}}
      var _tr_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,o,_tr_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,o,_tr_,rest])}
    function make_printf(k,o,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,o,acc,fmt))}
    function make_from_fmtty(k,o,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,o,acc,fmtty,fmt))}
    function make_custom(k,o,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,o,acc,rest,arity,f))}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _tp_=acc$0[2],_tq_=acc$0[1];
           if(0 === _tp_[0])
            {var acc$1=_tp_[1];
             output_acc(o,_tq_);
             output_string(o,_bM_);
             var acc$0=acc$1;
             continue}
           var acc$2=_tp_[1];
           output_acc(o,_tq_);
           output_string(o,_bN_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _tn_=acc$0[2],_to_=acc$0[1];
           if(0 === _tn_[0])
            {var acc$1=_tn_[1];
             strput_acc(b,_to_);
             add_string(b,_bO_);
             var acc$0=acc$1;
             continue}
           var acc$2=_tn_[1];
           strput_acc(b,_to_);
           add_string(b,_bP_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];strput_acc(b,p$1);return add_char(b,c)}}
    function open_box_of_string(str)
     {if(caml_string_equal(str,_bQ_))return _bR_;
      var len=caml_ml_string_length(str);
      function invalid_box(param$0)
       {var fmt=param[1],buf=create$0(256);
        function k(param,acc)
         {strput_acc(buf,acc);return failwith(contents(buf))}
        return caml_call1(make_printf(k,0,0,fmt),str)}
      function parse_spaces(i)
       {var i$0=i;
        for(;;)
         {if(i$0 === len)return i$0;
          var match=caml_string_get(str,i$0);
          if(9 !== match)if(32 !== match)return i$0;
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function parse_lword(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switcher=match - 97 | 0;
          if(25 < switcher >>> 0)return j$0;
          var j$1=j$0 + 1 | 0,j$0=j$1;
          continue}}
      function parse_int(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var
           match=caml_string_get(str,j$0),
           switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
          if(switch$0){var j$1=j$0 + 1 | 0,j$0=j$1;continue}
          return j$0}}
      var
       wstart=parse_spaces(0),
       wend=parse_lword(wstart,wstart),
       box_name=sub$0(str,wstart,wend - wstart | 0),
       nstart=parse_spaces(wend),
       nend=parse_int(nstart,nstart);
      if(nstart === nend)
       var indent=0;
      else
       try
        {var
          _tl_=caml_int_of_string(sub$0(str,nstart,nend - nstart | 0)),
          indent=_tl_}
       catch(_tm_)
        {_tm_ = caml_wrap_exception(_tm_);
         if(_tm_[1] !== Failure)throw _tm_;
         var indent=invalid_box(0)}
      var exp_end=parse_spaces(nend);
      if(exp_end !== len)invalid_box(0);
      if(caml_string_notequal(box_name,_bS_))
       if(caml_string_notequal(box_name,_bT_))
        if(caml_string_notequal(box_name,_bU_))
         if(caml_string_notequal(box_name,_bV_))
          if(caml_string_notequal(box_name,_bW_))
           if(caml_string_notequal(box_name,_bX_))
            var box_type=invalid_box(0),switch$0=1;
           else
            var box_type=1,switch$0=1;
          else
           var box_type=2,switch$0=1;
         else
          var box_type=3,switch$0=1;
        else
         var box_type=0,switch$0=1;
       else
        var switch$0=0;
      else
       var switch$0=0;
      if(!switch$0)var box_type=4;
      return [0,indent,box_type]}
    function fprintf(oc,fmt$0)
     {var fmt=fmt$0[1],_tk_=0;
      return make_printf
              (function(o,acc){output_acc(o,acc);return 0},oc,_tk_,fmt)}
    function ksprintf(k,param)
     {var fmt=param[1];
      function k$0(param,acc)
       {var buf=create$0(64);
        strput_acc(buf,acc);
        return caml_call1(k,contents(buf))}
      return make_printf(k$0,0,0,fmt)}
    function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
    var
     Bad=[248,_bY_,caml_fresh_oo_id(0)],
     Help=[248,_bZ_,caml_fresh_oo_id(0)];
    caml_fresh_oo_id(0);
    var printers=[0,0];
    function field(x,i$1)
     {var f=x[i$1 + 1];
      if(is_block(f))
       {if(caml_obj_tag(f) === 252)return caml_call1(sprintf(_b0_),f);
        if(caml_obj_tag(f) === 253)
         {var s=caml_format_float(_g_,f),l=caml_ml_string_length(s),i=0;
          for(;;)
           {if(l <= i)return _c_(s,_f_);
            var
             match=caml_string_get(s,i),
             switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
            if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
            return s}}
        return _b1_}
      return caml_call1(sprintf(_b2_),f)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _b3_;
      var _ti_=other_fields(x,i + 1 | 0),_tj_=field(x,i);
      return caml_call2(sprintf(_b4_),_tj_,_ti_)}
    function fields(x)
     {var match=x.length - 1;
      if(2 < match >>> 0)
       {var _tf_=other_fields(x,2),_tg_=field(x,1);
        return caml_call2(sprintf(_b5_),_tg_,_tf_)}
      switch(match)
       {case 0:return _b6_;
        case 1:return _b7_;
        default:var _th_=field(x,1);return caml_call1(sprintf(_b8_),_th_)}}
    function to_string(x)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try {var _td_=caml_call1(hd,x),_tc_=_td_}catch(_te_){var _tc_=0}
            if(_tc_){var s=_tc_[1];return s}
            var param$0=tl;
            continue}
          if(x === Out_of_memory)return _b9_;
          if(x === Stack_overflow)return _b__;
          if(x[1] === Match_failure)
           {var match=x[2],char$0=match[3],line=match[2],file=match[1];
            return caml_call5
                    (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_b$_)}
          if(x[1] === Assert_failure)
           {var
             match$0=x[2],
             char$1=match$0[3],
             line$0=match$0[2],
             file$0=match$0[1];
            return caml_call5
                    (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_ca_)}
          if(x[1] === Undefined_recursive_module)
           {var
             match$1=x[2],
             char$2=match$1[3],
             line$1=match$1[2],
             file$1=match$1[1];
            return caml_call5
                    (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_cb_)}
          if(0 === caml_obj_tag(x))
           {var constructor=x[1][1];return _c_(constructor,fields(x))}
          return x[1]}}
      return conv(printers[1])}
    function print_backtrace(outchan)
     {var
       raw_backtrace=caml_get_exception_raw_backtrace(0),
       a=caml_convert_raw_backtrace(raw_backtrace),
       backtrace=[0,a];
      if(backtrace)
       {var _ta_=a.length - 1 - 1 | 0,_s$_=0;
        if(!(_ta_ < 0))
         {var i=_s$_;
          for(;;)
           {var
             slot=caml_check_bound(a,i)[i + 1],
             info$0=
              function(i)
               {function info(is_raise)
                 {return is_raise?0 === i?_cc_:_cd_:0 === i?_ce_:_cf_}
                return info},
             info=info$0(i);
            if(0 === slot[0])
             var
              _s4_=slot[5],
              _s5_=slot[4],
              _s6_=slot[3],
              _s7_=slot[6]?_cg_:_ci_,
              _s8_=slot[2],
              _s9_=info(slot[1]),
              match=
               [0,caml_call6(sprintf(_ch_),_s9_,_s8_,_s7_,_s6_,_s5_,_s4_)];
            else
             if(slot[1])
              var match=0;
             else
              var _s__=info(0),match=[0,caml_call1(sprintf(_cj_),_s__)];
            if(match){var str=match[1];caml_call1(fprintf(outchan,_ck_),str)}
            var _tb_=i + 1 | 0;
            if(_ta_ !== i){var i=_tb_;continue}
            break}}
        return 0}
      return fprintf(outchan,_cl_)}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    function new_state(param){return [0,caml_make_vect(55,0),0]}
    function full_init(s,seed)
     {var seed$0=0 === seed.length - 1?[0,0]:seed,l=seed$0.length - 1,i$0=0;
      for(;;)
       {caml_check_bound(s[1],i$0)[i$0 + 1] = i$0;
        var _s3_=i$0 + 1 | 0;
        if(54 !== i$0){var i$0=_s3_;continue}
        var accu=[0,_cm_],_sZ_=54 + max(55,l) | 0,_sY_=0;
        if(!(_sZ_ < 0))
         {var i=_sY_;
          for(;;)
           {var
             j=i % 55 | 0,
             k=caml_mod(i,l),
             x=caml_check_bound(seed$0,k)[k + 1],
             str=_c_(accu[1],caml_new_string("" + x));
            accu[1] = caml_md5_string(str,0,caml_ml_string_length(str));
            var
             _s0_=accu[1],
             _sU_=caml_string_get(_s0_,3) << 24,
             _sV_=caml_string_get(_s0_,2) << 16,
             _sW_=caml_string_get(_s0_,1) << 8,
             _sX_=((caml_string_get(_s0_,0) + _sW_ | 0) + _sV_ | 0) + _sU_ | 0,
             _s1_=(caml_check_bound(s[1],j)[j + 1] ^ _sX_) & 1073741823;
            caml_check_bound(s[1],j)[j + 1] = _s1_;
            var _s2_=i + 1 | 0;
            if(_sZ_ !== i){var i=_s2_;continue}
            break}}
        s[2] = 0;
        return 0}}
    function make$1(seed)
     {var result=new_state(0);full_init(result,seed);return result}
    function bits(s)
     {s[2] = (s[2] + 1 | 0) % 55 | 0;
      var
       _sR_=s[2],
       curval=caml_check_bound(s[1],_sR_)[_sR_ + 1],
       _sS_=(s[2] + 24 | 0) % 55 | 0,
       newval=
        caml_check_bound(s[1],_sS_)[_sS_ + 1]
        +
        (curval ^ (curval >>> 25 | 0) & 31)
        |
        0,
       newval30=newval & 1073741823,
       _sT_=s[2];
      caml_check_bound(s[1],_sT_)[_sT_ + 1] = newval30;
      return newval30}
    var s=[0,_co_.slice(),0];
    function init$0(seed){return full_init(s,[0,seed])}
    function get_state(param)
     {var st1=new_state(0);
      blit$1(s[1],0,st1[1],0,55);
      st1[2] = s[2];
      return st1}
    try
     {var _jn_=caml_sys_getenv(_jm_),params=_jn_}
    catch(_sP_)
     {_sP_ = caml_wrap_exception(_sP_);
      if(_sP_ !== Not_found)throw _sP_;
      try
       {var _jl_=caml_sys_getenv(_jk_),_cq_=_jl_}
      catch(_sQ_)
       {_sQ_ = caml_wrap_exception(_sQ_);
        if(_sQ_ !== Not_found)throw _sQ_;
        var _cq_=_cp_}
      var params=_cq_}
    var
     randomized_default=contains(params,82),
     prng=[246,function(_sO_){return make$1(caml_sys_random_seed(0))}];
    function create$1(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized_default;
      var x=16;
      for(;;)
       {if(!(initial_size <= x))
         if(!(max_length < (x * 2 | 0))){var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         var
          _sM_=caml_obj_tag(prng),
          _sN_=250 === _sM_?prng[1]:246 === _sM_?force_lazy_block(prng):prng,
          seed=bits(_sN_);
        else
         var seed=0;
        return [0,0,caml_make_vect(x,0),seed,x]}}
    function add_queue(x,q)
     {var c=[0,x,0],_sL_=q[1];
      return _sL_?(q[1] = c,_sL_[2] = c,0):(q[1] = c,q[2] = c,0)}
    var Empty_queue=[248,_cr_,caml_fresh_oo_id(0)];
    function take_queue(q)
     {var _sK_=q[2];
      if(_sK_)
       {var x=_sK_[1],tl=_sK_[2];q[2] = tl;if(0 === tl)q[1] = 0;return x}
      throw Empty_queue}
    function pp_enqueue(state,token)
     {var len=token[3];
      state[13] = state[13] + len | 0;
      return add_queue(token,state[27])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function pp_output_spaces(state,n){return caml_call1(state[20],n)}
    function break_new_line(state,offset,width)
     {pp_output_newline(state);
      state[11] = 1;
      var
       indent=(state[6] - width | 0) + offset | 0,
       real_indent=min(state[8],indent);
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      return pp_output_spaces(state,state[10])}
    function break_line(state,width){return break_new_line(state,0,width)}
    function break_same_line(state,width)
     {state[9] = state[9] - width | 0;return pp_output_spaces(state,width)}
    function pp_force_break_line(state)
     {var _sH_=state[2];
      if(_sH_)
       {var
         match=_sH_[1],
         width=match[2],
         bl_ty=match[1],
         _sI_=state[9] < width?1:0;
        if(_sI_)
         {if(0 !== bl_ty)return 5 <= bl_ty?0:break_line(state,width);
          var _sJ_=0}
        else
         var _sJ_=_sI_;
        return _sJ_}
      return pp_output_newline(state)}
    function pp_skip_token(state)
     {var match=take_queue(state[27]),size=match[1],len=match[3];
      state[12] = state[12] - len | 0;
      state[9] = state[9] + size | 0;
      return 0}
    function format_pp_token(state,size,param)
     {if(typeof param === "number")
       switch(param)
        {case 0:
          var _sw_=state[3];
          if(_sw_)
           {var
             match=_sw_[1],
             tabs=match[1],
             add_tab=
              function(n,ls)
               {if(ls)
                 {var l=ls[2],x=ls[1];
                  return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]}
                return [0,n,0]};
            tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1]);
            return 0}
          return 0;
         case 1:
          var _sx_=state[2];
          if(_sx_){var ls=_sx_[2];state[2] = ls;return 0}
          return 0;
         case 2:
          var _sy_=state[3];
          if(_sy_){var ls$0=_sy_[2];state[3] = ls$0;return 0}
          return 0;
         case 3:
          var _sz_=state[2];
          if(_sz_)
           {var match$0=_sz_[1],width=match$0[2];
            return break_line(state,width)}
          return pp_output_newline(state);
         case 4:
          var _sA_=state[10] !== (state[6] - state[9] | 0)?1:0;
          return _sA_?pp_skip_token(state):_sA_;
         default:
          var _sB_=state[5];
          if(_sB_)
           {var
             tags=_sB_[2],
             tag_name=_sB_[1],
             marker=caml_call1(state[24],tag_name);
            pp_output_string(state,marker);
            state[5] = tags;
            return 0}
          return 0}
      else
       switch(param[0])
        {case 0:
          var s=param[1];
          state[9] = state[9] - size | 0;
          pp_output_string(state,s);
          state[11] = 0;
          return 0;
         case 1:
          var off=param[2],n=param[1],_sC_=state[2];
          if(_sC_)
           {var match$1=_sC_[1],width$0=match$1[2],ty=match$1[1];
            switch(ty)
             {case 0:return break_same_line(state,n);
              case 1:return break_new_line(state,off,width$0);
              case 2:return break_new_line(state,off,width$0);
              case 3:
               return state[9] < size
                       ?break_new_line(state,off,width$0)
                       :break_same_line(state,n);
              case 4:
               return state[11]
                       ?break_same_line(state,n)
                       :state[9] < size
                         ?break_new_line(state,off,width$0)
                         :((state[6] - width$0 | 0) + off | 0) < state[10]
                           ?break_new_line(state,off,width$0)
                           :break_same_line(state,n);
              default:return break_same_line(state,n)}}
          return 0;
         case 2:
          var
           off$0=param[2],
           n$0=param[1],
           insertion_point=state[6] - state[9] | 0,
           _sD_=state[3];
          if(_sD_)
           {var
             match$2=_sD_[1],
             tabs$0=match$2[1],
             find=
              function(n,param)
               {var param$0=param;
                for(;;)
                 {if(param$0)
                   {var l=param$0[2],x=param$0[1];
                    if(caml_greaterequal(x,n))return x;
                    var param$0=l;
                    continue}
                  throw Not_found}},
             _sE_=tabs$0[1];
            if(_sE_)
             {var x=_sE_[1];
              try
               {var _sF_=find(insertion_point,tabs$0[1]),x$0=_sF_}
              catch(_sG_)
               {_sG_ = caml_wrap_exception(_sG_);
                if(_sG_ !== Not_found)throw _sG_;
                var x$0=x}
              var tab=x$0}
            else
             var tab=insertion_point;
            var offset=tab - insertion_point | 0;
            return 0 <= offset
                    ?break_same_line(state,offset + n$0 | 0)
                    :break_new_line(state,tab + off$0 | 0,state[6])}
          return 0;
         case 3:
          var
           ty$0=param[2],
           off$1=param[1],
           insertion_point$0=state[6] - state[9] | 0;
          if(state[8] < insertion_point$0)pp_force_break_line(state);
          var
           offset$0=state[9] - off$1 | 0,
           bl_type=1 === ty$0?1:state[9] < size?ty$0:5;
          state[2] = [0,[0,bl_type,offset$0],state[2]];
          return 0;
         case 4:var tbox=param[1];state[3] = [0,tbox,state[3]];return 0;
         default:
          var tag_name$0=param[1],marker$0=caml_call1(state[23],tag_name$0);
          pp_output_string(state,marker$0);
          state[5] = [0,tag_name$0,state[5]];
          return 0}}
    function advance_loop(state)
     {for(;;)
       {var _ss_=state[27][2];
        if(_ss_)
         {var
           x=_ss_[1],
           size=x[1],
           len=x[3],
           tok=x[2],
           _st_=size < 0?1:0,
           _su_=_st_?(state[13] - state[12] | 0) < state[9]?1:0:_st_,
           _sv_=1 - _su_;
          if(_sv_)
           {take_queue(state[27]);
            var size$0=0 <= size?size:pp_infinity;
            format_pp_token(state,size$0,tok);
            state[12] = len + state[12] | 0;
            continue}
          return _sv_}
        throw Empty_queue}}
    function advance_left(state)
     {try
       {var _sq_=advance_loop(state);return _sq_}
      catch(_sr_)
       {_sr_ = caml_wrap_exception(_sr_);
        if(_sr_ === Empty_queue)return 0;
        throw _sr_}}
    function enqueue_advance(state,tok)
     {pp_enqueue(state,tok);return advance_left(state)}
    function enqueue_string_as(state,size,s)
     {return enqueue_advance(state,[0,size,[0,s],size])}
    var q_elem=[0,-1,_cs_,0],scan_stack_bottom=[0,[0,-1,q_elem],0];
    function clear_scan_stack(state){state[1] = scan_stack_bottom;return 0}
    function set_size(state,ty)
     {var _sm_=state[1];
      if(_sm_)
       {var
         match=_sm_[1],
         queue_elem=match[2],
         left_tot=match[1],
         size=queue_elem[1],
         t=_sm_[2],
         tok=queue_elem[2];
        if(left_tot < state[12])return clear_scan_stack(state);
        if(typeof tok !== "number")
         switch(tok[0])
          {case 3:
            var
             _so_=1 - ty,
             _sp_=
              _so_?(queue_elem[1] = state[13] + size | 0,state[1] = t,0):_so_;
            return _sp_;
           case 1:
           case 2:
            var
             _sn_=
              ty?(queue_elem[1] = state[13] + size | 0,state[1] = t,0):ty;
            return _sn_
           }
        return 0}
      return 0}
    function scan_push(state,b,tok)
     {pp_enqueue(state,tok);
      if(b)set_size(state,1);
      state[1] = [0,[0,state[13],tok],state[1]];
      return 0}
    function pp_open_box_gen(state,indent,br_ty)
     {state[14] = state[14] + 1 | 0;
      if(state[14] < state[15])
       {var elem=[0,-state[13] | 0,[3,indent,br_ty],0];
        return scan_push(state,0,elem)}
      var _sk_=state[14] === state[15]?1:0;
      if(_sk_)
       {var _sl_=state[16],len=caml_ml_string_length(_sl_);
        return enqueue_string_as(state,len,_sl_)}
      return _sk_}
    function pp_close_box(state,param)
     {var _si_=1 < state[14]?1:0;
      if(_si_)
       {if(state[14] < state[15])
         {pp_enqueue(state,[0,0,1,0]);set_size(state,1);set_size(state,0)}
        state[14] = state[14] - 1 | 0;
        var _sj_=0}
      else
       var _sj_=_si_;
      return _sj_}
    function pp_flush_queue(state,b)
     {for(;;)
       {if(1 < state[14]){pp_close_box(state,0);continue}
        state[13] = pp_infinity;
        advance_left(state);
        if(b)pp_output_newline(state);
        state[12] = 1;
        state[13] = 1;
        var _sh_=state[27];
        _sh_[1] = 0;
        _sh_[2] = 0;
        clear_scan_stack(state);
        state[2] = 0;
        state[3] = 0;
        state[4] = 0;
        state[5] = 0;
        state[10] = 0;
        state[14] = 0;
        state[9] = state[6];
        return pp_open_box_gen(state,0,3)}}
    function pp_print_as_size(state,size,s)
     {var _sg_=state[14] < state[15]?1:0;
      return _sg_?enqueue_string_as(state,size,s):_sg_}
    function pp_print_as(state,isize,s)
     {return pp_print_as_size(state,isize,s)}
    function pp(state,s){return pp_print_as(state,caml_ml_string_length(s),s)}
    function pp_print_char(state,c){return pp_print_as(state,1,make$0(1,c))}
    function pp_open_box(state,indent){return pp_open_box_gen(state,indent,4)}
    function pp_print_flush(state,param)
     {pp_flush_queue(state,0);return caml_call1(state[18],0)}
    function pp_force_newline(state,param)
     {var _sf_=state[14] < state[15]?1:0;
      return _sf_?enqueue_advance(state,[0,0,3,0]):_sf_}
    function pp_print_break(state,width,offset)
     {var _se_=state[14] < state[15]?1:0;
      if(_se_)
       {var elem=[0,-state[13] | 0,[1,width,offset],width];
        return scan_push(state,1,elem)}
      return _se_}
    var blank_line=make$0(80,32);
    function default_pp_mark_open_tag(s){return _c_(_cv_,_c_(s,_cu_))}
    function default_pp_mark_close_tag(s){return _c_(_cx_,_c_(s,_cw_))}
    function default_pp_print_open_tag(_sd_){return 0}
    function default_pp_print_close_tag(_sc_){return 0}
    function make_formatter(output,flush)
     {function i(_sb_){return 0}
      function h(_sa_){return 0}
      var pp_queue=[0,0,0],sys_tok=[0,-1,_cy_,0];
      add_queue(sys_tok,pp_queue);
      var
       sys_scan_stack=[0,[0,1,sys_tok],scan_stack_bottom],
       state=
        [0,
         sys_scan_stack,
         0,
         0,
         0,
         0,
         78,
         10,
         68,
         78,
         0,
         1,
         1,
         1,
         1,
         max$0,
         _cz_,
         output,
         flush,
         h,
         i,
         0,
         0,
         default_pp_mark_open_tag,
         default_pp_mark_close_tag,
         default_pp_print_open_tag,
         default_pp_print_close_tag,
         pp_queue];
      state[19] = function(_r$_){return caml_call3(state[17],_ct_,0,1)};
      state[20]
      =
      function(n$1)
       {var n=n$1;
        for(;;)
         {var _r__=0 < n?1:0;
          if(_r__)
           {if(80 < n)
             {caml_call3(state[17],blank_line,0,80);
              var n$0=n - 80 | 0,n=n$0;
              continue}
            return caml_call3(state[17],blank_line,0,n)}
          return _r__}};
      return state}
    function formatter_of_out_channel(oc)
     {function _r9_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(s,ofs,len)
                {if(0 <= ofs)
                  if(0 <= len)
                   if(!((caml_ml_string_length(s) - len | 0) < ofs))
                    return caml_ml_output(oc,s,ofs,len);
                 return invalid_arg(_h_)},
               _r9_)}
    function formatter_of_buffer(b)
     {function _r4_(_r8_){return 0}
      return make_formatter
              (function(s,offset,len)
                {var _r5_=offset < 0?1:0;
                 if(_r5_)
                  var _r6_=_r5_;
                 else
                  var
                   _r7_=len < 0?1:0,
                   _r6_=
                    _r7_
                    ||
                    ((caml_ml_string_length(s) - len | 0) < offset?1:0);
                 if(_r6_)invalid_arg(_X_);
                 var new_position=b[2] + len | 0;
                 if(b[3] < new_position)resize(b,len);
                 blit$0(s,offset,b[1],b[2],len);
                 b[2] = new_position;
                 return 0},
               _r4_)}
    var pp_buffer_size=512;
    function pp_make_buffer(param){return create$0(pp_buffer_size)}
    var
     stdbuf=pp_make_buffer(0),
     std_formatter=formatter_of_out_channel(stdout);
    formatter_of_out_channel(stderr);
    formatter_of_buffer(stdbuf);
    function print_flush(_r3_){return pp_print_flush(std_formatter,_r3_)}
    function compute_tag(output,tag_acc)
     {var b=create$0(16),ppf=formatter_of_buffer(b);
      caml_call2(output,ppf,tag_acc);
      pp_print_flush(ppf,0);
      var len=b[2];
      if(2 <= len)
       {var len$0=len - 2 | 0,ofs=1;
        if(0 <= len$0)
         if(!((b[2] - len$0 | 0) < 1))return sub_string(b[1],ofs,len$0);
        return invalid_arg(_V_)}
      return contents(b)}
    function output_acc$0(ppf,acc)
     {if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          output_acc$0(ppf,p);
          if(typeof f === "number")
           switch(f)
            {case 0:return pp_close_box(ppf,0);
             case 1:
              if(ppf[22])pp_enqueue(ppf,[0,0,5,0]);
              var _rQ_=ppf[21];
              if(_rQ_)
               {var _rR_=ppf[4];
                if(_rR_)
                 {var tags=_rR_[2],tag_name=_rR_[1];
                  caml_call1(ppf[26],tag_name);
                  ppf[4] = tags;
                  return 0}
                var _rS_=0}
              else
               var _rS_=_rQ_;
              return _rS_;
             case 2:return pp_print_flush(ppf,0);
             case 3:return pp_force_newline(ppf,0);
             case 4:pp_flush_queue(ppf,1);return caml_call1(ppf[18],0);
             case 5:return pp_print_char(ppf,64);
             default:return pp_print_char(ppf,37)}
          else
           switch(f[0])
            {case 0:
              var offset=f[3],width=f[2];
              return pp_print_break(ppf,width,offset);
             case 1:return 0;
             default:
              var c=f[1];pp_print_char(ppf,64);return pp_print_char(ppf,c)}
         case 1:
          var _rT_=acc[2],_rU_=acc[1];
          if(0 === _rT_[0])
           {var acc$0=_rT_[1];
            output_acc$0(ppf,_rU_);
            var tag_name$0=compute_tag(output_acc$0,acc$0);
            if(ppf[21])
             {ppf[4] = [0,tag_name$0,ppf[4]];caml_call1(ppf[25],tag_name$0)}
            var _rP_=ppf[22];
            return _rP_?pp_enqueue(ppf,[0,0,[5,tag_name$0],0]):_rP_}
          var acc$1=_rT_[1];
          output_acc$0(ppf,_rU_);
          var
           match=open_box_of_string(compute_tag(output_acc$0,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _rV_=acc[1];
          if(typeof _rV_ === "number")
           var switch$1=1;
          else
           if(0 === _rV_[0])
            {var _rW_=_rV_[2];
             if(typeof _rW_ === "number")
              var switch$2=1;
             else
              if(1 === _rW_[0])
               var
                s$0=acc[2],
                size=_rW_[2],
                p$1=_rV_[1],
                switch$0=0,
                switch$1=0,
                switch$2=0;
              else
               var switch$2=1;
             if(switch$2)var switch$1=1}
           else
            var switch$1=1;
          if(switch$1)var s=acc[2],p$0=_rV_,switch$0=2;
          break;
         case 3:
          var _rX_=acc[1];
          if(typeof _rX_ === "number")
           var switch$3=1;
          else
           if(0 === _rX_[0])
            {var _rY_=_rX_[2];
             if(typeof _rY_ === "number")
              var switch$4=1;
             else
              if(1 === _rY_[0])
               var
                c$1=acc[2],
                size$0=_rY_[2],
                p$3=_rX_[1],
                switch$0=1,
                switch$3=0,
                switch$4=0;
              else
               var switch$4=1;
             if(switch$4)var switch$3=1}
           else
            var switch$3=1;
          if(switch$3)var c$0=acc[2],p$2=_rX_,switch$0=3;
          break;
         case 4:
          var _rZ_=acc[1];
          if(typeof _rZ_ === "number")
           var switch$5=1;
          else
           if(0 === _rZ_[0])
            {var _r0_=_rZ_[2];
             if(typeof _r0_ === "number")
              var switch$6=1;
             else
              if(1 === _r0_[0])
               var
                s$0=acc[2],
                size=_r0_[2],
                p$1=_rZ_[1],
                switch$0=0,
                switch$5=0,
                switch$6=0;
              else
               var switch$6=1;
             if(switch$6)var switch$5=1}
           else
            var switch$5=1;
          if(switch$5)var s=acc[2],p$0=_rZ_,switch$0=2;
          break;
         case 5:
          var _r1_=acc[1];
          if(typeof _r1_ === "number")
           var switch$7=1;
          else
           if(0 === _r1_[0])
            {var _r2_=_r1_[2];
             if(typeof _r2_ === "number")
              var switch$8=1;
             else
              if(1 === _r2_[0])
               var
                c$1=acc[2],
                size$0=_r2_[2],
                p$3=_r1_[1],
                switch$0=1,
                switch$7=0,
                switch$8=0;
              else
               var switch$8=1;
             if(switch$8)var switch$7=1}
           else
            var switch$7=1;
          if(switch$7)var c$0=acc[2],p$2=_r1_,switch$0=3;
          break;
         case 6:
          var f$0=acc[2],p$4=acc[1];
          output_acc$0(ppf,p$4);
          return caml_call1(f$0,ppf);
         case 7:
          var p$5=acc[1];output_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          output_acc$0(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:output_acc$0(ppf,p$1);return pp_print_as_size(ppf,size,s$0);
        case 1:
         output_acc$0(ppf,p$3);
         return pp_print_as_size(ppf,size$0,make$0(1,c$1));
        case 2:output_acc$0(ppf,p$0);return pp(ppf,s);
        default:output_acc$0(ppf,p$2);return pp_print_char(ppf,c$0)}}
    at_exit(print_flush);
    var null_char=0,default_token_buffer_size=1024;
    function scan_raise_at_end(ic){throw End_of_file}
    function from_ic(scan_close_ic,iname,ic)
     {var s=caml_create_bytes(1024),i=[0,0],lim=[0,0],eof=[0,0];
      function next(param)
       {if(i[1] < lim[1]){var c=caml_bytes_get(s,i[1]);i[1]++;return c}
        if(eof[1])throw End_of_file;
        var
         _rO_=
          (caml_ml_string_length(s) - 1024 | 0) < 0
           ?invalid_arg(_i_)
           :caml_ml_input(ic,s,0,1024);
        lim[1] = _rO_;
        return 0 === lim[1]
                ?(eof[1] = 1,caml_call1(scan_close_ic,ic))
                :(i[1] = 1,caml_bytes_get(s,0))}
      return [0,
              0,
              null_char,
              0,
              0,
              0,
              0,
              next,
              create$0(default_token_buffer_size),
              iname]}
    from_ic(scan_raise_at_end,[1,_cA_,stdin],stdin);
    var Scan_failure=[248,_cB_,caml_fresh_oo_id(0)];
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var initial_object_size=2;
    function public_method_label(s)
     {var accu=[0,0],_rL_=caml_ml_string_length(s) - 1 | 0,_rK_=0;
      if(!(_rL_ < 0))
       {var i=_rK_;
        for(;;)
         {var _rM_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _rM_ | 0;
          var _rN_=i + 1 | 0;
          if(_rL_ !== i){var i=_rN_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    var
     compare$0=caml_string_compare,
     Vars=_P_([0,compare$0]),
     compare$1=caml_string_compare,
     Meths=_P_([0,compare$1]),
     compare$2=caml_int_compare,
     Labs=_P_([0,compare$2]),
     table_count=[0,0],
     dummy_met=caml_obj_block(0,0);
    function fit_size(n){return 2 < n?fit_size((n + 1 | 0) / 2 | 0) * 2 | 0:n}
    function new_table(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       methods=caml_make_vect((len * 2 | 0) + 2 | 0,dummy_met);
      caml_check_bound(methods,0)[1] = len;
      var _rE_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
      caml_check_bound(methods,1)[2] = _rE_;
      var _rG_=len - 1 | 0,_rF_=0;
      if(!(_rG_ < 0))
       {var i=_rF_;
        for(;;)
         {var
           _rI_=(i * 2 | 0) + 3 | 0,
           _rH_=caml_check_bound(pub_labels,i)[i + 1];
          caml_check_bound(methods,_rI_)[_rI_ + 1] = _rH_;
          var _rJ_=i + 1 | 0;
          if(_rG_ !== i){var i=_rJ_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function resize$0(array,new_size)
     {var old_size=array[2].length - 1,_rC_=old_size < new_size?1:0;
      if(_rC_)
       {var new_buck=caml_make_vect(new_size,dummy_met);
        blit$1(array[2],0,new_buck,0,old_size);
        array[2] = new_buck;
        var _rD_=0}
      else
       var _rD_=_rC_;
      return _rD_}
    var method_count=[0,0],inst_var_count=[0,0];
    function new_method(table)
     {var index=table[2].length - 1;
      resize$0(table,index + 1 | 0);
      return index}
    function get_method_label(table,name)
     {try
       {var _rA_=caml_call2(Meths[23],name,table[3]);return _rA_}
      catch(_rB_)
       {_rB_ = caml_wrap_exception(_rB_);
        if(_rB_ === Not_found)
         {var label=new_method(table);
          table[3] = caml_call3(Meths[4],name,label,table[3]);
          table[4] = caml_call3(Labs[4],label,1,table[4]);
          return label}
        throw _rB_}}
    function new_slot(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function new_variable(table,name)
     {try
       {var _ry_=caml_call2(Vars[23],name,table[7]);return _ry_}
      catch(_rz_)
       {_rz_ = caml_wrap_exception(_rz_);
        if(_rz_ === Not_found)
         {var index=new_slot(table);
          if(caml_string_notequal(name,_cC_))
           table[7] = caml_call3(Vars[4],name,index,table[7]);
          return index}
        throw _rz_}}
    function make_class(a,class_init)
     {if(a === 0)
       var table$0=new_table([0]);
      else
       {var
         tags=map(public_method_label,a),
         table=new_table(tags),
         _rw_=a.length - 1 - 1 | 0,
         _rv_=0;
        if(!(_rw_ < 0))
         {var i=_rv_;
          for(;;)
           {var met=a[i + 1],lab=(i * 2 | 0) + 2 | 0;
            table[3] = caml_call3(Meths[4],met,lab,table[3]);
            table[4] = caml_call3(Labs[4],lab,1,table[4]);
            var _rx_=i + 1 | 0;
            if(_rw_ !== i){var i=_rx_;continue}
            break}}
        var table$0=table}
      var env_init=caml_call1(class_init,table$0);
      inst_var_count[1] = (inst_var_count[1] + table$0[1] | 0) - 1 | 0;
      table$0[8] = rev_append(table$0[8],0);
      resize$0
       (table$0,
        3 + ((caml_check_bound(table$0[2],1)[2] * 16 | 0) / 32 | 0) | 0);
      return [0,caml_call1(env_init,0),class_init,env_init,0]}
    function new_cache(table)
     {var n=new_method(table);
      if(0 === (n % 2 | 0))
       var switch$0=0;
      else
       if((2 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0) < n)
        var switch$0=0;
       else
        var n$0=new_method(table),switch$0=1;
      if(!switch$0)var n$0=n;
      caml_check_bound(table[2],n$0)[n$0 + 1] = 0;
      return n$0}
    try
     {caml_sys_getenv(_jj_)}
    catch(_ru_)
     {_ru_ = caml_wrap_exception(_ru_);if(_ru_ !== Not_found)throw _ru_}
    try
     {caml_sys_getenv(_ji_)}
    catch(_rt_)
     {_rt_ = caml_wrap_exception(_rt_);if(_rt_ !== Not_found)throw _rt_}
    var
     switch$0=
      caml_string_notequal(os_type,_cD_)
       ?caml_string_notequal(os_type,_cE_)?1:0
       :0,
     window=joo_global_object,
     no_handler=null,
     empty=undefined,
     capt=true,
     false$0=false,
     array_length=window.Array,
     array_get=caml_js_get,
     math$0=window.Math,
     Error$1=[248,_cF_,caml_fresh_oo_id(0)],
     error_constr=window.Error;
    register_exception(_cG_,[0,Error$1,{}]);
    function raise_js_error(exn){throw exn}
    register_printer
     (function(param)
       {if(param[1] === Error$1)
         {var e=param[2];return [0,caml_js_to_string(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_length?0:[0,caml_js_to_string(e.toString())]});
    function preventDefault(ev)
     {var x=ev.preventDefault;
      return x !== empty?ev.preventDefault():ev.returnValue = !!0}
    var
     mousedown="mousedown",
     mouseup="mouseup",
     mousemove="mousemove",
     touchstart="touchstart",
     touchmove="touchmove",
     touchend="touchend",
     load="load",
     resize$1="resize",
     d="2d",
     document=window.document;
    caml_fresh_oo_id(0);
    var html_element=window.HTMLElement;
    html_element === empty;
    var
     console=caml_js_get_console(0),
     json=caml_json(0),
     overflow_limit=2147483e3;
    function reviver(this$0,key,value)
     {return typeof value == typeof "foo"?caml_js_to_byte_string(value):value}
    var
     input_reviver=caml_js_wrap_meth_callback(reviver),
     mlString_constr=dummy_string.constructor;
    function output_reviver(key,value)
     {return value instanceof mlString_constr
              ?caml_bytes_of_string(value)
              :value}
    caml_fresh_oo_id(0);
    function create$2(param)
     {var seq=[];caml_update_dummy(seq,[0,seq,seq]);return seq}
    var
     Canceled=[248,_cH_,caml_fresh_oo_id(0)],
     compare$3=caml_compare,
     Int_map=_P_([0,compare$3]),
     current_data=[0,Int_map[1]];
    function repr_rec(t)
     {var _rs_=t[1];
      if(3 === _rs_[0])
       {var t$0=_rs_[1],t$1=repr_rec(t$0);
        if(t$1 !== t$0)t[1] = [3,t$1];
        return t$1}
      return t}
    function repr(t){return repr_rec(t)}
    var
     async_exception_hook=
      [0,
       function(exn)
        {prerr_string(_cI_);
         prerr_string(to_string(exn));
         caml_ml_output_char(stderr,10);
         print_backtrace(stderr);
         caml_ml_flush(stderr);
         do_at_exit(0);
         return caml_sys_exit(2)}];
    function call_unsafe(f,x)
     {try
       {var _rr_=caml_call1(f,x);return _rr_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call1(async_exception_hook[1],exn)}}
    function run_waiters_rec$0(counter,state,ws,rem)
     {var ws$0=ws,rem$0=rem;
      for(;;)
       if(typeof ws$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return run_waiters_rec_next(counter$0,state,rem$0)}
         return caml_trampoline_return(run_waiters_rec_next,[0,state,rem$0])}
       else
        switch(ws$0[0])
         {case 0:
           var _rq_=ws$0[1][1];
           if(_rq_)
            {var f=_rq_[1];
             caml_call1(f,state);
             if(counter < 50)
              {var counter$1=counter + 1 | 0;
               return run_waiters_rec_next(counter$1,state,rem$0)}
             return caml_trampoline_return
                     (run_waiters_rec_next,[0,state,rem$0])}
           if(counter < 50)
            {var counter$2=counter + 1 | 0;
             return run_waiters_rec_next(counter$2,state,rem$0)}
           return caml_trampoline_return(run_waiters_rec_next,[0,state,rem$0]);
          case 1:
           var f$0=ws$0[1];
           caml_call1(f$0,state);
           if(counter < 50)
            {var counter$3=counter + 1 | 0;
             return run_waiters_rec_next(counter$3,state,rem$0)}
           return caml_trampoline_return(run_waiters_rec_next,[0,state,rem$0]);
          default:
           var
            ws2=ws$0[2],
            ws$1=ws$0[1],
            rem$1=[0,ws2,rem$0],
            ws$0=ws$1,
            rem$0=rem$1;
           continue}}
    function run_waiters_rec_next(counter,state,rem)
     {if(rem)
       {var rem$0=rem[2],ws=rem[1];
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return run_waiters_rec$0(counter$0,state,ws,rem$0)}
        return caml_trampoline_return(run_waiters_rec$0,[0,state,ws,rem$0])}
      return 0}
    function run_waiters_rec(state,ws,rem)
     {return caml_trampoline(run_waiters_rec$0(0,state,ws,rem))}
    function run_cancel_handlers_rec$0(counter,chs,rem)
     {var chs$0=chs,rem$0=rem;
      for(;;)
       if(typeof chs$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return run_cancel_handlers_rec_next(counter$0,rem$0)}
         return caml_trampoline_return(run_cancel_handlers_rec_next,[0,rem$0])}
       else
        switch(chs$0[0])
         {case 0:
           var f=chs$0[2],data=chs$0[1];
           current_data[1] = data;
           call_unsafe(f,0);
           if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return run_cancel_handlers_rec_next(counter$1,rem$0)}
           return caml_trampoline_return
                   (run_cancel_handlers_rec_next,[0,rem$0]);
          case 1:
           var n=chs$0[1];
           if(n[4]){n[4] = 0;n[1][2] = n[2];n[2][1] = n[1]}
           if(counter < 50)
            {var counter$2=counter + 1 | 0;
             return run_cancel_handlers_rec_next(counter$2,rem$0)}
           return caml_trampoline_return
                   (run_cancel_handlers_rec_next,[0,rem$0]);
          default:
           var
            chs2=chs$0[2],
            chs$1=chs$0[1],
            rem$1=[0,chs2,rem$0],
            chs$0=chs$1,
            rem$0=rem$1;
           continue}}
    function run_cancel_handlers_rec_next(counter,rem)
     {if(rem)
       {var rem$0=rem[2],chs=rem[1];
        if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return run_cancel_handlers_rec$0(counter$0,chs,rem$0)}
        return caml_trampoline_return(run_cancel_handlers_rec$0,[0,chs,rem$0])}
      return 0}
    function run_cancel_handlers_rec(chs,rem)
     {return caml_trampoline(run_cancel_handlers_rec$0(0,chs,rem))}
    function unsafe_run_waiters(sleeper,state)
     {var
       switch$0=
        1 === state[0]
         ?state[1] === Canceled?(run_cancel_handlers_rec(sleeper[4],0),1):0
         :0;
      return run_waiters_rec(state,sleeper[2],0)}
    var wakening=[0,0],q=create(0);
    function safe_run_waiters(sleeper,state)
     {var
       snapshot=current_data[1],
       already_wakening=wakening[1]?1:(wakening[1] = 1,0);
      unsafe_run_waiters(sleeper,state);
      if(already_wakening){current_data[1] = snapshot;return 0}
      for(;;)
       {if(0 === q[1]){wakening[1] = 0;current_data[1] = snapshot;return 0}
        var _rn_=q[2];
        if(_rn_)
         {var _ro_=_rn_[1],_rp_=_rn_[2];
          if(_rp_)
           {q[1] = q[1] - 1 | 0;q[2] = _rp_}
          else
           {q[1] = 0;q[2] = 0;q[3] = 0}
          unsafe_run_waiters(_ro_[1],_ro_[2]);
          continue}
        throw Empty$0}}
    function state_of_result(param)
     {if(0 === param[0]){var x=param[1];return [0,x]}
      var e=param[1];
      return [1,e]}
    function wakeup(t$0,v)
     {var result=[0,v],t=repr_rec(t$0),_rm_=t[1];
      switch(_rm_[0])
       {case 1:if(_rm_[1] === Canceled)return 0;break;
        case 2:
         var sleeper=_rm_[1],state=state_of_result(result);
         t[1] = state;
         return safe_run_waiters(sleeper,state)
        }
      return invalid_arg(_cJ_)}
    function wakeup_later_result(t,result)
     {var t$0=repr_rec(t),_rl_=t$0[1];
      switch(_rl_[0])
       {case 1:if(_rl_[1] === Canceled)return 0;break;
        case 2:
         var sleeper=_rl_[1],state=state_of_result(result);
         t$0[1] = state;
         if(wakening[1])
          {var x=[0,sleeper,state],cell=[0,x,0],_rk_=q[3];
           return _rk_
                   ?(q[1] = q[1] + 1 | 0,_rk_[2] = cell,q[3] = cell,0)
                   :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
         return safe_run_waiters(sleeper,state)
        }
      return invalid_arg(_cK_)}
    function wakeup_later(t,v){return wakeup_later_result(t,[0,v])}
    function append(l1,l2)
     {return typeof l1 === "number"?l2:typeof l2 === "number"?l1:[2,l1,l2]}
    function cleanup(ws)
     {if(typeof ws !== "number")
       switch(ws[0])
        {case 0:if(!ws[1][1])return 0;break;
         case 2:
          var l2=ws[2],l1=ws[1],_rj_=cleanup(l2);
          return append(cleanup(l1),_rj_)
         }
      return ws}
    function connect(t1,t2)
     {var t1$0=repr(t1),t2$0=repr(t2),_re_=t1$0[1];
      if(2 === _re_[0])
       {var sleeper1=_re_[1];
        if(t1$0 === t2$0)return 0;
        var _rf_=t2$0[1];
        if(2 === _rf_[0])
         {var sleeper2=_rf_[1];
          t2$0[1] = [3,t1$0];
          sleeper1[1] = sleeper2[1];
          var
           waiters=append(sleeper1[2],sleeper2[2]),
           removed=sleeper1[3] + sleeper2[3] | 0;
          if(42 < removed)
           {sleeper1[3] = 0;sleeper1[2] = cleanup(waiters)}
          else
           {sleeper1[3] = removed;sleeper1[2] = waiters}
          var
           _rg_=sleeper2[4],
           _rh_=sleeper1[4],
           _ri_=
            typeof _rh_ === "number"
             ?_rg_
             :typeof _rg_ === "number"?_rh_:[2,_rh_,_rg_];
          sleeper1[4] = _ri_;
          return 0}
        t1$0[1] = _rf_;
        return unsafe_run_waiters(sleeper1,_rf_)}
      throw [0,Assert_failure,_cL_]}
    function fast_connect(t,state)
     {var t$0=repr(t),_rd_=t$0[1];
      if(2 === _rd_[0])
       {var sleeper=_rd_[1];
        t$0[1] = state;
        return unsafe_run_waiters(sleeper,state)}
      throw [0,Assert_failure,_cM_]}
    function return$0(v){return [0,[0,v]]}
    var return_unit=[0,state_return_unit],return_none=return$0(0);
    function fail(e){return [0,[1,e]]}
    function temp(t){return [0,[2,[0,[0,[0,t]],0,0,0]]]}
    function wait(param){var t=[0,[2,[0,0,0,0,0]]];return [0,t,t]}
    function task_aux(param){return [0,[2,[0,1,0,0,0]]]}
    function task(param){var t=task_aux(0);return [0,t,t]}
    function add_waiter(sleeper,waiter)
     {var
       _rc_=sleeper[2],
       waiter$0=typeof _rc_ === "number"?waiter:[2,waiter,_rc_];
      sleeper[2] = waiter$0;
      return 0}
    function add_immutable_waiter(sleeper,waiter)
     {return add_waiter(sleeper,[1,waiter])}
    function on_cancel(t,f)
     {var _ra_=repr(t)[1];
      switch(_ra_[0])
       {case 1:if(_ra_[1] === Canceled)return call_unsafe(f,0);break;
        case 2:
         var
          sleeper=_ra_[1],
          handler=[0,current_data[1],f],
          _rb_=sleeper[4],
          handler$0=typeof _rb_ === "number"?handler:[2,handler,_rb_];
         sleeper[4] = handler$0;
         return 0
        }
      return 0}
    function _cP_(t$0,f)
     {var t=repr(t$0),_q9_=t[1];
      switch(_q9_[0])
       {case 0:var v=_q9_[1];return caml_call1(f,v);
        case 1:return [0,_q9_];
        case 2:
         var sleeper=_q9_[1],res=temp(t),data=current_data[1];
         add_immutable_waiter
          (sleeper,
           function(state)
            {switch(state[0])
              {case 0:
                var v=state[1];
                current_data[1] = data;
                try
                 {var _q$_=caml_call1(f,v),_q__=_q$_}
                catch(exn){exn = caml_wrap_exception(exn);var _q__=fail(exn)}
                return connect(res,_q__);
               case 1:return fast_connect(res,state);
               default:throw [0,Assert_failure,_cN_]}});
         return res;
        default:throw [0,Assert_failure,_cO_]}}
    function catch$0(x,f)
     {try
       {var _q6_=caml_call1(x,0),_q4_=_q6_}
      catch(exn){exn = caml_wrap_exception(exn);var _q4_=fail(exn)}
      var t=repr(_q4_),_q5_=t[1];
      switch(_q5_[0])
       {case 0:return t;
        case 1:var exn=_q5_[1];return caml_call1(f,exn);
        case 2:
         var sleeper=_q5_[1],res=temp(t),data=current_data[1];
         add_immutable_waiter
          (sleeper,
           function(state)
            {switch(state[0])
              {case 0:return fast_connect(res,state);
               case 1:
                var exn=state[1];
                current_data[1] = data;
                try
                 {var _q8_=caml_call1(f,exn),_q7_=_q8_}
                catch(exn){exn = caml_wrap_exception(exn);var _q7_=fail(exn)}
                return connect(res,_q7_);
               default:throw [0,Assert_failure,_cQ_]}});
         return res;
        default:throw [0,Assert_failure,_cR_]}}
    function async(f)
     {try
       {var _q3_=caml_call1(f,0),_q1_=_q3_}
      catch(exn){exn = caml_wrap_exception(exn);var _q1_=fail(exn)}
      var t=repr(_q1_),_q2_=t[1];
      switch(_q2_[0])
       {case 0:return 0;
        case 1:var exn=_q2_[1];return caml_call1(async_exception_hook[1],exn);
        case 2:
         var sleeper=_q2_[1];
         return add_immutable_waiter
                 (sleeper,
                  function(param)
                   {switch(param[0])
                     {case 0:return 0;
                      case 1:
                       var exn=param[1];
                       return caml_call1(async_exception_hook[1],exn);
                      default:throw [0,Assert_failure,_cS_]}});
        default:throw [0,Assert_failure,_cT_]}}
    function protected$0(t)
     {switch(repr(t)[1][0])
       {case 2:
         var
          t$0=task_aux(0),
          waiter=[],
          waiter$0=function _q0_(_qZ_){return _q0_.fun(_qZ_)};
         caml_update_dummy(waiter,[0,[0,waiter$0]]);
         caml_update_dummy
          (waiter$0,
           function(state)
            {var t=repr(t$0),_qY_=t[1];
             if(2 === _qY_[0])
              {var sleeper=_qY_[1];
               t[1] = state;
               return unsafe_run_waiters(sleeper,state)}
             return 0});
         var threads=[0,t,0],node=[0,waiter];
         iter
          (function(t)
            {var _qX_=repr(t)[1];
             if(2 === _qX_[0])
              {var sleeper=_qX_[1];return add_waiter(sleeper,node)}
             throw [0,Assert_failure,_cU_]},
           threads);
         on_cancel
          (t$0,
           function(param)
            {waiter[1] = 0;
             var l=[0,t,0];
             return iter
                     (function(t)
                       {var _qU_=repr(t)[1];
                        if(2 === _qU_[0])
                         {var _qV_=_qU_[1],_qW_=_qV_[2];
                          if(typeof _qW_ !== "number" && 0 === _qW_[0])
                           {_qV_[2] = 0;return 0}
                          var removed=_qV_[3] + 1 | 0;
                          return 42 < removed
                                  ?(_qV_[3] = 0,_qV_[2] = cleanup(_qV_[2]),0)
                                  :(_qV_[3] = removed,0)}
                        return 0},
                      l)});
         return t$0;
        case 3:throw [0,Assert_failure,_cV_];
        default:return t}}
    var pause_hook=[0,function(_qT_){return 0}],s1=create$2(0),_cW_=[0,0];
    function wakeup_paused(param)
     {if(s1[2] === s1){_cW_[1] = 0;return 0}
      var seq=create$2(0);
      seq[1][2] = s1[2];
      s1[2][1] = seq[1];
      seq[1] = s1[1];
      s1[1][2] = seq;
      s1[1] = s1;
      s1[2] = s1;
      _cW_[1] = 0;
      var curr=seq[2];
      for(;;)
       {var _qS_=curr !== seq?1:0;
        if(_qS_)
         {if(curr[4])wakeup(curr[3],0);
          var curr$0=curr[2],curr=curr$0;
          continue}
        return _qS_}}
    function register_pause_notifier(f){pause_hook[1] = f;return 0}
    function is_sleeping(t$1)
     {var t=t$1;
      for(;;)
       {var _qR_=t[1];
        switch(_qR_[0])
         {case 2:return 1;
          case 3:var t$0=_qR_[1],t=t$0;continue;
          default:return 0}}}
    var e=[248,_cX_,caml_fresh_oo_id(0)],Full=[248,_cY_,caml_fresh_oo_id(0)];
    caml_fresh_oo_id(0);
    function new_node(param)
     {var node=[];caml_update_dummy(node,[0,node,0]);return node}
    function enqueue(e,last)
     {var _qQ_=last[1],new_last=new_node(0);
      _qQ_[2] = e;
      _qQ_[1] = new_last;
      last[1] = new_last;
      return 0}
    function enqueue$0(e,s){return enqueue(e,s[4])}
    function create$3(param)
     {var
       match$0=wait(0),
       wakener=match$0[2],
       waiter=match$0[1],
       wakener_cell=[0,wakener],
       source$0=[0,waiter,0,0],
       source$1=[2,source$0],
       last=new_node(0),
       match=wait(0),
       close=match[2],
       source=[0,source$1,close,last,[0,last]],
       close$0=source[2],
       last$0=source[4];
      function push(x)
       {if(1 - is_sleeping(close$0))throw e;
        enqueue(x,last$0);
        if(source$0[2])
         {source$0[2] = 0;
          var
           old_wakener=wakener_cell[1],
           match=wait(0),
           new_wakener=match[2],
           new_waiter=match[1];
          source$0[1] = new_waiter;
          wakener_cell[1] = new_wakener;
          wakeup_later(old_wakener,0)}
        var _qP_=0 === x?1:0;
        return _qP_?wakeup(close$0,0):_qP_}
      return [0,source,push]}
    function notify_pusher(info,last)
     {enqueue(info[5],last);
      info[5] = 0;
      var old_wakener=info[7],match=task(0),wakener=match[2],waiter=match[1];
      info[6] = waiter;
      info[7] = wakener;
      return wakeup_later(old_wakener,0)}
    make_class
     (shared,
      function(table)
       {var
         _qf_=new_variable(table,_cZ_),
         _qg_=new_variable(table,_c0_),
         _qh_=new_variable(table,_c1_),
         _qi_=new_variable(table,_c2_),
         nmeths=meths.length - 1,
         nvals=vals.length - 1,
         res=caml_make_vect(nmeths + nvals | 0,0),
         _p8_=nmeths - 1 | 0,
         _p7_=0;
        if(!(_p8_ < 0))
         {var i$0=_p7_;
          for(;;)
           {var
             _qc_=
              get_method_label(table,caml_check_bound(meths,i$0)[i$0 + 1]);
            caml_check_bound(res,i$0)[i$0 + 1] = _qc_;
            var _qd_=i$0 + 1 | 0;
            if(_p8_ !== i$0){var i$0=_qd_;continue}
            break}}
        var _p__=nvals - 1 | 0,_p9_=0;
        if(!(_p__ < 0))
         {var i=_p9_;
          for(;;)
           {var
             _qa_=i + nmeths | 0,
             _p$_=new_variable(table,caml_check_bound(vals,i)[i + 1]);
            caml_check_bound(res,_qa_)[_qa_ + 1] = _p$_;
            var _qb_=i + 1 | 0;
            if(_p__ !== i){var i=_qb_;continue}
            break}}
        var
         _qr_=res[9],
         _qj_=res[1],
         _qk_=res[2],
         _ql_=res[3],
         _qm_=res[4],
         _qn_=res[5],
         _qo_=res[6],
         _qp_=res[7],
         _qq_=res[8];
        function _qs_(self_1,x){self_1[_qf_ + 1][8] = x;return 0}
        function _qt_(self_1){return self_1[_qr_ + 1]}
        function _qu_(self_1){return 0 !== self_1[_qf_ + 1][5]?1:0}
        function _qv_(self_1){return self_1[_qf_ + 1][4]}
        function _qw_(self_1)
         {var _qN_=1 - self_1[_qr_ + 1];
          if(_qN_)
           {self_1[_qr_ + 1] = 1;
            var _qO_=self_1[_qh_ + 1][1],new_last=new_node(0);
            _qO_[2] = 0;
            _qO_[1] = new_last;
            self_1[_qh_ + 1][1] = new_last;
            if(0 !== self_1[_qf_ + 1][5])
             {self_1[_qf_ + 1][5] = 0;
              wakeup_later_result(self_1[_qf_ + 1][7],[1,e])}
            if(self_1[_qf_ + 1][2])
             {self_1[_qf_ + 1][2] = 0;
              var old_wakener=self_1[_qg_ + 1][1];
              wakeup_later(old_wakener,0)}
            return wakeup(self_1[_qi_ + 1],0)}
          return _qN_}
        function _qx_(self_1,x)
         {if(self_1[_qr_ + 1])return fail(e);
          if(0 === self_1[_qf_ + 1][5])
           {if(self_1[_qf_ + 1][3] <= self_1[_qf_ + 1][4])
             {self_1[_qf_ + 1][5] = [0,x];
              var
               _qM_=
                function(exn)
                 {if(exn === Canceled)
                   {self_1[_qf_ + 1][5] = 0;
                    var match=task(0),wakener=match[2],waiter=match[1];
                    self_1[_qf_ + 1][6] = waiter;
                    self_1[_qf_ + 1][7] = wakener;
                    return fail(exn)}
                  return fail(exn)};
              return catch$0(function(param){return self_1[_qf_ + 1][6]},_qM_)}
            enqueue([0,x],self_1[_qh_ + 1]);
            self_1[_qf_ + 1][4] = self_1[_qf_ + 1][4] + 1 | 0;
            if(self_1[_qf_ + 1][2])
             {self_1[_qf_ + 1][2] = 0;
              var
               old_wakener=self_1[_qg_ + 1][1],
               match=wait(0),
               new_wakener=match[2],
               new_waiter=match[1];
              self_1[_qf_ + 1][1] = new_waiter;
              self_1[_qg_ + 1][1] = new_wakener;
              wakeup_later(old_wakener,0)}
            return return_unit}
          return fail(Full)}
        function _qy_(self_1,size)
         {if(size < 0)invalid_arg(_c3_);
          self_1[_qf_ + 1][3] = size;
          var
           _qK_=self_1[_qf_ + 1][4] < self_1[_qf_ + 1][3]?1:0,
           _qL_=_qK_?0 !== self_1[_qf_ + 1][5]?1:0:_qK_;
          return _qL_
                  ?(self_1[_qf_ + 1][4]
                    =
                    self_1[_qf_ + 1][4]
                    +
                    1
                    |
                    0,
                    notify_pusher(self_1[_qf_ + 1],self_1[_qh_ + 1]))
                  :_qL_}
        var
         methods=
          [0,
           _qj_,
           function(self_1){return self_1[_qf_ + 1][3]},
           _ql_,
           _qy_,
           _qm_,
           _qx_,
           _qp_,
           _qw_,
           _qn_,
           _qv_,
           _qq_,
           _qu_,
           _qo_,
           _qt_,
           _qk_,
           _qs_],
         len=methods.length - 1,
         i$1=[0,0];
        for(;;)
         {if(i$1[1] < len)
           {var
             _qe_=i$1[1],
             label=caml_check_bound(methods,_qe_)[_qe_ + 1],
             next=
              function(param)
               {i$1[1]++;
                var _qJ_=i$1[1];
                return caml_check_bound(methods,_qJ_)[_qJ_ + 1]},
             clo=next(0);
            if(typeof clo === "number")
             switch(clo)
              {case 0:
                var
                 x=next(0),
                 clo$0=function(x){return function(obj){return x}}(x);
                break;
               case 1:
                var
                 n=next(0),
                 clo$0=function(n){return function(obj){return obj[n + 1]}}(n);
                break;
               case 2:
                var
                 e$0=next(0),
                 n$0=next(0),
                 clo$0=
                  function(e,n)
                    {return function(obj){return obj[e + 1][n + 1]}}
                   (e$0,n$0);
                break;
               case 3:
                var
                 n$1=next(0),
                 clo$0=
                  function(n)
                    {return function(obj){return caml_call1(obj[1][n + 1],obj)}}
                   (n$1);
                break;
               case 4:
                var
                 n$2=next(0),
                 clo$0=
                  function(n){return function(obj,x){obj[n + 1] = x;return 0}}
                   (n$2);
                break;
               case 5:
                var
                 f=next(0),
                 x$0=next(0),
                 clo$0=
                  function(f,x){return function(obj){return caml_call1(f,x)}}
                   (f,x$0);
                break;
               case 6:
                var
                 f$0=next(0),
                 n$3=next(0),
                 clo$0=
                  function(f,n)
                    {return function(obj){return caml_call1(f,obj[n + 1])}}
                   (f$0,n$3);
                break;
               case 7:
                var
                 f$1=next(0),
                 e$1=next(0),
                 n$4=next(0),
                 clo$0=
                  function(f,e,n)
                    {return function(obj)
                      {return caml_call1(f,obj[e + 1][n + 1])}}
                   (f$1,e$1,n$4);
                break;
               case 8:
                var
                 f$2=next(0),
                 n$5=next(0),
                 clo$0=
                  function(f,n)
                    {return function(obj)
                      {return caml_call1(f,caml_call1(obj[1][n + 1],obj))}}
                   (f$2,n$5);
                break;
               case 9:
                var
                 f$3=next(0),
                 x$1=next(0),
                 y=next(0),
                 clo$0=
                  function(f,x,y)
                    {return function(obj){return caml_call2(f,x,y)}}
                   (f$3,x$1,y);
                break;
               case 10:
                var
                 f$4=next(0),
                 x$2=next(0),
                 n$6=next(0),
                 clo$0=
                  function(f,x,n)
                    {return function(obj){return caml_call2(f,x,obj[n + 1])}}
                   (f$4,x$2,n$6);
                break;
               case 11:
                var
                 f$5=next(0),
                 x$3=next(0),
                 e$2=next(0),
                 n$7=next(0),
                 clo$0=
                  function(f,x,e,n)
                    {return function(obj)
                      {return caml_call2(f,x,obj[e + 1][n + 1])}}
                   (f$5,x$3,e$2,n$7);
                break;
               case 12:
                var
                 f$6=next(0),
                 x$4=next(0),
                 n$8=next(0),
                 clo$0=
                  function(f,x,n)
                    {return function(obj)
                      {return caml_call2(f,x,caml_call1(obj[1][n + 1],obj))}}
                   (f$6,x$4,n$8);
                break;
               case 13:
                var
                 f$7=next(0),
                 n$9=next(0),
                 x$5=next(0),
                 clo$0=
                  function(f,n,x)
                    {return function(obj){return caml_call2(f,obj[n + 1],x)}}
                   (f$7,n$9,x$5);
                break;
               case 14:
                var
                 f$8=next(0),
                 e$3=next(0),
                 n$10=next(0),
                 x$6=next(0),
                 clo$0=
                  function(f,e,n,x)
                    {return function(obj)
                      {return caml_call2(f,obj[e + 1][n + 1],x)}}
                   (f$8,e$3,n$10,x$6);
                break;
               case 15:
                var
                 f$9=next(0),
                 n$11=next(0),
                 x$7=next(0),
                 clo$0=
                  function(f,n,x)
                    {return function(obj)
                      {return caml_call2(f,caml_call1(obj[1][n + 1],obj),x)}}
                   (f$9,n$11,x$7);
                break;
               case 16:
                var
                 n$12=next(0),
                 x$8=next(0),
                 clo$0=
                  function(n,x)
                    {return function(obj)
                      {return caml_call2(obj[1][n + 1],obj,x)}}
                   (n$12,x$8);
                break;
               case 17:
                var
                 n$13=next(0),
                 m=next(0),
                 clo$0=
                  function(n,m)
                    {return function(obj)
                      {return caml_call2(obj[1][n + 1],obj,obj[m + 1])}}
                   (n$13,m);
                break;
               case 18:
                var
                 n$14=next(0),
                 e$4=next(0),
                 m$0=next(0),
                 clo$0=
                  function(n,e,m)
                    {return function(obj)
                      {return caml_call2(obj[1][n + 1],obj,obj[e + 1][m + 1])}}
                   (n$14,e$4,m$0);
                break;
               case 19:
                var
                 n$15=next(0),
                 m$1=next(0),
                 clo$0=
                  function(n,m)
                    {return function(obj)
                      {var _qH_=caml_call1(obj[1][m + 1],obj);
                       return caml_call2(obj[1][n + 1],obj,_qH_)}}
                   (n$15,m$1);
                break;
               case 20:
                var m$2=next(0),x$9=next(0);
                new_cache(table);
                var
                 clo$0=
                  function(m,x)
                    {return function(obj)
                      {return caml_call1(caml_get_public_method(x,m,0),x)}}
                   (m$2,x$9);
                break;
               case 21:
                var m$3=next(0),n$16=next(0);
                new_cache(table);
                var
                 clo$0=
                  function(m,n)
                    {return function(obj)
                      {var _qG_=obj[n + 1];
                       return caml_call1(caml_get_public_method(_qG_,m,0),_qG_)}}
                   (m$3,n$16);
                break;
               case 22:
                var m$4=next(0),e$5=next(0),n$17=next(0);
                new_cache(table);
                var
                 clo$0=
                  function(m,e,n)
                    {return function(obj)
                      {var _qF_=obj[e + 1][n + 1];
                       return caml_call1(caml_get_public_method(_qF_,m,0),_qF_)}}
                   (m$4,e$5,n$17);
                break;
               default:
                var m$5=next(0),n$18=next(0);
                new_cache(table);
                var
                 clo$0=
                  function(m,n)
                    {return function(obj)
                      {var _qI_=caml_call1(obj[1][n + 1],obj);
                       return caml_call1(caml_get_public_method(_qI_,m,0),_qI_)}}
                   (m$5,n$18)}
            else
             var clo$0=clo;
            method_count[1]++;
            if(caml_call2(Labs[23],label,table[4]))
             {resize$0(table,label + 1 | 0);
              caml_check_bound(table[2],label)[label + 1] = clo$0}
            else
             table[6] = [0,[0,label,clo$0],table[6]];
            i$1[1]++;
            continue}
          return function(_qD_,obj_0,_qC_,_qB_,_qA_,_qz_)
           {if(obj_0)
             var _qE_=obj_0;
            else
             {var obj=caml_obj_block(248,table[1]);
              obj[1] = table[2];
              var _qE_=caml_set_oo_id(obj)}
            _qE_[_qi_ + 1] = _qz_;
            _qE_[_qh_ + 1] = _qA_;
            _qE_[_qg_ + 1] = _qB_;
            _qE_[_qf_ + 1] = _qC_;
            _qE_[_qr_ + 1] = 0;
            return _qE_}}});
    function feed(s)
     {var _p5_=s[1];
      switch(_p5_[0])
       {case 0:
         var from=_p5_[1];
         if(is_sleeping(from[2]))return protected$0(from[2]);
         var
          _p6_=
           function(x)
            {enqueue$0(x,s);if(0 === x)wakeup(s[2],0);return return_unit},
          thread=_cP_(caml_call1(from[1],0),_p6_);
         from[2] = thread;
         return protected$0(thread);
        case 1:
         var f=_p5_[1],x=caml_call1(f,0);
         enqueue$0(x,s);
         if(0 === x)wakeup(s[2],0);
         return return_unit;
        case 2:var push=_p5_[1];push[2] = 1;return protected$0(push[1]);
        default:var push$0=_p5_[1];push$0[2] = 1;return protected$0(push$0[1])}}
    function consume(s,node)
     {var _p3_=node === s[3]?1:0;
      if(_p3_)
       {s[3] = node[1];
        var _p4_=s[1];
        if(3 === _p4_[0])
         {var info=_p4_[1];
          return 0 === info[5]
                  ?(info[4] = info[4] - 1 | 0,0)
                  :notify_pusher(info,s[4])}
        return 0}
      return _p3_}
    function iter_rec(node,f,s)
     {var node$0=node;
      for(;;)
       {if(node$0 === s[4][1])
         {var _p1_=function(param){return iter_rec(node$0,f,s)};
          return _cP_(feed(s),_p1_)}
        var _p2_=node$0[2];
        if(_p2_)
         {var x=_p2_[1];
          consume(s,node$0);
          caml_call1(f,x);
          var node$1=node$0[1],node$0=node$1;
          continue}
        return return_unit}}
    function find_rec(node,f,s)
     {var node$0=node;
      for(;;)
       {if(node$0 === s[4][1])
         {var _pZ_=function(param){return find_rec(node$0,f,s)};
          return _cP_(feed(s),_pZ_)}
        var _p0_=node$0[2];
        if(_p0_)
         {var x=_p0_[1];
          consume(s,node$0);
          var test=caml_call1(f,x);
          if(test)return return$0(_p0_);
          var node$1=node$0[1],node$0=node$1;
          continue}
        return return_none}}
    function wakeup$0(param)
     {return 1 === param
              ?(window.setTimeout(caml_js_wrap_callback(wakeup_paused),0),0)
              :0}
    register_pause_notifier(wakeup$0);
    function prerr_string$0(s){return console.log(s.toString())}
    async_exception_hook[1]
    =
    function(exn)
     {prerr_string$0(_c4_);
      prerr_string$0(to_string(exn));
      return print_backtrace(stderr)};
    var compare$4=caml_int_compare;
    function min$0(x,y){return min(x,y)}
    function incr(_pY_){_pY_[1]++;return 0}
    function raise(_pX_){throw _pX_}
    var am_testing=Base_am_testing(0);
    function failwithf(fmt)
     {return ksprintf(function(s,param){return failwith(s)},fmt)}
    function invalid_argf(fmt)
     {return ksprintf(function(s,param){return invalid_arg(s)},fmt)}
    function map$0(t,f){return map(f,t)}
    function to_int(_pW_){return _pW_}
    function unsafe_of_int(_pV_){return _pV_}
    function of_int_exn(i)
     {var _pT_=0 <= i?1:0,_pU_=_pT_?i <= 255?1:0:_pT_;
      return _pU_?i:caml_call2(failwithf(_c5_),i,0)}
    function fold_left(l$1,accu$1,f)
     {var accu=accu$1,l=l$1;
      for(;;)
       {if(l)
         {var l$0=l[2],a=l[1],accu$0=caml_call2(f,accu,a),accu=accu$0,l=l$0;
          continue}
        return accu}}
    function iter$0(t,f){return iter(f,t)}
    function rev_map(param$0,f)
     {var accu=0,param=param$0;
      for(;;)
       {if(param)
         {var
           l=param[2],
           a=param[1],
           accu$0=[0,caml_call1(f,a),accu],
           accu=accu$0,
           param=l;
          continue}
        return accu}}
    function rev(res)
     {if(res)
       {var _pS_=res[2];
        if(_pS_)
         {var rest=_pS_[2],y=_pS_[1],x=res[1];
          return rev_append(rest,[0,y,[0,x,0]])}}
      return res}
    function Folding(Hash)
     {function hash_fold_unit(s,param){return s}
      var _pl_=Hash[2],_pm_=Hash[3],_pn_=Hash[4],_po_=Hash[5];
      function as_int(f,s,x){return caml_call2(_pl_,s,caml_call1(f,x))}
      function _pp_(_pR_){return _pR_}
      function hash_fold_int32(_pP_,_pQ_){return as_int(_pp_,_pP_,_pQ_)}
      function hash_fold_char(_pN_,_pO_){return as_int(to_int,_pN_,_pO_)}
      function _pq_(param){return 0 === param?0:1}
      function hash_fold_bool(_pL_,_pM_){return as_int(_pq_,_pL_,_pM_)}
      function hash_fold_nativeint(s,x)
       {return caml_call2(_pm_,s,caml_int64_of_int32(x))}
      function hash_fold_option(hash_fold_elem,s,param)
       {if(param)
         {var x=param[1];
          return caml_call2(hash_fold_elem,caml_call2(_pl_,s,1),x)}
        return caml_call2(_pl_,s,0)}
      function hash_fold_list(hash_fold_elem,s$1,list$0)
       {var s$2=caml_call2(_pl_,s$1,length(list$0)),s=s$2,list=list$0;
        for(;;)
         {if(list)
           {var
             xs=list[2],
             x=list[1],
             s$0=caml_call2(hash_fold_elem,s,x),
             s=s$0,
             list=xs;
            continue}
          return s}}
      function hash_fold_lazy_t(hash_fold_elem,s,x)
       {var
         _pJ_=caml_obj_tag(x),
         _pK_=250 === _pJ_?x[1]:246 === _pJ_?force_lazy_block(x):x;
        return caml_call2(hash_fold_elem,s,_pK_)}
      function hash_fold_ref_frozen(hash_fold_elem,s,x)
       {return caml_call2(hash_fold_elem,s,x[1])}
      function hash_fold_array_frozen(hash_fold_elem,s$1,array)
       {var s$2=caml_call2(_pl_,s$1,array.length - 1),s=s$2,i=0;
        for(;;)
         {if(i === array.length - 1)return s;
          var
           e=array[i + 1],
           i$0=i + 1 | 0,
           s$0=caml_call2(hash_fold_elem,s,e),
           s=s$0,
           i=i$0;
          continue}}
      function hash_nativeint(x)
       {var
         _pH_=caml_call1(Hash[6],0),
         _pI_=hash_fold_nativeint(caml_call2(Hash[7],0,_pH_),x);
        return caml_call1(Hash[8],_pI_)}
      function hash_int64(x)
       {var
         _pF_=caml_call1(Hash[6],0),
         _pG_=caml_call2(_pm_,caml_call2(Hash[7],0,_pF_),x);
        return caml_call1(Hash[8],_pG_)}
      function hash_int32(x)
       {var
         _pD_=caml_call1(Hash[6],0),
         _pE_=hash_fold_int32(caml_call2(Hash[7],0,_pD_),x);
        return caml_call1(Hash[8],_pE_)}
      function hash_char(x)
       {var
         _pB_=caml_call1(Hash[6],0),
         _pC_=hash_fold_char(caml_call2(Hash[7],0,_pB_),x);
        return caml_call1(Hash[8],_pC_)}
      function hash_int(x)
       {var
         _pz_=caml_call1(Hash[6],0),
         _pA_=caml_call2(_pl_,caml_call2(Hash[7],0,_pz_),x);
        return caml_call1(Hash[8],_pA_)}
      function hash_bool(x)
       {var
         _px_=caml_call1(Hash[6],0),
         _py_=hash_fold_bool(caml_call2(Hash[7],0,_px_),x);
        return caml_call1(Hash[8],_py_)}
      function hash_string(x)
       {var
         _pv_=caml_call1(Hash[6],0),
         _pw_=caml_call2(_po_,caml_call2(Hash[7],0,_pv_),x);
        return caml_call1(Hash[8],_pw_)}
      function hash_float(x)
       {var
         _pt_=caml_call1(Hash[6],0),
         _pu_=caml_call2(_pn_,caml_call2(Hash[7],0,_pt_),x);
        return caml_call1(Hash[8],_pu_)}
      function hash_unit(x)
       {var _pr_=caml_call1(Hash[6],0),_ps_=caml_call2(Hash[7],0,_pr_);
        return caml_call1(Hash[8],_ps_)}
      return [0,
              hash_fold_nativeint,
              _pm_,
              hash_fold_int32,
              hash_fold_char,
              _pl_,
              hash_fold_bool,
              _po_,
              _pn_,
              hash_fold_unit,
              hash_fold_option,
              hash_fold_list,
              hash_fold_lazy_t,
              hash_fold_ref_frozen,
              hash_fold_array_frozen,
              hash_nativeint,
              hash_int64,
              hash_int32,
              hash_char,
              hash_int,
              hash_bool,
              hash_string,
              hash_float,
              hash_unit]}
    function alloc(param){return 0}
    function reset(opt,t)
     {if(opt)var sth=opt[1],seed=sth;else var seed=0;return seed}
    var
     For_tests=[0,compare$4,int_to_string],
     _c6_=Base_internalhash_get_hash_value;
    function _c7_(_pk_,_pj_){return Base_internalhash_fold_string(_pk_,_pj_)}
    function _c8_(_pi_,_ph_){return Base_internalhash_fold_float(_pi_,_ph_)}
    function _c9_(_pg_,_pf_){return Base_internalhash_fold_int64(_pg_,_pf_)}
    var
     Folding$0=
      Folding
       ([0,
         description,
         function(_pe_,_pd_){return Base_internalhash_fold_int(_pe_,_pd_)},
         _c9_,
         _c8_,
         _c7_,
         alloc,
         reset,
         _c6_,
         For_tests]),
     hash_fold_list=Folding$0[11],
     hash_fold_t=Folding$0[9],
     hash_fold_t$0=Folding$0[7],
     hash_fold_t$1=Folding$0[4],
     compare_char=caml_int_compare,
     unsafe_blit=caml_blit_string;
    function concat(opt,l)
     {if(opt)var sth=opt[1],sep=sth;else var sep=_c__;
      if(l)
       {var seplen=caml_ml_string_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _o__=param[2],_o$_=param[1];
            if(_o__)
             {var
               x=(caml_ml_string_length(_o$_) + seplen | 0) + acc | 0,
               acc$0=caml_greaterequal(x,acc)?x:invalid_arg(_t_),
               acc=acc$0,
               param=_o__;
              continue}
            var _pc_=caml_ml_string_length(_o$_) + acc | 0}
          else
           var _pc_=acc;
          var dst=caml_create_bytes(_pc_),pos=pos$1,param$0=l;
          for(;;)
           {if(param$0)
             {var _pa_=param$0[2],_pb_=param$0[1];
              if(_pa_)
               {caml_blit_string(_pb_,0,dst,pos,caml_ml_string_length(_pb_));
                caml_blit_string
                 (sep,0,dst,pos + caml_ml_string_length(_pb_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_string_length(_pb_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$0=_pa_;
                continue}
              caml_blit_string(_pb_,0,dst,pos,caml_ml_string_length(_pb_));
              return dst}
            return dst}}}
      return _u_}
    function compare_elt(a_001,match)
     {if(a_001 === match)return 0;
      if(0 === a_001[0])
       {var _o8_=a_001[1];
        if(0 === match[0])
         {var b_004=match[1];return caml_string_compare(_o8_,b_004)}
        return -1}
      var _o9_=a_001[1];
      if(0 === match[0])return 1;
      var b_006=match[1],a=_o9_,b=b_006;
      for(;;)
       {if(a)
         {if(b)
           {var ys=b[2],y=b[1],xs=a[2],x=a[1],res=compare_elt(x,y);
            if(res !== 0)return res;
            var a=xs,b=ys;
            continue}
          return 1}
        return b?-1:0}}
    var
     hash_fold_t$2=function _o7_(_o5_,_o6_){return _o7_.fun(_o5_,_o6_)},
     hash=function _o4_(_o3_){return _o4_.fun(_o3_)};
    caml_update_dummy
     (hash_fold_t$2,
      function(hsv,arg)
       {if(0 === arg[0])
         {var a0=arg[1],hsv$0=Base_internalhash_fold_int(hsv,0);
          return caml_call2(hash_fold_t$0,hsv$0,a0)}
        var a0$0=arg[1],hsv$1=Base_internalhash_fold_int(hsv,1);
        return caml_call3(hash_fold_list,hash_fold_t$2,hsv$1,a0$0)});
    caml_update_dummy
     (hash,
      function(x)
       {var hsv=reset(0,0);
        return Base_internalhash_get_hash_value
                (caml_call2(hash_fold_t$2,hsv,x))});
    function sexp_of_t(t){return t}
    var Of_sexp_error=[248,_c$_,caml_fresh_oo_id(0)],_da_=1;
    function must_escape(str)
     {var len=caml_ml_string_length(str),_oV_=len === 0?1:0;
      if(_oV_)return _oV_;
      var ix$3=len - 1 | 0,ix=ix$3;
      for(;;)
       {var match=caml_string_get(str,ix);
        if(92 <= match)
         {var switcher=match - 93 | 0;
          if(33 < switcher >>> 0)
           var switch$0=0 <= switcher?2:1;
          else
           {if(31 === switcher)
             {var _oW_=0 < ix?1:0;
              if(_oW_)
               {var ix$0=ix - 1 | 0,_oX_=caml_string_get(str,ix$0) === 35?1:0;
                if(!_oX_){var ix=ix$0;continue}
                var _oY_=_oX_}
              else
               var _oY_=_oW_;
              return _oY_}
            var switch$0=0}}
        else
         if(42 <= match)
          var switch$0=59 === match?1:0;
         else
          if(33 <= match)
           {var switcher$0=match - 33 | 0;
            switch(switcher$0)
             {case 2:
               var _o0_=0 < ix?1:0;
               if(_o0_)
                {var
                  ix$2=ix - 1 | 0,
                  _o1_=caml_string_get(str,ix$2) === 124?1:0;
                 if(!_o1_){var ix=ix$2;continue}
                 var _o2_=_o1_}
               else
                var _o2_=_o0_;
               return _o2_;
              case 1:
              case 7:
              case 8:var switch$0=1;break;
              default:var switch$0=0}}
          else
           var switch$0=2;
        switch(switch$0)
         {case 0:
           var _oZ_=0 < ix?1:0;
           if(_oZ_){var ix$1=ix - 1 | 0,ix=ix$1;continue}
           return _oZ_;
          case 1:return 1;
          default:return 1}}}
    function escaped(s)
     {var n=[0,0],_oL_=caml_ml_string_length(s) - 1 | 0,_oK_=0;
      if(!(_oL_ < 0))
       {var i$0=_oK_;
        for(;;)
         {var match=caml_string_unsafe_get(s,i$0);
          if(32 <= match)
           {var _oS_=match - 34 | 0;
            if(58 < _oS_ >>> 0)
             if(93 <= _oS_)var switch$0=0,switch$1=0;else var switch$1=1;
            else
             if(56 < (_oS_ - 1 | 0) >>> 0)
              var switch$0=1,switch$1=0;
             else
              var switch$1=1;
            if(switch$1)var _oT_=1,switch$0=2}
          else
           var switch$0=11 <= match?13 === match?1:0:8 <= match?1:0;
          switch(switch$0){case 0:var _oT_=4;break;case 1:var _oT_=2;break}
          n[1] = n[1] + _oT_ | 0;
          var _oU_=i$0 + 1 | 0;
          if(_oL_ !== i$0){var i$0=_oU_;continue}
          break}}
      if(n[1] === caml_ml_string_length(s))return copy(s);
      var s$0=caml_create_string(n[1]);
      n[1] = 0;
      var _oN_=caml_ml_string_length(s) - 1 | 0,_oM_=0;
      if(!(_oN_ < 0))
       {var i=_oM_;
        for(;;)
         {var a=caml_string_unsafe_get(s,i);
          if(35 <= a)
           var switch$2=92 === a?1:127 <= a?0:2;
          else
           if(32 <= a)
            var switch$2=34 <= a?1:2;
           else
            if(14 <= a)
             var switch$2=0;
            else
             switch(a)
              {case 8:
                caml_string_unsafe_set(s$0,n[1],92);
                incr(n);
                caml_string_unsafe_set(s$0,n[1],98);
                var switch$2=3;
                break;
               case 9:
                caml_string_unsafe_set(s$0,n[1],92);
                incr(n);
                caml_string_unsafe_set(s$0,n[1],116);
                var switch$2=3;
                break;
               case 10:
                caml_string_unsafe_set(s$0,n[1],92);
                incr(n);
                caml_string_unsafe_set(s$0,n[1],110);
                var switch$2=3;
                break;
               case 13:
                caml_string_unsafe_set(s$0,n[1],92);
                incr(n);
                caml_string_unsafe_set(s$0,n[1],114);
                var switch$2=3;
                break;
               default:var switch$2=0}
          switch(switch$2)
           {case 0:
             caml_string_unsafe_set(s$0,n[1],92);
             incr(n);
             var _oP_=of_int_exn(48 + (a / 100 | 0) | 0);
             caml_string_unsafe_set(s$0,n[1],_oP_);
             incr(n);
             var _oQ_=of_int_exn(48 + ((a / 10 | 0) % 10 | 0) | 0);
             caml_string_unsafe_set(s$0,n[1],_oQ_);
             incr(n);
             var _oR_=of_int_exn(48 + (a % 10 | 0) | 0);
             caml_string_unsafe_set(s$0,n[1],_oR_);
             break;
            case 1:
             caml_string_unsafe_set(s$0,n[1],92);
             incr(n);
             caml_string_unsafe_set(s$0,n[1],a);
             break;
            case 2:caml_string_unsafe_set(s$0,n[1],a);break
            }
          incr(n);
          var _oO_=i + 1 | 0;
          if(_oN_ !== i){var i=_oO_;continue}
          break}}
      return s$0}
    function esc_str(str)
     {var
       estr=escaped(str),
       elen=caml_ml_string_length(estr),
       res=caml_create_string(elen + 2 | 0);
      blit$0(estr,0,res,1,elen);
      caml_bytes_set(res,0,34);
      caml_bytes_set(res,elen + 1 | 0,34);
      return res}
    function index_of_newline(str,start)
     {try
       {var _oI_=[0,index_from_exn(str,start,10)];return _oI_}
      catch(_oJ_)
       {_oJ_ = caml_wrap_exception(_oJ_);
        if(_oJ_ === Not_found)return 0;
        throw _oJ_}}
    function mach_maybe_esc_str(str){return must_escape(str)?esc_str(str):str}
    function pp_hum_indent(indent,state,param)
     {if(0 === param[0])
       {var str=param[1];
        if(must_escape(str))
         {var match=index_of_newline(str,0);
          if(match)
           var
            index=match[1],
            _oG_=(index + 1 | 0) === caml_ml_string_length(str)?1:0;
          else
           var _oG_=1;
          if(_oG_)return pp(state,esc_str(str));
          pp_open_box(state,0);
          pp(state,_dd_);
          var index$0=0;
          for(;;)
           {var end_pos_opt=index_of_newline(str,index$0);
            if(end_pos_opt)
             var end_pos=end_pos_opt[1],end_pos$0=end_pos;
            else
             var end_pos$0=caml_ml_string_length(str);
            var next_line=sub$0(str,index$0,end_pos$0 - index$0 | 0);
            pp(state,escaped(next_line));
            if(end_pos_opt)
             {var newline_index=end_pos_opt[1];
              pp(state,_db_);
              pp_force_newline(state,0);
              pp(state,_dc_);
              var index$1=newline_index + 1 | 0,index$0=index$1;
              continue}
            pp(state,_de_);
            return pp_close_box(state,0)}}
        return pp(state,str)}
      var _oH_=param[1];
      if(_oH_)
       {var t=_oH_[2],h=_oH_[1];
        pp_open_box(state,indent);
        pp(state,_df_);
        pp_hum_indent(indent,state,h);
        var param$0=t;
        for(;;)
         {if(param$0)
           {var t$0=param$0[2],h$0=param$0[1];
            pp_print_break(state,1,0);
            pp_hum_indent(indent,state,h$0);
            var param$0=t$0;
            continue}
          pp(state,_dh_);
          return pp_close_box(state,0)}}
      return pp(state,_dg_)}
    function buffer(param){return create$0(1024)}
    function to_string_hum(indent$0,sexp)
     {if(0 === sexp[0])
       {var str=sexp[1],match=index_of_newline(str,0),_oD_=match?0:1;
        if(_oD_)return mach_maybe_esc_str(str)}
      var buf=buffer(0);
      if(indent$0)var sth=indent$0[1],indent=sth;else var indent=_da_;
      var ppf=formatter_of_buffer(buf);
      function _oC_(_oE_,_oF_){return pp_hum_indent(indent,_oE_,_oF_)}
      var fmt=param$0[1],_oB_=0;
      caml_call2
       (make_printf
         (function(ppf,acc){output_acc$0(ppf,acc);return 0},ppf,_oB_,fmt),
        _oC_,
        sexp);
      return contents(buf)}
    function message(name,fields)
     {function conv_fields(param)
       {if(param)
         {var rest=param[2],match=param[1],fsexp=match[2],fname=match[1];
          return caml_string_notequal(fname,_dj_)
                  ?[0,[1,[0,[0,fname],[0,fsexp,0]]],conv_fields(rest)]
                  :[0,fsexp,conv_fields(rest)]}
        return 0}
      return [1,[0,[0,name],conv_fields(fields)]]}
    function sexp_of_t$0(param){return _dk_}
    function sexp_of_t$1(str){return [0,str]}
    function sexp_of_t$2(c){return [0,make$0(1,c)]}
    function sexp_of_t$3(n){return [0,caml_new_string("" + n)]}
    function sexp_of_t$4(sexp_of_a,param)
     {if(param){var x=param[1];return [1,[0,caml_call1(sexp_of_a,x),0]]}
      return _dl_}
    function sexp_of_t$5(sexp_of_a,lst)
     {return [1,rev(rev_map(lst,sexp_of_a))]}
    var
     compare$5=caml_int_compare,
     Int=[0,compare$5],
     Exn_ids=_P_(Int),
     exn_id_map=[0,Exn_ids[1]];
    function clean_up_handler(slot)
     {for(;;)
       {var
         id=extension_id(slot),
         old_exn_id_map=exn_id_map[1],
         new_exn_id_map=caml_call2(Exn_ids[6],id,old_exn_id_map);
        if(exn_id_map[1] !== old_exn_id_map)continue;
        exn_id_map[1] = new_exn_id_map;
        return 0}}
    function add(opt,extension_constructor,sexp_of_exn)
     {if(opt)var sth=opt[1],finalise=sth;else var finalise=1;
      var id=extension_id(extension_constructor);
      for(;;)
       {var old_exn_id_map=exn_id_map[1],ephe=caml_ephe_create(1);
        caml_ephe_set_data(ephe,sexp_of_exn);
        caml_ephe_set_key(ephe,0,extension_constructor);
        var new_exn_id_map=caml_call3(Exn_ids[4],id,ephe,old_exn_id_map);
        if(exn_id_map[1] !== old_exn_id_map)continue;
        exn_id_map[1] = new_exn_id_map;
        return finalise
                ?caml_final_register(clean_up_handler,extension_constructor)
                :finalise}}
    function find_auto(exn)
     {var id=extension_id(extension_constructor(exn));
      try
       {var ephe=caml_call2(Exn_ids[23],id,exn_id_map[1])}
      catch(_oA_)
       {_oA_ = caml_wrap_exception(_oA_);
        if(_oA_ === Not_found)return 0;
        throw _oA_}
      var match=caml_ephe_get_data(ephe);
      if(match)
       {var sexp_of_exn=match[1];return [0,caml_call1(sexp_of_exn,exn)]}
      return 0}
    function sexp_of_exn_opt(exn){return find_auto(exn)}
    function sexp_of_exn(exn)
     {var match=sexp_of_exn_opt(exn);
      if(match){var sexp=match[1];return sexp}
      return [1,[0,[0,to_string(exn)],0]]}
    register_printer
     (function(exn)
       {var match=sexp_of_exn_opt(exn);
        if(match){var sexp=match[1];return [0,to_string_hum(_dm_,sexp)]}
        return 0});
    function of_sexp_error(what,sexp)
     {return raise([0,Of_sexp_error,[0,Failure,what],sexp])}
    function t_of_sexp(sexp)
     {if(1 === sexp[0])if(!sexp[1])return 0;return of_sexp_error(_dn_,sexp)}
    function t_of_sexp$0(sexp)
     {if(0 === sexp[0]){var str=sexp[1];return str}
      return of_sexp_error(_do_,sexp)}
    function t_of_sexp$1(sexp)
     {if(0 === sexp[0])
       {var str=sexp[1];
        if(caml_ml_string_length(str) !== 1)of_sexp_error(_dp_,sexp);
        return caml_string_get(str,0)}
      return of_sexp_error(_dq_,sexp)}
    function get_flc_error(name,param)
     {var chr=param[3],line=param[2],file=param[1];
      return [0,caml_call4(sprintf(_dr_),name,file,line,chr)]}
    function _ds_(param)
     {var handler=param[2],extension_constructor=param[1];
      return add(_dt_,extension_constructor,handler)}
    var
     _du_=0,
     _dx_=
      [0,
       [0,
        Of_sexp_error,
        function(param)
         {if(param[1] === Of_sexp_error)
           {var sexp=param[3],exc=param[2];
            return [1,[0,_dv_,[0,sexp_of_exn(exc),[0,sexp,0]]]]}
          throw [0,Assert_failure,_dw_]}],
       _du_],
     _dA_=
      [0,
       [0,
        Break,
        function(param)
         {if(param === Break)return _dy_;throw [0,Assert_failure,_dz_]}],
       _dx_],
     _dD_=
      [0,
       [0,
        Error$0,
        function(param)
         {if(param[1] === Error$0)
           {var arg=param[2];return [1,[0,_dB_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_dC_]}],
       _dA_],
     _dG_=
      [0,
       [0,
        Failure$0,
        function(param)
         {if(param === Failure$0)return _dE_;throw [0,Assert_failure,_dF_]}],
       _dD_],
     _dJ_=
      [0,
       [0,
        Empty,
        function(param)
         {if(param === Empty)return _dH_;throw [0,Assert_failure,_dI_]}],
       _dG_],
     _dM_=
      [0,
       [0,
        Scan_failure,
        function(param)
         {if(param[1] === Scan_failure)
           {var arg=param[2];return [1,[0,_dK_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_dL_]}],
       _dJ_],
     _dP_=
      [0,
       [0,
        Empty$0,
        function(param)
         {if(param === Empty$0)return _dN_;throw [0,Assert_failure,_dO_]}],
       _dM_],
     _dS_=
      [0,
       [0,
        Parse_error,
        function(param)
         {if(param === Parse_error)return _dQ_;throw [0,Assert_failure,_dR_]}],
       _dP_],
     _dV_=
      [0,
       [0,
        Undefined,
        function(param)
         {if(param === Undefined)return _dT_;throw [0,Assert_failure,_dU_]}],
       _dS_],
     _dY_=
      [0,
       [0,
        Bad,
        function(param)
         {if(param[1] === Bad)
           {var arg=param[2];return [1,[0,_dW_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_dX_]}],
       _dV_],
     _d1_=
      [0,
       [0,
        Help,
        function(param)
         {if(param[1] === Help)
           {var arg=param[2];return [1,[0,_dZ_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_d0_]}],
       _dY_],
     _d4_=
      [0,
       [0,
        Sys_error,
        function(param)
         {if(param[1] === Sys_error)
           {var arg=param[2];return [1,[0,_d2_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_d3_]}],
       _d1_],
     _d7_=
      [0,
       [0,
        Match_failure,
        function(param)
         {if(param[1] === Match_failure)
           {var arg=param[2];return get_flc_error(_d5_,arg)}
          throw [0,Assert_failure,_d6_]}],
       _d4_],
     _d__=
      [0,
       [0,
        Invalid_argument,
        function(param)
         {if(param[1] === Invalid_argument)
           {var arg=param[2];return [1,[0,_d8_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_d9_]}],
       _d7_],
     _eb_=
      [0,
       [0,
        Not_found,
        function(param)
         {if(param === Not_found)return _d$_;throw [0,Assert_failure,_ea_]}],
       _d__],
     _ee_=
      [0,
       [0,
        Failure,
        function(param)
         {if(param[1] === Failure)
           {var arg=param[2];return [1,[0,_ec_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_ed_]}],
       _eb_],
     _eh_=
      [0,
       [0,
        End_of_file,
        function(param)
         {if(param === End_of_file)return _ef_;throw [0,Assert_failure,_eg_]}],
       _ee_],
     _ek_=
      [0,
       [0,
        Exit,
        function(param)
         {if(param === Exit)return _ei_;throw [0,Assert_failure,_ej_]}],
       _eh_];
    iter$0
     ([0,
       [0,
        Assert_failure,
        function(param)
         {if(param[1] === Assert_failure)
           {var arg=param[2];return get_flc_error(_el_,arg)}
          throw [0,Assert_failure,_em_]}],
       _ek_],
      _ds_);
    function stag_no_args(loc,sexp){return of_sexp_error(_c_(loc,_en_),sexp)}
    caml_fresh_oo_id(0);
    function num_bits(param){return 0 === param?32:64}
    var s$0=get_state(0);
    init$0(137);
    var word_size=0;
    function int$0(bound)
     {if(!(1073741823 < bound))
       if(0 < bound)
        for(;;)
         {var r=bits(s$0),v=caml_mod(r,bound);
          if(((1073741823 - bound | 0) + 1 | 0) < (r - v | 0))continue;
          return v}
      return invalid_arg(_cn_)}
    function bool(param){return 0 === (bits(s$0) & 1)?1:0}
    var r=[0,_es_];
    function register(p){r[1] = [0,p,r[1]];return 0}
    function Register_pp(_ox_)
     {var _oy_=_ox_[1],_oz_=_ox_[2];
      register(_c_(_ox_[2],_et_));
      return [0,_oy_,_oz_]}
    function _eu_(_ow_){return [0,Register_pp(_ow_)[1]]}
    function _ev_(M)
     {var module_name=M[1];
      function pp$0(formatter,t){return pp(formatter,caml_call1(M[2],t))}
      return [0,Register_pp([0,pp$0,module_name])[1]]}
    var Finally=[248,_ew_,caml_fresh_oo_id(0)];
    add
     (0,
      Finally,
      function(param)
       {if(param[1] === Finally)
         {var
           v1=param[3],
           v0=param[2],
           v0$0=sexp_of_exn(v0),
           v1$0=sexp_of_exn(v1);
          return [1,[0,_ex_,[0,v0$0,[0,v1$0,0]]]]}
        throw [0,Assert_failure,_ey_]});
    var Reraised=[248,_ez_,caml_fresh_oo_id(0)];
    add
     (0,
      Reraised,
      function(param)
       {if(param[1] === Reraised)
         {var v1=param[3],v0=param[2],v0$0=[0,v0],v1$0=sexp_of_exn(v1);
          return [1,[0,_eA_,[0,v0$0,[0,v1$0,0]]]]}
        throw [0,Assert_failure,_eB_]});
    var Sexp=[248,_eC_,caml_fresh_oo_id(0)];
    add
     (0,
      Sexp,
      function(param)
       {if(param[1] === Sexp){var t=param[2];return t}
        throw [0,Assert_failure,_eD_]});
    function to_string$0(exc){return to_string_hum(_eE_,sexp_of_exn(exc))}
    function pp$0(ppf,t)
     {var match=sexp_of_exn_opt(t);
      if(match){var sexp=match[1];return pp_hum_indent(_da_,ppf,sexp)}
      return pp(ppf,to_string(t))}
    _eu_([0,pp$0,module_name]);
    function with_return(f)
     {var Return=[248,_eF_,caml_fresh_oo_id(0)],is_alive=[0,1];
      function return$0(a)
       {if(1 - is_alive[1])failwith(_eG_);
        var e=[0,Return,a];
        Base_clear_caml_backtrace_pos(0);
        throw e}
      try
       {var a$0=caml_call1(f,[0,return$0]);is_alive[1] = 0;return a$0}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        is_alive[1] = 0;
        if(exn[1] === Return){var a=exn[2];return a}
        return raise(exn)}}
    function check_pos_len_exn(pos,len,length)
     {var
       stop=pos + len | 0,
       _ov_=(pos | len | stop | length - stop | 0) < 0?1:0;
      if(_ov_)
       {if(pos < 0)caml_call2(invalid_argf(_eH_),pos,0);
        if(len < 0)caml_call2(invalid_argf(_eI_),len,0);
        var _ou_=(length - len | 0) < pos?1:0;
        return _ou_?caml_call4(invalid_argf(_eJ_),pos,len,length,0):_ou_}
      return _ov_}
    function nth_exn(t$1,n$1)
     {if(n$1 < 0)
       var match=0;
      else
       {var t=t$1,n=n$1;
        for(;;)
         {if(t)
           {var t$0=t[2],a=t[1];
            if(0 !== n){var n$0=n - 1 | 0,t=t$0,n=n$0;continue}
            var match=[0,a]}
          else
           var match=0;
          break}}
      if(match){var a$0=match[1];return a$0}
      var _ot_=length(t$1);
      return caml_call3(invalid_argf(_eK_),n$1,_ot_,0)}
    function filter(t,f)
     {var accu=0,param=t;
      for(;;)
       {if(param)
         {var l=param[2],x=param[1];
          if(caml_call1(f,x))
           {var accu$0=[0,x,accu],accu=accu$0,param=l;continue}
          var param=l;
          continue}
        return rev(accu)}}
    function count_append(l1,l2,count)
     {if(l2)
       {if(l1)
         {var _ok_=l1[2],_ol_=l1[1];
          if(_ok_)
           {var _om_=_ok_[2],_on_=_ok_[1];
            if(_om_)
             {var _oo_=_om_[2],_op_=_om_[1];
              if(_oo_)
               {var _oq_=_oo_[2],_or_=_oo_[1];
                if(_oq_)
                 {var
                   tl=_oq_[2],
                   x5=_oq_[1],
                   _os_=
                    1e3 < count
                     ?rev_append(rev(tl),l2)
                     :count_append(tl,l2,count + 1 | 0);
                  return [0,_ol_,[0,_on_,[0,_op_,[0,_or_,[0,x5,_os_]]]]]}
                return [0,_ol_,[0,_on_,[0,_op_,[0,_or_,l2]]]]}
              return [0,_ol_,[0,_on_,[0,_op_,l2]]]}
            return [0,_ol_,[0,_on_,l2]]}
          return [0,_ol_,l2]}
        return l2}
      return l1}
    function append$0(l1,l2){return count_append(l1,l2,0)}
    function count_map(f,l,ctr)
     {if(l)
       {var _ob_=l[2],_oc_=l[1];
        if(_ob_)
         {var _od_=_ob_[2],_oe_=_ob_[1];
          if(_od_)
           {var _of_=_od_[2],_og_=_od_[1];
            if(_of_)
             {var _oh_=_of_[2],_oi_=_of_[1];
              if(_oh_)
               {var
                 tl=_oh_[2],
                 x5=_oh_[1],
                 f1=caml_call1(f,_oc_),
                 f2=caml_call1(f,_oe_),
                 f3=caml_call1(f,_og_),
                 f4=caml_call1(f,_oi_),
                 f5=caml_call1(f,x5),
                 _oj_=1e3 < ctr?rev(rev_map(tl,f)):count_map(f,tl,ctr + 1 | 0);
                return [0,f1,[0,f2,[0,f3,[0,f4,[0,f5,_oj_]]]]]}
              var
               f1$0=caml_call1(f,_oc_),
               f2$0=caml_call1(f,_oe_),
               f3$0=caml_call1(f,_og_),
               f4$0=caml_call1(f,_oi_);
              return [0,f1$0,[0,f2$0,[0,f3$0,[0,f4$0,0]]]]}
            var
             f1$1=caml_call1(f,_oc_),
             f2$1=caml_call1(f,_oe_),
             f3$1=caml_call1(f,_og_);
            return [0,f1$1,[0,f2$1,[0,f3$1,0]]]}
          var f1$2=caml_call1(f,_oc_),f2$2=caml_call1(f,_oe_);
          return [0,f1$2,[0,f2$2,0]]}
        var f1$3=caml_call1(f,_oc_);
        return [0,f1$3,0]}
      return 0}
    function map$1(l,f){return count_map(f,l,0)}
    var Duplicate_found=[248,_eM_,caml_fresh_oo_id(0)];
    add
     (0,
      Duplicate_found,
      function(param)
       {if(param[1] === Duplicate_found)
         {var v1=param[3],v0$0=param[2],v0=caml_call1(v0$0,0),v1$0=[0,v1];
          return [1,[0,_eN_,[0,v0,[0,v1$0,0]]]]}
        throw [0,Assert_failure,_eO_]});
    var
     Transpose_got_lists_of_different_lengths=
      [248,_eR_,caml_fresh_oo_id(0)];
    add
     (0,
      Transpose_got_lists_of_different_lengths,
      function(param)
       {if(param[1] === Transpose_got_lists_of_different_lengths)
         {var v0=param[2],v0$0=sexp_of_t$5(sexp_of_t$3,v0);
          return [1,[0,_eS_,[0,v0$0,0]]]}
        throw [0,Assert_failure,_eT_]});
    function Make_gen(_n9_)
     {return function(Dst)
       {var unsafe_blit=Dst[3];
        function blit(src,src_pos,dst,dst_pos,len)
         {check_pos_len_exn(src_pos,len,caml_call1(_n9_[1],src));
          check_pos_len_exn(dst_pos,len,caml_call1(Dst[1],dst));
          var _oa_=0 < len?1:0;
          return _oa_?caml_call5(unsafe_blit,src,src_pos,dst,dst_pos,len):_oa_}
        function blito(src,opt,_n$_,dst,_n__,param)
         {if(opt)var sth=opt[1],src_pos=sth;else var src_pos=0;
          if(_n$_)
           var sth$0=_n$_[1],src_len=sth$0;
          else
           var src_len=caml_call1(_n9_[1],src) - src_pos | 0;
          if(_n__)var sth$1=_n__[1],dst_pos=sth$1;else var dst_pos=0;
          return blit(src,src_pos,dst,dst_pos,src_len)}
        function sub(src,pos,len)
         {check_pos_len_exn(pos,len,caml_call1(_n9_[1],src));
          var dst=caml_call2(Dst[2],len,src);
          if(0 < len)caml_call5(unsafe_blit,src,pos,dst,0,len);
          return dst}
        function subo(opt,len,src)
         {if(opt)var sth=opt[1],pos=sth;else var pos=0;
          if(len)
           var i=len[1],i$0=i;
          else
           var i$0=caml_call1(_n9_[1],src) - pos | 0;
          return sub(src,pos,i$0)}
        return [0,unsafe_blit,blit,blito,sub,subo]}}
    function _eU_(_n7_)
     {var
       _n8_=[0,_n7_[2],_n7_[1],_n7_[3]],
       _n6_=caml_call1(Make_gen([0,_n8_[1]]),_n8_);
      return [0,_n6_[2],_n6_[3],_n6_[1],_n6_[4],_n6_[5]]}
    function _eV_(Sequence)
     {function create_like(len,param){return caml_call1(Sequence[1],len)}
      var
       length=Sequence[2],
       unsafe_blit=Sequence[3],
       include=
        caml_call1(Make_gen([0,length]),[0,length,create_like,unsafe_blit]),
       unsafe_blit$0=include[1],
       blit=include[2],
       blito=include[3],
       sub=include[4],
       subo=include[5];
      return [0,blit,blito,unsafe_blit$0,sub,subo]}
    function _eW_(M){var comparator=[0,M[1],M[2]];return [0,comparator]}
    function sexp_of_t$6(t)
     {var pos_cnum=t[4],pos_bol=t[3],pos_lnum=t[2],pos_fname=t[1];
      return [0,
              concat
               (0,
                [0,
                 pos_fname,
                 [0,
                  _eY_,
                  [0,
                   caml_new_string("" + pos_lnum),
                   [0,
                    _eX_,
                    [0,caml_new_string("" + (pos_cnum - pos_bol | 0)),0]]]]])]}
    function sexp_of_t$7(param)
     {switch(param[0])
       {case 0:var v0=param[1];return [1,[0,_eZ_,[0,v0,0]]];
        case 1:var v0$0=param[1],v0$1=[0,v0$0];return [1,[0,_e0_,[0,v0$1,0]]];
        case 2:
         var v0$2=param[1],v0$3=sexp_of_exn(v0$2);
         return [1,[0,_e1_,[0,v0$3,0]]];
        case 3:var v0$4=param[1];return [1,[0,_e2_,[0,v0$4,0]]];
        case 4:
         var
          v2=param[3],
          v1=param[2],
          v0$5=param[1],
          v0$6=[0,v0$5],
          v2$0=sexp_of_t$4(sexp_of_t$6,v2);
         return [1,[0,_e3_,[0,v0$6,[0,v1,[0,v2$0,0]]]]];
        case 5:
         var v1$0=param[2],v0$7=param[1],v0$8=[0,v0$7],v1$1=sexp_of_t$7(v1$0);
         return [1,[0,_e4_,[0,v0$8,[0,v1$1,0]]]];
        case 6:
         var
          v2$1=param[3],
          v1$2=param[2],
          v0$9=param[1],
          v0$10=[0,v0$9],
          v2$2=sexp_of_t$7(v2$1);
         return [1,[0,_e5_,[0,v0$10,[0,v1$2,[0,v2$2,0]]]]];
        case 7:
         var
          v1$3=param[2],
          v0$11=param[1],
          v0$12=sexp_of_t$4(sexp_of_t$3,v0$11),
          v1$4=sexp_of_t$5(sexp_of_t$7,v1$3);
         return [1,[0,_e6_,[0,v0$12,[0,v1$4,0]]]];
        default:
         var
          v1$5=param[2],
          v0$13=param[1],
          v0$14=sexp_of_t$7(v0$13),
          v1$6=[0,v1$5];
         return [1,[0,_e7_,[0,v0$14,[0,v1$6,0]]]]}}
    function to_sexps_hum(t,ac)
     {switch(t[0])
       {case 0:return [0,sexp_of_t$7(t),ac];
        case 1:var string=t[1];return [0,[0,string],ac];
        case 2:var exn=t[1];return [0,sexp_of_exn(exn),ac];
        case 3:var sexp=t[1];return [0,sexp,ac];
        case 4:
         var here=t[3],sexp$0=t[2],tag=t[1];
         if(here)
          var here$0=here[1],_n4_=[0,sexp_of_t$6(here$0),0];
         else
          var _n4_=0;
         return [0,[1,[0,[0,tag],[0,sexp$0,_n4_]]],ac];
        case 5:
         var t$0=t[2],tag$0=t[1];
         return [0,[1,[0,[0,tag$0],to_sexps_hum(t$0,0)]],ac];
        case 6:
         var t$1=t[3],sexp$1=t[2],tag$1=t[1];
         return [0,[1,[0,[0,tag$1],[0,sexp$1,to_sexps_hum(t$1,0)]]],ac];
        case 7:
         var ts=t[2],_n5_=function(ac,t){return to_sexps_hum(t,ac)};
         return fold_left(rev(ts),ac,_n5_);
        default:
         var backtrace=t[2],t$2=t[1];
         return [0,[1,[0,to_sexp_hum(t$2),[0,[0,backtrace],0]]],ac]}}
    function to_sexp_hum(t)
     {var sexps=to_sexps_hum(t,0);
      if(sexps)if(!sexps[2]){var sexp=sexps[1];return sexp}
      return [1,sexps]}
    function protect(f)
     {try
       {var _n3_=caml_call1(f,0);return _n3_}
      catch(exn){exn = caml_wrap_exception(exn);return [0,sexp_of_exn(exn)]}}
    function of_string(message){return from_val([1,message])}
    var Exn=[248,_e8_,caml_fresh_oo_id(0)];
    add
     (0,
      Exn,
      function(param)
       {if(param[1] === Exn)
         {var t=param[2];
          return to_sexp_hum
                  (protect
                    (function(param)
                      {var _n2_=caml_obj_tag(t);
                       return 250 === _n2_?t[1]:246 === _n2_?force_lazy_block(t):t}))}
        throw [0,Assert_failure,_e9_]});
    register(_e__);
    register(_e$_);
    function error_s(sexp){return [1,from_val([3,sexp])]}
    var pass=0;
    function fail$0(message){return [0,[0,0,of_string(message)],0]}
    function length$0(_n1_){return _n1_.length - 1}
    function create_like(len,t)
     {if(0 === len)return [0];
      if(0 < t.length - 1)return caml_make_vect(len,caml_check_bound(t,0)[1]);
      throw [0,Assert_failure,_fi_]}
    _eU_([0,create_like,length$0,blit$1]);
    function max$1(x,y){return y < x?x:y}
    function height(param)
     {if(typeof param === "number")
       return 0;
      else
       {if(0 === param[0]){var height=param[4];return height}return 1}}
    function update_height(x)
     {if(typeof x !== "number" && 0 === x[0])
       {var
         left=x[1],
         old_height=x[4],
         right=x[5],
         _nY_=height(right),
         new_height=max$1(height(left),_nY_) + 1 | 0,
         _nZ_=new_height !== old_height?1:0,
         _n0_=_nZ_?(x[4] = new_height,0):_nZ_;
        return _n0_}
      throw [0,Assert_failure,_fj_]}
    function balance(tree)
     {if(typeof tree !== "number" && 0 === tree[0])
       {var left=tree[1],right=tree[5],hl=height(left),hr=height(right);
        if((hr + 2 | 0) < hl)
         {if(typeof left !== "number" && 0 === left[0])
           {var
             left_node_left=left[1],
             left_node_right=left[5],
             _nW_=height(left_node_right);
            if(_nW_ <= height(left_node_left))
             {tree[1] = left_node_right;
              left[5] = tree;
              update_height(tree);
              update_height(left);
              return left}
            if
             (typeof left_node_right !== "number" && 0 === left_node_right[0])
             {var lr_left=left_node_right[1],lr_right=left_node_right[5];
              left[5] = lr_left;
              tree[1] = lr_right;
              left_node_right[5] = tree;
              left_node_right[1] = left;
              update_height(left);
              update_height(tree);
              update_height(left_node_right);
              return left_node_right}
            throw [0,Assert_failure,_fl_]}
          throw [0,Assert_failure,_fk_]}
        if((hl + 2 | 0) < hr)
         {if(typeof right !== "number" && 0 === right[0])
           {var
             right_node_left=right[1],
             right_node_right=right[5],
             _nX_=height(right_node_left);
            if(_nX_ <= height(right_node_right))
             {tree[5] = right_node_left;
              right[1] = tree;
              update_height(tree);
              update_height(right);
              return right}
            if
             (typeof right_node_left !== "number" && 0 === right_node_left[0])
             {var rl_left=right_node_left[1],rl_right=right_node_left[5];
              right[1] = rl_right;
              tree[5] = rl_left;
              right_node_left[1] = tree;
              right_node_left[5] = right;
              update_height(right);
              update_height(tree);
              update_height(right_node_left);
              return right_node_left}
            throw [0,Assert_failure,_fn_]}
          throw [0,Assert_failure,_fm_]}
        update_height(tree);
        return tree}
      return tree}
    function set_left(r,tree)
     {var tree$0=balance(tree);
      if(typeof r !== "number" && 0 === r[0])
       {var left=r[1];
        if(left !== tree$0)r[1] = tree$0;
        return update_height(r)}
      throw [0,Assert_failure,_fo_]}
    function set_right(r,tree)
     {var tree$0=balance(tree);
      if(typeof r !== "number" && 0 === r[0])
       {var right=r[5];
        if(right !== tree$0)r[5] = tree$0;
        return update_height(r)}
      throw [0,Assert_failure,_fp_]}
    function add$0(t,replace,added,compare,k,v)
     {if(typeof t === "number")
       {added[1] = 1;return [1,k,v]}
      else
       {if(0 === t[0])
         {var left=t[1],k$0=t[2],right=t[5],c=caml_call2(compare,k,k$0);
          if(0 === c)
           {added[1] = 0;if(replace)t[3] = v}
          else
           if(c < 0)
            set_left(t,add$0(left,replace,added,compare,k,v));
           else
            set_right(t,add$0(right,replace,added,compare,k,v));
          return t}
        var k$1=t[1],c$0=caml_call2(compare,k$1,k);
        if(0 === c$0){added[1] = 0;if(replace)t[2] = v;return t}
        added[1] = 1;
        return c$0 < 0?[0,t,k,v,2,0]:[0,0,k,v,2,t]}}
    function remove_min_elt(tree)
     {if(typeof tree === "number")
       throw [0,Assert_failure,_fq_];
      else
       {if(0 === tree[0])
         {var _nT_=tree[1];
          if(typeof _nT_ === "number")
           {var right=tree[5];return right}
          else
           {if(0 === _nT_[0]){set_left(tree,remove_min_elt(_nT_));return tree}
            var _nU_=tree[2],_nV_=tree[3];
            return typeof tree[5] === "number"
                    ?[1,_nU_,_nV_]
                    :(set_left(tree,0),tree)}}
        return 0}}
    function remove(t,removed,compare,k$0)
     {if(typeof t === "number")
       {removed[1] = 0;return 0}
      else
       {if(0 === t[0])
         {var left=t[1],k$1=t[2],right=t[5],c=caml_call2(compare,k$0,k$1);
          if(0 === c)
           {removed[1] = 1;
            if(typeof left === "number")return right;
            if(typeof right === "number")return left;
            var tree=right;
            for(;;)
             {if(typeof tree === "number")
               var tree$0=0;
              else
               if(0 === tree[0])
                {var _nR_=tree[1];
                 if(typeof _nR_ !== "number"){var tree=_nR_;continue}
                 var tree$0=tree}
               else
                var tree$0=tree;
              if(typeof tree$0 === "number")
               throw [0,Assert_failure,_fr_];
              else
               {if(0 === tree$0[0])
                 {set_right(tree$0,remove_min_elt(right));
                  set_left(tree$0,left);
                  return tree$0}
                var
                 k=tree$0[1],
                 v=tree$0[2],
                 t2=balance(remove_min_elt(right)),
                 _nS_=height(t2);
                return [0,left,k,v,max$1(height(left),_nS_) + 1 | 0,t2]}}}
          return c < 0
                  ?(set_left(t,remove(left,removed,compare,k$0)),t)
                  :(set_right(t,remove(right,removed,compare,k$0)),t)}
        var k$2=t[1];
        return 0 === caml_call2(compare,k$0,k$2)
                ?(removed[1] = 1,0)
                :(removed[1] = 0,t)}}
    function fold(t,init,f)
     {var t$0=t,init$0=init;
      for(;;)
       if(typeof t$0 === "number")
        return init$0;
       else
        {if(0 === t$0[0])
          {var _nF_=t$0[1];
           if(typeof _nF_ === "number")
            {var _nI_=t$0[5],_nG_=t$0[2],_nH_=t$0[3];
             if(typeof _nI_ !== "number" && 0 !== _nI_[0])
              {var rkey=_nI_[1],rdata=_nI_[2];
               return caml_call3(f,rkey,rdata,caml_call3(f,_nG_,_nH_,init$0))}
             var switch$0=1}
           else
            if(0 === _nF_[0])
             {var _nL_=t$0[5],_nJ_=t$0[2],_nK_=t$0[3];
              if(typeof _nL_ !== "number" && 0 !== _nL_[0])
               {var rkey$0=_nL_[1],rdata$0=_nL_[2];
                return caml_call3
                        (f,
                         rkey$0,
                         rdata$0,
                         caml_call3(f,_nJ_,_nK_,fold(_nF_,init$0,f)))}
              var switch$0=0}
            else
             {var
               _nM_=_nF_[1],
               _nN_=_nF_[2],
               _nO_=t$0[2],
               _nP_=t$0[3],
               _nQ_=t$0[5];
              if(typeof _nQ_ === "number")
               return caml_call3(f,_nO_,_nP_,caml_call3(f,_nM_,_nN_,init$0));
              else
               {if(0 !== _nQ_[0])
                 {var rkey$1=_nQ_[1],rdata$1=_nQ_[2];
                  return caml_call3
                          (f,
                           rkey$1,
                           rdata$1,
                           caml_call3(f,_nO_,_nP_,caml_call3(f,_nM_,_nN_,init$0)))}
                var switch$0=0}}
           if(!switch$0)
            if(typeof _nF_ !== "number" && 1 === _nF_[0])
             {var
               lkey=_nF_[1],
               ldata=_nF_[2],
               key$0=t$0[2],
               data$0=t$0[3],
               right$0=t$0[5],
               init$2=
                caml_call3(f,key$0,data$0,caml_call3(f,lkey,ldata,init$0)),
               t$0=right$0,
               init$0=init$2;
              continue}
           var
            key=t$0[2],
            data=t$0[3],
            right=t$0[5],
            init$1=caml_call3(f,key,data,fold(_nF_,init$0,f)),
            t$0=right,
            init$0=init$1;
           continue}
         var key$1=t$0[1],data$1=t$0[2];
         return caml_call3(f,key$1,data$1,init$0)}}
    function iter$1(t,f)
     {var t$0=t;
      for(;;)
       if(typeof t$0 === "number")
        return 0;
       else
        {if(0 === t$0[0])
          {var left=t$0[1],key=t$0[2],data=t$0[3],right=t$0[5];
           iter$1(left,f);
           caml_call2(f,key,data);
           var t$0=right;
           continue}
         var key$0=t$0[1],data$0=t$0[2];
         return caml_call2(f,key$0,data$0)}}
    function t_of_sexp$2(sexp)
     {if(0 === sexp[0])
       {var _nB_=sexp[1];
        if(caml_string_notequal(_nB_,_fs_))
         {if(caml_string_notequal(_nB_,_ft_))
           {if(caml_string_notequal(_nB_,_fu_))
             if(caml_string_notequal(_nB_,_fv_))
              if(caml_string_notequal(_nB_,_fw_))
               if(caml_string_notequal(_nB_,_fx_))
                var switch$0=1,switch$1=0,switch$2=0;
               else
                var switch$2=1;
              else
               var switch$1=1,switch$2=0;
             else
              var switch$0=0,switch$1=0,switch$2=0;
            else
             var switch$2=1;
            if(switch$2)return 1}
          else
           var switch$1=1;
          if(switch$1)return 2}
        else
         var switch$0=0;
        if(!switch$0)return 0}
      else
       {var _nC_=sexp[1];
        if(!_nC_)return of_sexp_error(_c_(loc,_ep_),sexp);
        var _nD_=_nC_[1];
        if(0 !== _nD_[0])return of_sexp_error(_c_(loc,_eo_),sexp);
        var _nE_=_nD_[1];
        if(caml_string_notequal(_nE_,_fy_))
         {if(caml_string_notequal(_nE_,_fz_))
           {if(caml_string_notequal(_nE_,_fA_))
             if(caml_string_notequal(_nE_,_fB_))
              if(caml_string_notequal(_nE_,_fC_))
               if(caml_string_notequal(_nE_,_fD_))
                var switch$3=1,switch$4=0,switch$5=0;
               else
                var switch$5=1;
              else
               var switch$4=1,switch$5=0;
             else
              var switch$3=0,switch$4=0,switch$5=0;
            else
             var switch$5=1;
            if(switch$5)return stag_no_args(loc,sexp)}
          else
           var switch$4=1;
          if(switch$4)return stag_no_args(loc,sexp)}
        else
         var switch$3=0;
        if(!switch$3)return stag_no_args(loc,sexp)}
      return of_sexp_error(_c_(loc,_eq_),sexp)}
    function sexp_of_t$8(param)
     {switch(param){case 0:return _fE_;case 1:return _fF_;default:return _fG_}}
    function compare$6(a_001,b_002)
     {if(a_001 === b_002)return 0;
      switch(a_001)
       {case 0:return 0 === b_002?0:-1;
        case 1:switch(b_002){case 1:return 0;case 2:return -1}break;
        default:switch(b_002){case 1:return 1;case 2:return 0}}
      return 1}
    function hash_fold_t$3(hsv,arg)
     {switch(arg)
       {case 0:return Base_internalhash_fold_int(hsv,0);
        case 1:return Base_internalhash_fold_int(hsv,1);
        default:return Base_internalhash_fold_int(hsv,2)}}
    function of_string$0(s){return t_of_sexp$2([0,s])}
    function to_string$1(t){return t_of_sexp$0(sexp_of_t$8(t))}
    function to_int$0(param)
     {switch(param){case 0:return -1;case 1:return 0;default:return 1}}
    function Validate(T)
     {function name(t)
       {var sexp=caml_call1(T[2],t);
        if(0 === sexp[0]){var str=sexp[1];return mach_maybe_esc_str(str)}
        var buf=buffer(0);
        function loop(may_need_space,param)
         {if(0 === param[0])
           {var
             str=param[1],
             str$0=mach_maybe_esc_str(str),
             new_may_need_space=str$0 === str?1:0,
             new_may_need_space$0=
              may_need_space?new_may_need_space:may_need_space;
            if(new_may_need_space$0)add_char(buf,32);
            add_string(buf,str$0);
            return new_may_need_space}
          var _nA_=param[1];
          if(_nA_)
           {var t=_nA_[2],h=_nA_[1];
            add_char(buf,40);
            var
             may_need_space$0=loop(0,h),
             may_need_space$1=may_need_space$0,
             param$0=t;
            for(;;)
             {if(param$0)
               {var
                 t$0=param$0[2],
                 h$0=param$0[1],
                 may_need_space$2=loop(may_need_space$1,h$0),
                 may_need_space$1=may_need_space$2,
                 param$0=t$0;
                continue}
              add_char(buf,41);
              return 0}}
          add_string(buf,_di_);
          return 0}
        loop(0,sexp);
        return contents(buf)}
      function validate_bound(min,max,t)
       {var _nz_=T[1];
        if(typeof min === "number")
         var _no_=0;
        else
         {var lower=min[1];
          if(typeof max === "number")
           var _no_=0;
          else
           var upper=max[1],_no_=0 < caml_call2(_nz_,lower,upper)?1:0}
        if(_no_)failwith(_fa_);
        if(typeof min === "number")
         var _np_=1;
        else
         if(0 === min[0])
          var incl=min[1],_np_=caml_call2(_nz_,incl,t) <= 0?1:0;
         else
          var excl=min[1],_np_=caml_call2(_nz_,excl,t) < 0?1:0;
        if(_np_)
         {if(typeof max === "number")
           var _nq_=1;
          else
           if(0 === max[0])
            var incl$0=max[1],_nq_=caml_call2(_nz_,t,incl$0) <= 0?1:0;
           else
            var excl$0=max[1],_nq_=caml_call2(_nz_,t,excl$0) < 0?1:0;
          var match=_nq_?1:2}
        else
         var match=0;
        switch(match)
         {case 0:
           if(typeof min === "number")
            throw [0,Assert_failure,_fb_];
           else
            {if(0 === min[0])
              {var incl$1=min[1],_nr_=name(incl$1),_ns_=name(t);
               return fail$0(caml_call2(sprintf(_fc_),_ns_,_nr_))}
             var excl$1=min[1],_nt_=name(excl$1),_nu_=name(t);
             return fail$0(caml_call2(sprintf(_fd_),_nu_,_nt_))}
          case 1:return pass;
          default:
           if(typeof max === "number")
            throw [0,Assert_failure,_fe_];
           else
            {if(0 === max[0])
              {var incl$2=max[1],_nv_=name(incl$2),_nw_=name(t);
               return fail$0(caml_call2(sprintf(_ff_),_nw_,_nv_))}
             var excl$2=max[1],_nx_=name(excl$2),_ny_=name(t);
             return fail$0(caml_call2(sprintf(_fg_),_ny_,_nx_))}}}
      function validate_lbound(min,t){return validate_bound(min,0,t)}
      function validate_ubound(max,t){return validate_bound(0,max,t)}
      return [0,validate_lbound,validate_ubound,validate_bound]}
    function Make(T)
     {var
       sexp_of_t=T[2],
       include$0=_eW_(T),
       comparator=include$0[1],
       compare=comparator[1];
      function _nh_(a,b){return 0 < caml_call2(compare,a,b)?1:0}
      function _ni_(a,b){return caml_call2(compare,a,b) < 0?1:0}
      function _nj_(a,b){return 0 <= caml_call2(compare,a,b)?1:0}
      function _nk_(a,b){return caml_call2(compare,a,b) <= 0?1:0}
      function equal(a,b){return 0 === caml_call2(compare,a,b)?1:0}
      function _nl_(a,b){return caml_call2(compare,a,b) !== 0?1:0}
      function min(t$0,t){return _nk_(t$0,t)?t$0:t}
      function max(t$0,t){return _nj_(t$0,t)?t$0:t}
      function descending(t$0,t){return caml_call2(compare,t,t$0)}
      function between(t,low,high)
       {var _nn_=_nk_(low,t);return _nn_?_nk_(t,high):_nn_}
      function clamp_unchecked(t,min,max)
       {return _ni_(t,min)?min:_nk_(t,max)?t:max}
      function clamp_exn(t,min,max)
       {if(_nk_(min,max))return clamp_unchecked(t,min,max);
        throw [0,Assert_failure,_fH_]}
      function clamp(t,min,max)
       {if(_nh_(min,max))
         {var _nm_=[0,[0,_fI_,caml_call1(sexp_of_t,max)],0];
          return error_s
                  (message(_fK_,[0,[0,_fJ_,caml_call1(sexp_of_t,min)],_nm_]))}
        return [0,clamp_unchecked(t,min,max)]}
      var
       include=Validate([0,compare,sexp_of_t]),
       validate_lbound=include[1],
       validate_ubound=include[2],
       validate_bound=include[3];
      return [0,
              _nj_,
              _nk_,
              equal,
              _nh_,
              _ni_,
              _nl_,
              equal,
              compare,
              min,
              max,
              compare,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound]}
    function one_ulp(dir,t)
     {var
       match=
        t != t
         ?0
         :t == 0
           ?_fL_
           :0 < t
             ?[0,caml_int64_bits_of_float(t)]
             :[0,caml_int64_neg(caml_int64_bits_of_float(-t))];
      if(match)
       {var
         x=match[1],
         _ng_=759637122 <= dir?_fN_:_fO_,
         x$0=caml_int64_add(x,_ng_);
        return caml_greaterequal(x$0,_fM_)
                ?caml_int64_float_of_bits(x$0)
                :-caml_int64_float_of_bits(caml_int64_neg(x$0))}
      return nan}
    function upper_bound_for_int(num_bits)
     {var exp=num_bits - 1 | 0;return one_ulp(759637122,Math.pow(2,exp))}
    function is_x_minus_one_exact(x)
     {return 1
             -
             caml_equal
              (caml_int64_bits_of_float(x),caml_int64_bits_of_float(x - 1))}
    function lower_bound_for_int(num_bits)
     {var exp=num_bits - 1 | 0,min_int_as_float=-Math.pow(2,exp);
      if(53 <= (num_bits - 1 | 0))
       {if(is_x_minus_one_exact(min_int_as_float))
         throw [0,Assert_failure,_fP_];
        return min_int_as_float}
      if(is_x_minus_one_exact(min_int_as_float))
       return one_ulp(19067,min_int_as_float - 1);
      throw [0,Assert_failure,_fQ_]}
    bool(0);
    function _fR_(T)
     {var
       hash_fold_t=T[2],
       hash=T[3],
       t_of_sexp=T[4],
       sexp_of_t=T[5],
       of_string=T[6],
       to_string=T[7],
       _m$_=Make([0,T[1],T[5]]),
       equal=_m$_[7],
       compare=_m$_[8],
       min=_m$_[9],
       max=_m$_[10],
       ascending=_m$_[11],
       descending=_m$_[12],
       between=_m$_[13],
       clamp_exn=_m$_[14],
       clamp=_m$_[15],
       comparator=_m$_[16],
       validate_lbound=_m$_[17],
       validate_ubound=_m$_[18],
       validate_bound=_m$_[19],
       _na_=_m$_[1],
       _nb_=_m$_[2],
       _nc_=_m$_[3],
       _nd_=_m$_[4],
       _ne_=_m$_[5],
       _nf_=_m$_[6],
       include=_ev_([0,T[8],T[7]]),
       pp=include[1];
      return [0,
              hash_fold_t,
              hash,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              _na_,
              _nb_,
              _nc_,
              _nd_,
              _ne_,
              _nf_,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              pp]}
    function hash$0(x){return x}
    function to_string$2(t){return make$0(1,t)}
    function of_string$1(s)
     {var match=caml_ml_string_length(s);
      return 1 === match?caml_string_get(s,0):caml_call2(failwithf(_fS_),s,0)}
    _fR_
     ([0,
       compare_char,
       hash_fold_t$1,
       hash$0,
       t_of_sexp$1,
       sexp_of_t$2,
       of_string$1,
       to_string$2,
       module_name$1]);
    to_list(init(256,unsafe_of_int));
    caml_fresh_oo_id(0);
    var Set_min_elt_exn_of_empty_set=[248,_fT_,caml_fresh_oo_id(0)];
    add
     (0,
      Set_min_elt_exn_of_empty_set,
      function(param)
       {if(param === Set_min_elt_exn_of_empty_set)return _fU_;
        throw [0,Assert_failure,_fV_]});
    var Set_max_elt_exn_of_empty_set=[248,_fW_,caml_fresh_oo_id(0)];
    add
     (0,
      Set_max_elt_exn_of_empty_set,
      function(param)
       {if(param === Set_max_elt_exn_of_empty_set)return _fX_;
        throw [0,Assert_failure,_fY_]});
    var include=_eW_([0,compare,sexp_of_t$1]),comparator=include[1];
    function equal(t1,t2){return 0 === caml_string_compare(t1,t2)?1:0}
    function compare$7(s1,s2)
     {return s1 === s2
              ?0
              :with_return
                (function(r)
                  {var
                    _m8_=
                     min$0(caml_ml_string_length(s1),caml_ml_string_length(s2))
                     -
                     1
                     |
                     0,
                    _m7_=0;
                   if(!(_m8_ < 0))
                    {var i=_m7_;
                     for(;;)
                      {var
                        _m9_=lowercase(caml_string_unsafe_get(s2,i)),
                        other=
                         caml_int_compare
                          (lowercase(caml_string_unsafe_get(s1,i)),_m9_);
                       if(0 !== other)caml_call1(r[1],other);
                       var _m__=i + 1 | 0;
                       if(_m8_ !== i){var i=_m__;continue}
                       break}}
                   return caml_int_compare
                           (caml_ml_string_length(s1),caml_ml_string_length(s2))})}
    Make([0,compare$7,sexp_of_t$1]);
    var
     create$4=caml_create_string,
     length$1=caml_ml_string_length,
     include$0=_eV_([0,create$4,length$1,unsafe_blit]),
     sub$1=include$0[4];
    function to_string$3(x){return x}
    var
     include$1=Validate([0,compare,sexp_of_t$1]),
     validate_lbound=include$1[1],
     validate_ubound=include$1[2],
     validate_bound=include$1[3],
     ascending=caml_string_compare;
    function descending(x,y){return caml_string_compare(y,x)}
    var
     _fZ_=caml_string_greaterequal,
     _f0_=caml_string_lessequal,
     _f1_=caml_string_equal,
     _f2_=caml_string_greaterthan,
     _f3_=caml_string_lessthan,
     _f4_=caml_string_notequal;
    function min$1(x,y){return caml_string_lessthan(x,y)?x:y}
    function max$2(x,y){return caml_string_greaterthan(x,y)?x:y}
    function between(t,low,high)
     {var _m6_=caml_string_lessequal(low,t);
      return _m6_?caml_string_lessequal(t,high):_m6_}
    function clamp_unchecked(t,min,max)
     {return caml_string_lessthan(t,min)
              ?min
              :caml_string_lessequal(t,max)?t:max}
    function clamp_exn(t,min,max)
     {if(caml_string_lessequal(min,max))return clamp_unchecked(t,min,max);
      throw [0,Assert_failure,_f5_]}
    function clamp(t,min,max)
     {return caml_string_greaterthan(min,max)
              ?error_s
                (message(_f8_,[0,[0,_f7_,[0,min]],[0,[0,_f6_,[0,max]],0]]))
              :[0,clamp_unchecked(t,min,max)]}
    function convert_failure(x,a,b,to_string)
     {var _m5_=caml_call1(to_string,x);
      return caml_call4(failwithf(_f9_),a,b,_m5_,0)}
    var num_bits_nativeint=num_bits(word_size);
    function int_to_int32_exn(x)
     {return 1?x:convert_failure(x,_f$_,_f__,int_to_string)}
    var
     int_to_int64=caml_int64_of_int32,
     min$2=caml_int64_of_int32(-2147483648),
     max$3=caml_int64_of_int32(2147483647);
    function int64_to_int_exn(x)
     {var
       _m3_=caml_int64_compare(min$2,x) <= 0?1:0,
       _m4_=_m3_?caml_int64_compare(x,max$3) <= 0?1:0:_m3_;
      return _m4_
              ?caml_int64_to_int32(x)
              :convert_failure(x,_gb_,_ga_,int64_to_string)}
    if(32 <= num_bits_nativeint)
     {var int_to_nativeint=function(_m2_){return _m2_};
      num_bits_nativeint <= 32;
      if(32 <= num_bits_nativeint)
       {num_bits_nativeint <= 32;
        if(num_bits_nativeint <= 64)
         {64 <= num_bits_nativeint;
          var
           min$3=caml_int64_shift_right(min_int64,1),
           max$4=caml_int64_shift_right(max_int64,1),
           int32_positive_overflow_bounds=_ge_.slice();
          map$0(int32_positive_overflow_bounds,function(_m1_){return _m1_});
          var
           _gh_=
            function(X)
             {function _mM_(x,y)
               {if(caml_call2(X[11],y,X[18]))
                 {var _mZ_=caml_call1(X[4],y),_m0_=caml_call1(X[4],x);
                  caml_call3(invalid_argf(_gf_),_m0_,_mZ_,0)}
                var rval=caml_call2(X[20],x,y);
                return caml_call2(X[14],rval,X[18])
                        ?caml_call2(X[5],rval,y)
                        :rval}
              var one=caml_call1(X[19],1);
              function _mN_(x,y)
               {if(caml_call2(X[11],y,X[18]))
                 {var _mV_=caml_call1(X[4],y),_mW_=caml_call1(X[4],x);
                  caml_call3(invalid_argf(_gg_),_mW_,_mV_,0)}
                if(caml_call2(X[14],x,X[18]))
                 {var
                   _mX_=caml_call2(X[5],x,one),
                   _mY_=caml_call2(X[8],_mX_,y);
                  return caml_call2(X[6],_mY_,one)}
                return caml_call2(X[8],x,y)}
              function _mO_(x,y)
               {var _mU_=caml_call1(X[2],y);return caml_call1(X[2],x) / _mU_}
              function round_down(i,modulus)
               {var _mT_=_mM_(i,modulus);return caml_call2(X[6],i,_mT_)}
              function round_up(i,modulus)
               {var remainder=_mM_(i,modulus);
                if(caml_call2(X[12],remainder,X[18]))return i;
                var _mS_=caml_call2(X[5],i,modulus);
                return caml_call2(X[6],_mS_,remainder)}
              function round_towards_zero(i,to_multiple_of)
               {return caml_call2(X[12],i,X[18])
                        ?X[18]
                        :caml_call2(X[13],i,X[18])
                          ?round_down(i,to_multiple_of)
                          :round_up(i,to_multiple_of)}
              function round_nearest(i,modulus)
               {var
                 remainder=_mM_(i,modulus),
                 _mP_=caml_call1(X[19],2),
                 _mQ_=caml_call2(X[7],remainder,_mP_);
                if(caml_call2(X[14],_mQ_,modulus))
                 return caml_call2(X[6],i,remainder);
                var _mR_=caml_call2(X[6],i,remainder);
                return caml_call2(X[5],_mR_,modulus)}
              function round(opt,i,to_multiple_of)
               {if(opt)var sth=opt[1],dir=sth;else var dir=857423934;
                return 857423934 <= dir
                        ?1003109192 <= dir
                          ?round_towards_zero(i,to_multiple_of)
                          :round_nearest(i,to_multiple_of)
                        :759637122 <= dir
                          ?round_down(i,to_multiple_of)
                          :round_up(i,to_multiple_of)}
              return [0,
                      _mM_,
                      _mN_,
                      _mO_,
                      round,
                      round_towards_zero,
                      round_down,
                      round_up,
                      round_nearest]},
           non_positive_argument=
            function(param){return caml_call1(invalid_argf(_gi_),0)},
           floor_pow2=
            function(x)
             {if(x <= 0)non_positive_argument(0);
              var
               x$0=x | x >>> 1 | 0,
               x$1=x$0 | x$0 >>> 2 | 0,
               x$2=x$1 | x$1 >>> 4 | 0,
               x$3=x$2 | x$2 >>> 8 | 0,
               x$4=x$3 | x$3 >>> 16 | 0,
               x$5=x$4 | x$4 >>> 32 | 0;
              return x$5 - (x$5 >>> 1 | 0) | 0};
          _fR_
           ([0,
             compare$6,
             hash_fold_t$3,
             to_int$0,
             t_of_sexp$2,
             sexp_of_t$8,
             of_string$0,
             to_string$1,
             module_name$0]);
          var
           of_string$2=
            function(s)
             {try
               {var _mK_=caml_int_of_string(s);return _mK_}
              catch(_mL_){return caml_call2(failwithf(_gj_),s,0)}},
           float_lower_bound=lower_bound_for_int(num_bits_int),
           float_upper_bound=upper_bound_for_int(num_bits_int),
           of_int=function(_mJ_){return _mJ_},
           to_int$1=
            function(f)
             {if(float_lower_bound <= f)
               if(f <= float_upper_bound)return f | 0;
              return caml_call2(invalid_argf(_gk_),f + 0,0)},
           min$4=function(x,y){return x < y?x:y},
           _gl_=function(x,y){return y <= x?1:0},
           _gm_=function(x,y){return x <= y?1:0},
           _gn_=function(x,y){return x === y?1:0},
           _go_=function(x,y){return y < x?1:0},
           _gp_=function(x,y){return x < y?1:0},
           _gq_=function(x,y){return x !== y?1:0},
           zero$2=0,
           of_int_exn$0=function(i){return i},
           abs$3=function(x){return abs(x)},
           _gr_=function(x,y){return x + y | 0},
           _gs_=function(x,y){return x - y | 0},
           _gt_=function(x,y){return caml_mul(x,y)},
           _gu_=caml_div,
           neg=function(x){return -x | 0},
           rem=caml_mod;
          _ev_([0,module_name$2,int_to_string]);
          _gh_
           ([0,
             to_int$1,
             of_int,
             of_string$2,
             int_to_string,
             _gr_,
             _gs_,
             _gt_,
             _gu_,
             neg,
             _gl_,
             _gm_,
             _gn_,
             _go_,
             _gp_,
             _gq_,
             abs$3,
             neg,
             zero$2,
             of_int_exn$0,
             rem]);
          var
           maybe_set_recording=
            function(param)
             {try
               {caml_sys_getenv(_gv_)}
              catch(_mI_){return caml_record_backtrace(1)}
              return 0},
           initialize_module=function(param){return maybe_set_recording(0)},
           wrap_exn=
            function(x)
             {var
               _mG_=caml_int64_compare(min$3,x) <= 0?1:0,
               _mH_=_mG_?caml_int64_compare(x,max$4) <= 0?1:0:_mG_;
              if(!_mH_)convert_failure(x,_gd_,_gc_,int64_to_string);
              return caml_int64_mul(x,_gw_)},
           wrap_modulo=function(x){return caml_int64_mul(x,_gx_)},
           add$1=caml_int64_add,
           sub$2=caml_int64_sub,
           neg$0=caml_int64_neg,
           abs$4=function(x){return abs$1(x)};
          wrap_exn(_gy_);
          var
           shift_left=caml_int64_shift_left,
           mul=
            function(a,b)
             {return caml_int64_mul(a,caml_int64_shift_right(b,1))},
           div=function(a,b){return wrap_modulo(caml_int64_div(a,b))},
           rem$0=caml_int64_mod,
           of_int64_exn=function(t){return wrap_exn(t)},
           invalid_str=
            function(x){return failwith(caml_call1(sprintf(_gz_),x))},
           sign_and_signedness=
            function(x)
             {var len=caml_ml_string_length(x);
              if(0 < len)
               {var match=caml_string_get(x,0),switcher=match - 43 | 0;
                if(2 < switcher >>> 0)
                 var switch$0=0;
                else
                 {switch(switcher)
                   {case 0:var _mF_=_gA_,switch$1=1;break;
                    case 1:var switch$0=0,switch$1=0;break;
                    default:var _mF_=_gB_,switch$1=1}
                  if(switch$1)var pos=_mF_[1],sign=_mF_[2],switch$0=1}
                if(!switch$0)var pos=0,sign=4003188}
              else
               var pos=0,sign=4003188;
              if((pos + 2 | 0) < len)
               {var
                 c1=caml_string_get(x,pos),
                 match$0=caml_string_get(x,pos + 1 | 0);
                if(48 === c1)
                 {var switcher$0=match$0 - 48 | 0;
                  return 9 < switcher$0 >>> 0?[0,sign,0]:[0,sign,1]}
                return [0,sign,1]}
              return [0,sign,1]},
           to_string$4=
            function(x){return int64_to_string(caml_int64_shift_right(x,1))},
           of_string$3=
            function(str)
             {try
               {var
                 match=sign_and_signedness(str),
                 signedness=match[2],
                 sign=match[1];
                if(signedness)
                 var _mC_=of_int64_exn(caml_int64_of_string(str));
                else
                 {var
                   pos_str=
                    3901488 === sign
                     ?caml_call3(sub$1,str,1,caml_ml_string_length(str) - 1 | 0)
                     :str,
                   int64=caml_int64_of_string(pos_str);
                  if(caml_lessthan(int64,_gC_))invalid_str(str);
                  var
                   int63=wrap_modulo(int64),
                   _mD_=3901488 === sign?caml_int64_neg(int63):int63,
                   _mC_=_mD_}
                return _mC_}
              catch(_mE_){return invalid_str(str)}},
           float_lower_bound$0=lower_bound_for_int(63),
           float_upper_bound$0=upper_bound_for_int(63);
          wrap_exn(minus_one);
          var
           one$0=wrap_exn(one),
           zero$3=wrap_exn(zero$0),
           num_bits$0=63,
           to_float=
            function(x)
             {return caml_int64_to_float(caml_int64_shift_right(x,1))},
           of_float=
            function(t)
             {if(float_lower_bound$0 <= t)
               if(t <= float_upper_bound$0)
                return wrap_modulo(caml_int64_of_float(t));
              return caml_call2(invalid_argf(_gD_),t + 0,0)},
           _gE_=caml_greaterequal,
           _gF_=caml_lessequal,
           _gG_=caml_equal,
           _gH_=caml_greaterthan,
           _gI_=caml_lessthan,
           _gJ_=caml_notequal,
           of_int_exn$1=function(x){return wrap_exn(caml_int64_of_int32(x))},
           to_string$5=function(x){return to_string$4(x)};
          _ev_([0,module_name$3,to_string$5]);
          _gh_
           ([0,
             of_float,
             to_float,
             of_string$3,
             to_string$4,
             add$1,
             sub$2,
             mul,
             div,
             neg$0,
             _gE_,
             _gF_,
             _gG_,
             _gH_,
             _gI_,
             _gJ_,
             abs$4,
             neg$0,
             zero$3,
             of_int_exn$1,
             rem$0]);
          var
           of_string$4=caml_int64_of_string,
           float_lower_bound$1=lower_bound_for_int(64),
           float_upper_bound$1=upper_bound_for_int(64),
           rem$1=caml_int64_mod,
           neg$1=caml_int64_neg,
           to_float$0=caml_int64_to_float,
           of_float$0=
            function(f)
             {if(float_lower_bound$1 <= f)
               if(f <= float_upper_bound$1)return caml_int64_of_float(f);
              return caml_call2(invalid_argf(_gK_),f + 0,0)};
          _ev_([0,module_name$4,int64_to_string]);
          _gh_
           ([0,
             of_float$0,
             to_float$0,
             of_string$4,
             int64_to_string,
             caml_int64_add,
             caml_int64_sub,
             caml_int64_mul,
             caml_int64_div,
             neg$1,
             caml_greaterequal,
             caml_lessequal,
             caml_equal,
             caml_greaterthan,
             caml_lessthan,
             caml_notequal,
             abs$1,
             neg$1,
             zero$0,
             int_to_int64,
             rem$1]);
          var
           to_string$6=
            function(x)
             {var
               y=caml_format_float(_gM_,x),
               y$0=caml_float_of_string(y) == x?y:caml_format_float(_gN_,x),
               l=caml_ml_string_length(y$0),
               i=0;
              for(;;)
               {if(l <= i)return _c_(y$0,_gL_);
                var
                 match=caml_string_get(y$0,i),
                 switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
                if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
                return y$0}};
          lower_bound_for_int(num_bits_int);
          var
           min$5=
            function(x,y){if(x == x)if(y == y)return x < y?x:y;return nan},
           max$5=
            function(x,y){if(x == x)if(y == y)return y < x?x:y;return nan};
          lower_bound_for_int(num_bits$0);
          var
           exponent_mask64=
            caml_int64_sub(caml_int64_shift_left(one,11),one);
          int64_to_int_exn(exponent_mask64);
          sub$2(shift_left(one$0,52),one$0);
          _ev_([0,module_name$5,to_string$6]);
          var
           compare_key=function(t){return t[5][2]},
           ensure_mutation_allowed=
            function(t){var _mB_=1 - t[6];return _mB_?failwith(_gO_):_mB_},
           max_table_length=floor_pow2(max_length),
           slot=
            function(t,key)
             {var hash=caml_call1(t[5][1],key);
              return hash & (t[1].length - 1 - 1 | 0)},
           add_worker=
            function(t$0,replace,key,data)
             {var
               i=slot(t$0,key),
               t$1=caml_check_bound(t$0[1],i)[i + 1],
               added=t$0[3];
              added[1] = 0;
              var
               compare=compare_key(t$0),
               t=add$0(t$1,replace,added,compare,key,data),
               new_root=added[1]?balance(t):t;
              if(added[1])t$0[2] = t$0[2] + 1 | 0;
              var
               _mz_=1 - (new_root === t$1?1:0),
               _mA_=_mz_?caml_check_bound(t$0[1],i)[i + 1] = new_root:_mz_;
              return _mA_},
           set=
            function(t,key,data)
             {ensure_mutation_allowed(t);
              add_worker(t,1,key,data);
              var
               len=t[1].length - 1,
               should_grow=len < t[2]?1:0,
               _ms_=should_grow?t[4]:should_grow;
              if(_ms_)
               {var
                 new_array_length=min$4(len * 2 | 0,max_table_length),
                 _mt_=len < new_array_length?1:0;
                if(_mt_)
                 {var
                   new_table=caml_make_vect(new_array_length,0),
                   old_table=t[1];
                  t[1] = new_table;
                  t[2] = 0;
                  var
                   f=function(key,data){return add_worker(t,1,key,data)},
                   _mv_=old_table.length - 1 - 1 | 0,
                   _mu_=0;
                  if(!(_mv_ < 0))
                   {var i=_mu_;
                    for(;;)
                     {iter$1(caml_check_bound(old_table,i)[i + 1],f);
                      var _my_=i + 1 | 0;
                      if(_mv_ !== i){var i=_my_;continue}
                      break}}
                  var _mw_=0}
                else
                 var _mw_=_mt_;
                var _mx_=_mw_}
              else
               var _mx_=_ms_;
              return _mx_},
           find_and_call=
            function(t$2,key,if_found,if_not_found)
             {var
               _mr_=slot(t$2,key),
               t$3=caml_check_bound(t$2[1],_mr_)[_mr_ + 1];
              if(typeof t$3 === "number")
               return caml_call1(if_not_found,key);
              else
               {if(0 === t$3[0])
                 {var compare=compare_key(t$2),t=t$3;
                  for(;;)
                   if(typeof t === "number")
                    return caml_call1(if_not_found,key);
                   else
                    {if(0 === t[0])
                      {var
                        left=t[1],
                        k=t[2],
                        v=t[3],
                        right=t[5],
                        c=caml_call2(compare,key,k);
                       if(0 === c)return caml_call1(if_found,v);
                       if(c < 0)
                        if(typeof left === "number")
                         return caml_call1(if_not_found,key);
                        else
                         {if(0 === left[0])
                           {var
                             left$0=left[1],
                             k$0=left[2],
                             v$0=left[3],
                             right$0=left[5],
                             c$0=caml_call2(compare,key,k$0);
                            if(0 === c$0)return caml_call1(if_found,v$0);
                            var t$0=c$0 < 0?left$0:right$0,t=t$0;
                            continue}
                          var k$1=left[1],v$1=left[2];
                          return 0 === caml_call2(compare,key,k$1)
                                  ?caml_call1(if_found,v$1)
                                  :caml_call1(if_not_found,key)}
                       if(typeof right === "number")
                        return caml_call1(if_not_found,key);
                       else
                        {if(0 === right[0])
                          {var
                            left$1=right[1],
                            k$2=right[2],
                            v$2=right[3],
                            right$1=right[5],
                            c$1=caml_call2(compare,key,k$2);
                           if(0 === c$1)return caml_call1(if_found,v$2);
                           var t$1=c$1 < 0?left$1:right$1,t=t$1;
                           continue}
                         var k$3=right[1],v$3=right[2];
                         return 0 === caml_call2(compare,key,k$3)
                                 ?caml_call1(if_found,v$3)
                                 :caml_call1(if_not_found,key)}}
                     var k$4=t[1],v$4=t[2];
                     return 0 === caml_call2(compare,key,k$4)
                             ?caml_call1(if_found,v$4)
                             :caml_call1(if_not_found,key)}}
                var k$5=t$3[1],v$5=t$3[2];
                return 0 === caml_call2(compare_key(t$2),k$5,key)
                        ?caml_call1(if_found,v$5)
                        :caml_call1(if_not_found,key)}},
           if_found=function(v){return [0,v]},
           if_not_found=function(param){return 0},
           find=
            function(t,key){return find_and_call(t,key,if_found,if_not_found)},
           remove$0=
            function(t,key)
             {ensure_mutation_allowed(t);
              var
               i=slot(t,key),
               t$0=caml_check_bound(t[1],i)[i + 1],
               added_or_removed=t[3];
              added_or_removed[1] = 0;
              var
               compare=compare_key(t),
               new_root=balance(remove(t$0,added_or_removed,compare,key));
              if(1 - (t$0 === new_root?1:0))
               caml_check_bound(t[1],i)[i + 1] = new_root;
              var
               _mp_=added_or_removed[1],
               _mq_=_mp_?(t[2] = t[2] - 1 | 0,0):_mp_;
              return _mq_},
           fold$0=
            function(t,init,f)
             {if(0 === t[2])return init;
              var n=t[1].length - 1,acc=[0,init],m=t[6];
              try
               {t[6] = 0;
                var _mn_=n - 1 | 0,_mm_=0;
                if(!(_mn_ < 0))
                 {var i=_mm_;
                  for(;;)
                   {var bucket=t[1][i + 1];
                    if(typeof bucket !== "number")
                     if(0 === bucket[0])
                      acc[1] = fold(bucket,acc[1],f);
                     else
                      {var key=bucket[1],data=bucket[2];
                       acc[1] = caml_call3(f,key,data,acc[1])}
                    var _mo_=i + 1 | 0;
                    if(_mn_ !== i){var i=_mo_;continue}
                    break}}}
              catch(exn)
               {exn = caml_wrap_exception(exn);t[6] = m;return raise(exn)}
              t[6] = m;
              return acc[1]},
           iteri=
            function(t,f)
             {if(0 === t[2])return 0;
              var n=t[1].length - 1,m=t[6];
              try
               {t[6] = 0;
                var _mk_=n - 1 | 0,_mj_=0;
                if(!(_mk_ < 0))
                 {var i=_mj_;
                  for(;;)
                   {var bucket=t[1][i + 1];
                    if(typeof bucket !== "number")
                     if(0 === bucket[0])
                      iter$1(bucket,f);
                     else
                      {var key=bucket[1],data=bucket[2];caml_call2(f,key,data)}
                    var _ml_=i + 1 | 0;
                    if(_mk_ !== i){var i=_ml_;continue}
                    break}}}
              catch(exn)
               {exn = caml_wrap_exception(exn);t[6] = m;return raise(exn)}
              t[6] = m;
              return 0},
           if_found$0=function(v){return v},
           if_not_found$0=function(param){return raise(Not_found)},
           find_exn=
            function(t,key)
             {return find_and_call(t,key,if_found$0,if_not_found$0)},
           find_or_add=
            function(t,id,default$0)
             {var match=find(t,id);
              if(match){var x=match[1];return x}
              var default$1=caml_call1(default$0,0);
              set(t,id,default$1);
              return default$1},
           create$5=
            function(m,growth_allowed$0,size$1,param)
             {var hashable=[0,m[3],m[1],m[2]];
              if(growth_allowed$0)
               var sth=growth_allowed$0[1],growth_allowed=sth;
              else
               var growth_allowed=1;
              if(size$1)var sth$0=size$1[1],size$0=sth$0;else var size$0=128;
              var
               x$6=1,
               _mi_=size$0 < 1?x$6:size$0,
               x$7=min$4(_mi_,max_table_length);
              if(x$7 <= 0)non_positive_argument(0);
              var
               x=x$7 - 1 | 0,
               x$0=x | x >>> 1 | 0,
               x$1=x$0 | x$0 >>> 2 | 0,
               x$2=x$1 | x$1 >>> 4 | 0,
               x$3=x$2 | x$2 >>> 8 | 0,
               x$4=x$3 | x$3 >>> 16 | 0,
               x$5=x$4 | x$4 >>> 32 | 0,
               size=x$5 + 1 | 0;
              return [0,
                      caml_make_vect(size,0),
                      0,
                      [0,0],
                      growth_allowed,
                      hashable,
                      1]},
           of_string$5=caml_int_of_string,
           float_lower_bound$2=lower_bound_for_int(32),
           float_upper_bound$2=upper_bound_for_int(32),
           rem$2=caml_mod,
           neg$2=function(_mh_){return -_mh_ | 0},
           to_float$1=function(_mg_){return _mg_},
           of_float$1=
            function(f)
             {if(float_lower_bound$2 <= f)
               if(f <= float_upper_bound$2)return f | 0;
              return caml_call2(invalid_argf(_gP_),f + 0,0)},
           _gQ_=caml_greaterequal,
           _gR_=caml_lessequal,
           _gS_=caml_equal,
           _gT_=caml_greaterthan,
           _gU_=caml_lessthan,
           _gV_=caml_notequal,
           _gW_=caml_div,
           _gX_=function(_mf_,_me_){return caml_mul(_mf_,_me_)},
           _gY_=function(_md_,_mc_){return _md_ - _mc_ | 0},
           _gZ_=function(_mb_,_ma_){return _mb_ + _ma_ | 0};
          _ev_([0,module_name$6,int32_to_string]);
          _gh_
           ([0,
             of_float$1,
             to_float$1,
             of_string$5,
             int32_to_string,
             _gZ_,
             _gY_,
             _gX_,
             _gW_,
             neg$2,
             _gQ_,
             _gR_,
             _gS_,
             _gT_,
             _gU_,
             _gV_,
             abs$0,
             neg$2,
             zero,
             int_to_int32_exn,
             rem$2]);
          var
           of_string$6=caml_int_of_string,
           num_bits$1=num_bits(word_size),
           float_lower_bound$3=lower_bound_for_int(num_bits$1),
           float_upper_bound$3=upper_bound_for_int(num_bits$1),
           rem$3=caml_mod,
           neg$3=function(_l$_){return -_l$_ | 0},
           to_float$2=function(_l__){return _l__},
           of_float$2=
            function(f)
             {if(float_lower_bound$3 <= f)
               if(f <= float_upper_bound$3)return f | 0;
              return caml_call2(invalid_argf(_g0_),f + 0,0)},
           _g1_=caml_greaterequal,
           _g2_=caml_lessequal,
           _g3_=caml_equal,
           _g4_=caml_greaterthan,
           _g5_=caml_lessthan,
           _g6_=caml_notequal,
           _g7_=caml_div,
           _g8_=function(_l9_,_l8_){return caml_mul(_l9_,_l8_)},
           _g9_=function(_l7_,_l6_){return _l7_ - _l6_ | 0},
           _g__=function(_l5_,_l4_){return _l5_ + _l4_ | 0};
          _ev_([0,module_name$7,nativeint_to_string]);
          _gh_
           ([0,
             of_float$2,
             to_float$2,
             of_string$6,
             nativeint_to_string,
             _g__,
             _g9_,
             _g8_,
             _g7_,
             neg$3,
             _g1_,
             _g2_,
             _g3_,
             _g4_,
             _g5_,
             _g6_,
             abs$2,
             neg$3,
             zero$1,
             int_to_nativeint,
             rem$3]);
          Make([0,compare_elt,sexp_of_t]);
          var
           hash$1=function(x){return 0},
           compare$8=function(param,_l3_){return 0},
           of_string$7=
            function(param)
             {return caml_string_notequal(param,_g$_)?failwith(_ha_):0},
           to_string$7=function(param){return _hb_};
          _fR_
           ([0,
             compare$8,
             hash_fold_t,
             hash$1,
             t_of_sexp,
             sexp_of_t$0,
             of_string$7,
             to_string$7,
             module_name$8]);
          initialize_module(0);
          var Unix_error=[248,_hc_,caml_fresh_oo_id(0)];
          register_exception(_hf_,[0,Unix_error,0,_he_,_hd_]);
          register_printer
           (function(param)
             {if(param[1] === Unix_error)
               {var s=param[4],s$0=param[3],e=param[2];
                if(typeof e === "number")
                 {var _l2_=e;
                  if(34 <= _l2_)
                   switch(_l2_)
                    {case 34:var msg=_hP_;break;
                     case 35:var msg=_hQ_;break;
                     case 36:var msg=_hR_;break;
                     case 37:var msg=_hS_;break;
                     case 38:var msg=_hT_;break;
                     case 39:var msg=_hU_;break;
                     case 40:var msg=_hV_;break;
                     case 41:var msg=_hW_;break;
                     case 42:var msg=_hX_;break;
                     case 43:var msg=_hY_;break;
                     case 44:var msg=_hZ_;break;
                     case 45:var msg=_h0_;break;
                     case 46:var msg=_h1_;break;
                     case 47:var msg=_h2_;break;
                     case 48:var msg=_h3_;break;
                     case 49:var msg=_h4_;break;
                     case 50:var msg=_h5_;break;
                     case 51:var msg=_h6_;break;
                     case 52:var msg=_h7_;break;
                     case 53:var msg=_h8_;break;
                     case 54:var msg=_h9_;break;
                     case 55:var msg=_h__;break;
                     case 56:var msg=_h$_;break;
                     case 57:var msg=_ia_;break;
                     case 58:var msg=_ib_;break;
                     case 59:var msg=_ic_;break;
                     case 60:var msg=_id_;break;
                     case 61:var msg=_ie_;break;
                     case 62:var msg=_if_;break;
                     case 63:var msg=_ig_;break;
                     case 64:var msg=_ih_;break;
                     case 65:var msg=_ii_;break;
                     case 66:var msg=_ij_;break;
                     default:var msg=_ik_}
                  else
                   switch(_l2_)
                    {case 0:var msg=_hg_;break;
                     case 1:var msg=_hi_;break;
                     case 2:var msg=_hj_;break;
                     case 3:var msg=_hk_;break;
                     case 4:var msg=_hl_;break;
                     case 5:var msg=_hm_;break;
                     case 6:var msg=_hn_;break;
                     case 7:var msg=_ho_;break;
                     case 8:var msg=_hp_;break;
                     case 9:var msg=_hq_;break;
                     case 10:var msg=_hr_;break;
                     case 11:var msg=_hs_;break;
                     case 12:var msg=_ht_;break;
                     case 13:var msg=_hu_;break;
                     case 14:var msg=_hv_;break;
                     case 15:var msg=_hw_;break;
                     case 16:var msg=_hx_;break;
                     case 17:var msg=_hy_;break;
                     case 18:var msg=_hz_;break;
                     case 19:var msg=_hA_;break;
                     case 20:var msg=_hB_;break;
                     case 21:var msg=_hC_;break;
                     case 22:var msg=_hD_;break;
                     case 23:var msg=_hE_;break;
                     case 24:var msg=_hF_;break;
                     case 25:var msg=_hG_;break;
                     case 26:var msg=_hH_;break;
                     case 27:var msg=_hI_;break;
                     case 28:var msg=_hJ_;break;
                     case 29:var msg=_hK_;break;
                     case 30:var msg=_hL_;break;
                     case 31:var msg=_hM_;break;
                     case 32:var msg=_hN_;break;
                     default:var msg=_hO_}}
                else
                 var x=e[1],msg=caml_call1(sprintf(_il_),x);
                return [0,caml_call3(sprintf(_hh_),msg,s$0,s)]}
              return 0});
          unix_inet_addr_of_string(_im_);
          unix_inet_addr_of_string(_in_);
          try
           {unix_inet_addr_of_string(_je_)}
          catch(_l1_)
           {_l1_ = caml_wrap_exception(_l1_);
            if(_l1_[1] !== Failure)throw _l1_}
          try
           {unix_inet_addr_of_string(_jd_)}
          catch(_l0_)
           {_l0_ = caml_wrap_exception(_l0_);
            if(_l0_[1] !== Failure)throw _l0_}
          create$1(0,7);
          var
           Shutdown=[248,_io_,caml_fresh_oo_id(0)],
           debug=
            function(f)
             {return ksprintf(function(s){return console.log(s.toString())},f)},
           error=
            function(f)
             {return ksprintf
                      (function(s){return console.error(s.toString())},f)},
           raise_s=
            function(s)
             {return caml_call1(raise_js_error,new error_constr(s.toString()))},
           raise$0=function(e){return raise_s(to_string$0(e))},
           failwithf$0=function(f){return ksprintf(raise_s,f)},
           _ip_=caml_js_to_string(window.location.host);
          caml_call1(sprintf(_iq_),_ip_);
          var
           value_exn=function(t){return t === empty?failwith(_ir_):t},
           delete$0=
            function(xs,x,equal)
             {return filter
                      (xs,function(x$0){return 1 - caml_call2(equal,x$0,x)})},
           bring_to_front=
            function(xs,x,equal){return [0,x,delete$0(xs,x,equal)]},
           func=
            function(t,f)
             {function f$0(x)
               {try
                 {var _lZ_=caml_call1(f,x);return _lZ_}
                catch(e)
                 {e = caml_wrap_exception(e);
                  var _lY_=to_string$0(e);
                  caml_call1(error(_is_),_lY_);
                  return 0}}
              return iter_rec(t[3],f$0,t)},
           Id=
            function(M)
             {function create(param)
               {var _lW_=int$0(1e8),_lX_=M[1];
                return caml_call2(sprintf(_it_),_lX_,_lW_)}
              return [0,
                      hash_fold_t$0,
                      Base_hash_string,
                      t_of_sexp$0,
                      sexp_of_t$1,
                      to_string$3,
                      _fZ_,
                      _f0_,
                      _f1_,
                      _f2_,
                      _f3_,
                      _f4_,
                      equal,
                      ascending,
                      min$1,
                      max$2,
                      ascending,
                      descending,
                      between,
                      clamp_exn,
                      clamp,
                      comparator,
                      validate_lbound,
                      validate_ubound,
                      validate_bound,
                      pp,
                      create,
                      to_string$3]},
           Client_id=Id([0,name]),
           Shape_id=Id([0,name$0]),
           flip=function(f,x,y){return caml_call2(f,y,x)},
           zero$4=0,
           add_event_listener=
            function(elt,event$0,f)
             {function f$0(ev)
               {try
                 {caml_call1(f,ev)}
                catch(exn)
                 {exn = caml_wrap_exception(exn);
                  if(exn === Shutdown)
                   raise$0(Shutdown);
                  else
                   {var _lV_=to_string$0(exn);caml_call1(error(_iu_),_lV_)}}
                return capt}
              function h(e)
               {if(1 - (e == no_handler?1:0))
                 {var res=f$0(e);
                  if(1 - (res | 0))e.preventDefault();
                  return res}
                var e$0=event,res$0=f$0(e$0);
                if(1 - (res$0 | 0))e$0.returnValue = res$0;
                return res$0}
              if(elt.addEventListener === empty)
               {var
                 ev="on".concat(event$0),
                 callback=
                  function(e)
                   {var _lS_=[0,h,e,[0]];
                    return function(_lT_,_lU_)
                     {return caml_js_call(_lS_,_lT_,_lU_)}};
                elt.attachEvent(ev,callback)}
              else
               elt.addEventListener(event$0,h,capt);
              return 0},
           top_level=
            function(f)
             {return add_event_listener
                      (window,
                       load,
                       function(param)
                        {return async(function(param){return catch$0(f,raise$0)})})},
           Id$0=Id([0,name$1]),
           insert=
            function(t,x,xs)
             {var seq=x[2];
              if(xs)
               {var xs$0=xs[2],x$0=xs[1],seq$0=x$0[2];
                if(seq < seq$0)return [0,x,[0,x$0,xs$0]];
                var _lR_=t[2];
                caml_call1(debug(_iw_),_lR_);
                return [0,x$0,insert(t,x,xs$0)]}
              return [0,x,0]};
          caml_js_eval_string(_iy_);
          var
           of_array=
            function(a)
             {return caml_js_from_array(map$0(a,caml_js_from_array))},
           coeffs=
            function(t){return map$0(caml_js_to_array(t),caml_js_to_array)},
           inv=function(m){return math.inv(m)},
           zero$5=0,
           create_float=function(x,y){return [0,x,y,1]},
           create$6=function(x,y){return create_float(x,y)},
           coords=function(param){var y=param[2],x=param[1];return [0,x,y]},
           x=function(param){var x=param[1];return x},
           y=function(param){var y=param[2];return y},
           p=create_float(0,0),
           _iz_=
            function(t1,t2)
             {var x=t1[1] - t2[1],y=t1[2] - t2[2];return create_float(x,y)},
           _iA_=
            function(t1,t2)
             {var x=t1[1] + t2[1],y=t1[2] + t2[2];return create_float(x,y)},
           scale=
            function(param,by)
             {var z=param[3],y=param[2],x=param[1];return [0,x * by,y * by,z]},
           get=
            function(t,i,j)
             {return value_exn
                      (flip(array_get,j,value_exn(flip(array_get,i,t))))},
           to_string$8=
            function(t)
             {function c(_lP_,_lQ_){return get(t,_lP_,_lQ_)}
              var
               _lG_=c(2,2),
               _lH_=c(2,1),
               _lI_=c(2,0),
               _lJ_=c(1,2),
               _lK_=c(1,1),
               _lL_=c(1,0),
               _lM_=c(0,2),
               _lN_=c(0,1),
               _lO_=c(0,0);
              return caml_call9
                      (sprintf(_iB_),_lO_,_lN_,_lM_,_lL_,_lK_,_lJ_,_lI_,_lH_,_lG_)},
           _iC_=function(t1,t2){return math.multiply(t2,t1)},
           translate=
            function(v)
             {var match=coords(v),y=match[2],x=match[1];
              return of_array([0,[254,1,0,x],[254,0,1,y],[254,0,0,1]])},
           m=translate(p),
           apply=
            function(t,match)
             {var v2=match[3],v1=match[2],v0=match[1];
              function c(_lE_,_lF_){return get(t,_lE_,_lF_)}
              function coord(i)
               {var _lC_=c(i,2) * v2,_lD_=c(i,1) * v1;
                return c(i,0) * v0 + _lD_ + _lC_}
              var z=coord(2),y=coord(1),x=coord(0);
              return [0,x / z,y / z,1]},
           suitable_for_context2d_exn=
            function(t)
             {function c(_lA_,_lB_){return get(t,_lA_,_lB_)}
              if(c(2,0) == 0)if(c(2,1) == 0)if(c(2,2) == 1)return 0;
              var _lz_=to_string$8(t);
              return caml_call2(failwithf$0(_iD_),_lz_,0)},
           _iE_=
            function(t1,t2)
             {var _ly_=_iA_(t1[4],t2[4]);
              return [0,t1[1] * t2[1],t1[2] * t2[2],t1[3] + t2[3],_ly_]},
           _iF_=1,
           _iG_=1,
           translate$0=
            function(translation){return [0,_iG_,_iF_,zero$5,translation]},
           scale$0=
            function(scale_x,scale_y){return [0,scale_x,scale_y,zero$5,p]},
           matrix=
            function(t)
             {var
               _lw_=translate(t[4]),
               _lx_=t[3],
               _lv_=
                of_array
                 ([0,
                   [254,Math.cos(_lx_),Math.sin(_lx_),0],
                   [254,-Math.sin(_lx_),Math.cos(_lx_),0],
                   [254,0,0,1]]);
              return _iC_
                      (_iC_
                        (of_array([0,[254,t[1],0,0],[254,0,t[2],0],[254,0,0,1]]),
                         _lv_),
                       _lw_)},
           white=[0,255,255,255,1],
           black=[0,0,0,0,1],
           red=[0,255,0,0,1],
           green=[0,0,255,0,1],
           blue=[0,0,0,255,1],
           magenta=[0,255,0,255,1],
           cyan=[0,0,255,255,1],
           yellow=[0,255,255,0,1],
           to_string$9=
            function(param)
             {var a=param[4],b=param[3],g=param[2],r=param[1];
              return caml_call4(sprintf(_iH_),r,g,b,a)},
           interpolate=
            function(ts,fraction)
             {if(ts)
               {if(ts[2])
                 {if(fraction <= 0)return hd_exn(ts);
                  if(1 <= fraction)
                   {var list=ts;
                    for(;;)
                     {if(list)
                       {var _lq_=list[2],_lr_=list[1];
                        if(_lq_){var list=_lq_;continue}
                        return _lr_}
                      return raise([0,Invalid_argument,_eL_])}}
                  var
                   segment_length=1 / (length(ts) - 1 | 0),
                   fraction$0=fraction % segment_length / segment_length,
                   segment_number=
                    to_int$1(Math.floor(fraction / segment_length)),
                   t1=nth_exn(ts,segment_number),
                   t2=nth_exn(ts,segment_number + 1 | 0),
                   i=
                    function(n1,n2)
                     {return to_int$1((1 - fraction$0) * n1 + fraction$0 * n2)},
                   _ls_=(1 - fraction$0) * t1[4] + fraction$0 * t2[4],
                   _lt_=i(t1[3],t2[3]),
                   _lu_=i(t1[2],t2[2]);
                  return [0,i(t1[1],t2[1]),_lu_,_lt_,_ls_]}
                var t=ts[1];
                return t}
              return white},
           create$7=function(id){return caml_call1(sprintf(_iL_),id)},
           id=function(t){return t[1]},
           coords$0=function(t){var p=hd_exn(t[2]);return p[2]},
           _iM_=Base_hash_string,
           is_inside=
            function(v,target)
             {var match=coords(v),y=match[2],x=match[1],_lm_=0 <= x?1:0;
              if(_lm_)
               {var _ln_=x <= target.clientWidth?1:0;
                if(_ln_)
                 {var _lo_=0 <= y?1:0;
                  if(_lo_)return y <= target.clientHeight?1:0;
                  var _lp_=_lo_}
                else
                 var _lp_=_ln_}
              else
               var _lp_=_lm_;
              return _lp_},
           action=
            function(target,t,kind)
             {var
               position=
                create$6
                 (t.clientX - target.offsetLeft | 0,
                  t.clientY - target.offsetTop | 0),
               x=t.which;
              if(x === empty)
               {var match=t.button,switcher=match - 1 | 0;
                if(3 < switcher >>> 0)
                 var switch$0=0;
                else
                 switch(switcher)
                  {case 0:var _ll_=1,switch$0=1;break;
                   case 1:var _ll_=3,switch$0=1;break;
                   case 2:var switch$0=0;break;
                   default:var _ll_=2,switch$0=1}
                if(!switch$0)var _ll_=0;
                var match$0=_ll_}
              else
               var match$0=x;
              switch(match$0)
               {case 0:var button=-922086728;break;
                case 1:var button=-944764921;break;
                case 2:var button=-866200747;break;
                default:var button=-379319332}
              var
               id=create$7(1),
               changed_touches=
                is_inside(position,target)?[0,[0,id,position],0]:0;
              return [0,kind,changed_touches,button]},
           action$0=
            function(target,t,kind)
             {var
               changed_touches$0=t.changedTouches,
               i$2=changed_touches$0.length;
              if(i$2 < 0)caml_call2(invalid_argf(_eP_),i$2,0);
              var i=i$2,accum=0;
              for(;;)
               {if(0 <= i)
                 {if(0 === i)
                   {var l=accum,accum$1=0;
                    for(;;)
                     {if(l)
                       {var
                         tl=l[2],
                         hd=l[1],
                         touch=value_exn(hd),
                         position=
                          create$6
                           (touch.clientX - target.offsetLeft | 0,
                            touch.clientY - target.offsetTop | 0),
                         id=create$7(touch.identifier),
                         match=is_inside(position,target)?[0,[0,id,position]]:0;
                        if(match)
                         {var x=match[1],accum$2=[0,x,accum$1],l=tl,accum$1=accum$2;
                          continue}
                        var l=tl;
                        continue}
                      var changed_touches=rev(accum$1);
                      return [0,kind,changed_touches,338892735]}}
                  var
                   i$0=i - 1 | 0,
                   accum$0=[0,changed_touches$0.item(i$0),accum],
                   i$1=i - 1 | 0,
                   i=i$1,
                   accum=accum$0;
                  continue}
                throw [0,Assert_failure,_eQ_]}},
           create$8=
            function(id)
             {var e=document.getElementById(id.toString());
              if(e == no_handler)
               var _lk_=no_handler;
              else
               var
                _lj_=e.tagName.toLowerCase() === "canvas"?e:no_handler,
                _lk_=_lj_;
              var
               canvas=
                _lk_ == no_handler?caml_call1(failwithf$0(_iv_),id):_lk_;
              canvas.width = canvas.offsetWidth;
              canvas.height = canvas.offsetHeight;
              return canvas.getContext(d)},
           canvas_actions=
            function(t)
             {var
               target=t.canvas,
               match=create$3(0),
               write=match[2],
               stream=match[1];
              function write$0(x){return caml_call1(write,[0,x])}
              add_event_listener
               (target,
                mousedown,
                function(ev){return write$0(action(target,ev,-1032980382))});
              add_event_listener
               (target,
                mouseup,
                function(ev){return write$0(action(target,ev,26203))});
              add_event_listener
               (target,
                mousemove,
                function(ev){return write$0(action(target,ev,-933174511))});
              add_event_listener
               (target,
                touchstart,
                function(ev)
                 {preventDefault(ev);
                  return write$0(action$0(target,ev,-1032980382))});
              add_event_listener
               (target,
                touchend,
                function(ev)
                 {preventDefault(ev);
                  return write$0(action$0(target,ev,26203))});
              add_event_listener
               (target,
                touchmove,
                function(ev)
                 {preventDefault(ev);
                  return write$0(action$0(target,ev,-933174511))});
              return stream},
           width=function(t){return t.canvas.clientWidth},
           height$0=function(t){return t.canvas.clientHeight},
           move_to=
            function(t,p)
             {var match=coords(p),y=match[2],x=match[1];return t.moveTo(x,y)},
           set_fill_color=
            function(t,color)
             {return t.fillStyle = to_string$9(color).toString()},
           stroke_without_transform=
            function(t)
             {t.save();
              suitable_for_context2d_exn(m);
              var m$0=coeffs(m);
              function c(i,j)
               {return caml_check_bound(caml_check_bound(m$0,i)[i + 1],j)
                        [j + 1]}
              var _le_=c(1,2),_lf_=c(0,2),_lg_=c(1,1),_lh_=c(0,1),_li_=c(1,0);
              t.setTransform(c(0,0),_li_,_lh_,_lg_,_lf_,_le_);
              t.stroke();
              return t.restore()},
           p1=create$6(-50,50),
           p2=create$6(0,-50),
           p3=create$6(50,50),
           l=
            [0,
             [0,[0,p1,[0,p2,[0,p3,0]]]],
             [0,3,[0,0,[0,2,[0,1,[0,4,[0,[1,[0,p1,[0,p2,[0,p3,0]]]],0]]]]]]],
           default_line_width=40,
           width$0=200,
           height$1=200,
           max_diff=
            function(vs,f)
             {var match=map$1(vs,f);
              if(match)
               {var
                 xs=match[2],
                 x=match[1],
                 max=fold_left(xs,x,max$5),
                 min=fold_left(xs,x,min$5);
                return max - min}
              return 0},
           render_zigzag=
            function(ctx,vs)
             {if(vs)
               {var vs$1=vs[2],v$0=vs[1];
                ctx.save();
                ctx.beginPath();
                move_to(ctx,v$0);
                var param=vs$1;
                for(;;)
                 {if(param)
                   {var
                     vs$0=param[2],
                     v=param[1],
                     match=coords(v),
                     y=match[2],
                     x=match[1];
                    ctx.lineTo(x,y);
                    var param=vs$0;
                    continue}
                  stroke_without_transform(ctx);
                  return ctx.restore()}}
              return 0},
           render=
            function(t,ctx)
             {var t$0=t;
              for(;;)
               if(typeof t$0 === "number")
                switch(t$0)
                 {case 0:return ctx.fillRect(-200 / 2,-200 / 2,200,200);
                  case 1:
                   ctx.beginPath();
                   ctx.arc(p[1],p[2],100,0,2 * math$0.PI,false$0);
                   return ctx.fill();
                  case 2:
                   var y$0=p[2];
                   ctx.save();
                   ctx.beginPath();
                   ctx.moveTo(-1e4,y$0);
                   ctx.lineTo(1e4,y$0);
                   stroke_without_transform(ctx);
                   return ctx.restore();
                  case 3:
                   var x$0=p[1];
                   ctx.save();
                   ctx.beginPath();
                   ctx.moveTo(x$0,-1e4);
                   ctx.lineTo(x$0,1e4);
                   stroke_without_transform(ctx);
                   return ctx.restore();
                  default:render(2,ctx);var t$0=3;continue}
               else
                {if(0 === t$0[0])
                  {var vs$1=t$0[1];return render_zigzag(ctx,vs$1)}
                 var
                  vs$2=t$0[1],
                  control_points=
                   function(param)
                    {if(param)
                      {var _k$_=param[2];
                       if(_k$_)
                        {var _la_=_k$_[2],_lb_=_k$_[1],_lc_=param[1];
                         if(_la_)
                          {var
                            vs=_la_[2],
                            v3=_la_[1],
                            _ld_=control_points([0,_lb_,[0,v3,vs]]),
                            v$0=_iz_(v3,_lc_),
                            v=scale(v$0,0.5),
                            _k__=[0,_iA_(_lb_,v),0];
                           return append$0([0,_iz_(_lb_,v),_k__],_ld_)}
                         return [0,_lb_,0]}}
                     return 0};
                 if(vs$2)
                  {var _k8_=vs$2[2],_k9_=vs$2[1];
                   if(_k8_)
                    if(_k8_[2])
                     {var cs$1=[0,_k9_,control_points([0,_k9_,_k8_])];
                      ctx.save();
                      ctx.beginPath();
                      move_to(ctx,_k9_);
                      var vs=_k8_,cs=cs$1;
                      for(;;)
                       {if(vs)
                         if(cs)
                          {var _k7_=cs[2];
                           if(_k7_)
                            {var
                              cs$0=_k7_[2],
                              c2=_k7_[1],
                              c1=cs[1],
                              vs$0=vs[2],
                              v=vs[1],
                              match=coords(c1),
                              y1=match[2],
                              x1=match[1],
                              match$0=coords(c2),
                              y2=match$0[2],
                              x2=match$0[1],
                              match$1=coords(v),
                              y=match$1[2],
                              x=match$1[1];
                             ctx.bezierCurveTo(x1,y1,x2,y2,x,y);
                             var vs=vs$0,cs=cs$0;
                             continue}
                           var switch$0=0}
                         else
                          var switch$0=0;
                        else
                         var switch$0=cs?0:1;
                        if(!switch$0)failwith(_iU_);
                        stroke_without_transform(ctx);
                        return ctx.restore()}}}
                 return render_zigzag(ctx,vs$2)}},
           set$0=
            function(kind$0,frame$1,color$0,line_width$0,t)
             {if(kind$0)var sth=kind$0[1],kind=sth;else var kind=t[1];
              if(frame$1)var sth$0=frame$1[1],frame=sth$0;else var frame=t[2];
              if(color$0)var sth$1=color$0[1],color=sth$1;else var color=t[3];
              if(line_width$0)
               var sth$2=line_width$0[1],line_width=sth$2;
              else
               var line_width=t[4];
              var _k6_=t[1];
              if(typeof _k6_ === "number")
               if(1 === _k6_)
                var
                 scale=max$5(frame[1],frame[2]),
                 frame$0=[0,scale,scale,frame[3],frame[4]],
                 switch$0=1;
               else
                if(0 === _k6_)
                 var switch$0=0;
                else
                 var frame$0=[0,1,1,frame[3],frame[4]],switch$0=1;
              else
               var switch$0=0;
              if(!switch$0)var frame$0=frame;
              return [0,kind,frame$0,color,line_width]},
           constr=window.Faye.Client,
           _iY_=caml_js_to_string(window.location.hostname),
           faye_url=caml_call1(sprintf(_iZ_),_iY_),
           get_buffer=
            function(t,channel)
             {function _k5_(param)
               {var
                 id=caml_call1(Id$0[26],0),
                 match=create$3(0),
                 write=match[2],
                 reader=match[1];
                return [0,
                        id,
                        create$5([0,Id$0[13],Id$0[4],Id$0[2]],0,0,0),
                        0,
                        reader,
                        write,
                        5]}
              return find_or_add(t[3],channel,_k5_)},
           publish=
            function(t,channel,msg$0)
             {var t$0=get_buffer(t,channel),seq=t$0[3];
              t$0[3] = seq + 1 | 0;
              var
               msg=[0,t$0[1],seq,msg$0],
               _k4_=json.stringify(msg,output_reviver);
              return t[1].publish(channel.toString(),_k4_)},
           subscribe_with_try=
            function(t,channel,f)
             {var t$0=get_buffer(t,channel);
              function write_to_buffer(msg$0)
               {var msg=json.parse(msg$0,input_reviver),id=msg[1];
                function _k3_(param){return [0,0,0,0,t$0[6],t$0[5]]}
                var t=find_or_add(t$0[2],id,_k3_);
                t[1] = insert(t,msg,t[1]);
                t[2] = t[2] + 1 | 0;
                var param=t[1];
                for(;;)
                 {if(param)
                   {var xs=param[2],x=param[1],seq=x[2],_kZ_=t[3];
                    if(_kZ_)
                     var seq$0=_kZ_[1],next_receive=seq$0;
                    else
                     {t[3] = [0,seq];var next_receive=seq}
                    if(seq < next_receive){var param=xs;continue}
                    if(!(next_receive < seq))
                     {caml_call1(t[5],[0,x[3]]);
                      t[2] = t[2] - 1 | 0;
                      t[3] = [0,next_receive + 1 | 0];
                      var param=xs;
                      continue}
                    var _k0_=[0,x,xs]}
                  else
                   var _k0_=0;
                  t[1] = _k0_;
                  var _k1_=t[4] < t[2]?1:0;
                  if(_k1_)
                   {var _k2_=t[4];return caml_call1(failwithf$0(_ix_),_k2_)}
                  return _k1_}}
              function read_from_buffer(msg){return caml_call1(f,msg)}
              t[1].subscribe
               (channel.toString(),caml_js_wrap_callback(write_to_buffer));
              return async
                      (function(param){return func(t$0[4],read_from_buffer)})},
           to_string$10=
            function(param)
             {switch(param[0])
               {case 0:return _i0_;
                case 1:return _i1_;
                case 2:return _i2_;
                case 3:return _i3_;
                case 4:
                 var
                  match=param[1],
                  shape=match[3],
                  _kX_=shape[1],
                  line_width=_kX_[4],
                  color=_kX_[3],
                  frame=_kX_[2],
                  kind=_kX_[1],
                  offset=color[3],
                  length=color[2],
                  colors=color[1],
                  _kW_=shape[2],
                  colors$0=concat(_iI_,map$1(colors,to_string$9)),
                  _kT_=caml_call3(sprintf(_iJ_),colors$0,length,offset),
                  _kS_=to_string$8(matrix(frame));
                 if(typeof kind === "number")
                  switch(kind)
                   {case 0:var _kU_=_iN_;break;
                    case 1:var _kU_=_iO_;break;
                    case 2:var _kU_=_iP_;break;
                    case 3:var _kU_=_iQ_;break;
                    default:var _kU_=_iR_}
                 else
                  var _kU_=0 === kind[0]?_iS_:_iT_;
                 var
                  _kV_=caml_call4(sprintf(_iV_),_kU_,_kS_,_kT_,line_width),
                  _kY_=caml_call2(sprintf(_iW_),_kV_,_kW_);
                 return caml_call1(sprintf(_i4_),_kY_);
                case 5:return _i5_;
                case 6:return _i6_;
                case 7:return _i7_;
                default:
                 var match$0=param[1],max_clients=match$0[2];
                 return caml_call1(sprintf(_i8_),max_clients)}},
           of_one_pointer=function(v){return [0,v,zero$5,1]},
           params$0=
            function(pointers,frame,get_position_exn)
             {var positions=map$1(pointers,get_position_exn);
              if(positions)
               {var _kQ_=positions[2],_kR_=positions[1];
                if(_kQ_)
                 {var
                   v2=_kQ_[1],
                   inverse=inv(matrix(frame)),
                   v1=apply(inverse,_kR_),
                   v2$0=apply(inverse,v2),
                   param=_iz_(v2$0,v1),
                   y=param[2],
                   x=param[1],
                   distance=caml_hypot_float(x,y),
                   y$0=param[2],
                   x$0=param[1],
                   angle=Math.atan2(x$0,y$0);
                  return [0,_kR_,angle,distance]}
                return of_one_pointer(_kR_)}
              return of_one_pointer(p)},
           create$9=
            function(pointers,frame,get_position_exn)
             {return [0,
                      frame,
                      params$0(pointers,frame,get_position_exn),
                      pointers]},
           frame=
            function(t,get_position_exn)
             {var
               t2=params$0(t[3],t[1],get_position_exn),
               _kP_=t[2],
               rotation=t2[2] - _kP_[2],
               scale=t2[3] / _kP_[3],
               scale_delta_x=(scale - 1) * Math.abs(Math.sin(t2[2])),
               scale_delta_y=(scale - 1) * Math.abs(Math.cos(t2[2])),
               sx=1 + scale_delta_x,
               sy=1 + scale_delta_y,
               move_by=_iz_(t2[1],_kP_[1]),
               _kO_=translate$0(move_by),
               frame_diff=
                _iE_(_iE_(scale$0(sx,sy),[0,_iG_,_iF_,rotation,p]),_kO_);
              return _iE_(t[1],frame_diff)},
           active=
            function(t)
             {var _kN_=t[1];
              return fold$0
                      (_kN_,0,function(key,param,acc){return [0,key,acc]})},
           get_position_exn=
            function(t)
             {var _kL_=t[2];return function(_kM_){return find_exn(_kL_,_kM_)}},
           update=
            function(t)
             {var get_position_exn$0=get_position_exn(t),results=[0,0];
              function _kJ_(shape_id,group)
               {var
                 _kK_=map$1(group[3],get_position_exn$0),
                 single=[0,frame(group,get_position_exn$0),_kK_];
                results[1] = [0,[0,shape_id,[0,single]],results[1]];
                return 0}
              iteri(t[1],_kJ_);
              return results[1]},
           add$2=
            function(t,shape_id,shape,pointer)
             {var get_position_exn$0=get_position_exn(t);
              set(t[2],pointer[1],pointer[2]);
              var match=find(t[1],shape_id);
              if(match)
               var group=match[1],current_pointers=group[3];
              else
               var current_pointers=0;
              var
               pointers=append$0(current_pointers,[0,pointer[1],0]),
               group$0=create$9(pointers,shape,get_position_exn$0);
              set(t[1],shape_id,group$0);
              return update(t)},
           create$10=
            function(shape,owner)
             {var last_touched=unix_gettimeofday(0);
              return [0,shape,owner,0,last_touched]},
           set$1=
            function(t,opt,_kI_,_kH_,param)
             {if(opt)var sth=opt[1],shape=sth;else var shape=t[1];
              if(_kI_)var sth$0=_kI_[1],owner=sth$0;else var owner=t[2];
              if(_kH_)
               var sth$1=_kH_[1],requested=sth$1;
              else
               var requested=t[3];
              var last_touched=unix_gettimeofday(0);
              return [0,shape,owner,requested,last_touched]},
           encode_shape=function(t,shape){return [0,shape,t[11]]},
           decode_shape=
            function(t$0,shape)
             {var
               scale$0=t$0[11] / shape[2],
               t=shape[1],
               _kG_=t[2],
               _kF_=scale(_kG_[4],scale$0);
              return set$0
                      (0,
                       [0,[0,_kG_[1] * scale$0,_kG_[2] * scale$0,_kG_[3],_kF_]],
                       0,
                       0,
                       t)},
           is_owner=
            function(t,shape_id)
             {var match=find(t[5],shape_id);
              if(match)
               {var shape_info=match[1],match$0=shape_info[2];
                if(match$0)
                 {var client_id=match$0[1];
                  return caml_call2(Client_id[12],client_id,t[3])}
                return 0}
              return 0},
           call_on_change=
            function(t,shape_id,shape)
             {function _kE_(f){return caml_call2(f,shape_id,shape)}
              return iter$0(t[12],_kE_)},
           _i9_=
            function(t,shape_id,f)
             {var match=find(t[5],shape_id);
              if(match)
               {var shape=match[1],_kD_=caml_call1(f,shape);
                return set(t[5],shape_id,_kD_)}
              error(_i__);
              return 0},
           publish$0=function(t,msg){return publish(t[1],global,msg)},
           _i$_=
            function(t,client_id,shape_id,shape)
             {var shape_info=create$10(shape,[0,client_id]);
              set(t[5],shape_id,shape_info);
              t[4] = bring_to_front(t[4],shape_id,Shape_id[12]);
              return call_on_change(t,shape_id,shape)},
           process_message=
            function(t,msg$0)
             {switch(msg$0[0])
               {case 0:
                 var
                  match$0=msg$0[1],
                  shape_id=match$0[2],
                  client_id=match$0[1],
                  _kz_=t[2];
                 return _kz_
                         ?_i9_
                           (t,
                            shape_id,
                            function(shape)
                             {var match=shape[2];
                              return match
                                      ?shape
                                      :(publish$0(t,[1,[0,client_id,shape_id]]),
                                        set$1(shape,0,[0,[0,client_id]],0,0))})
                         :_kz_;
                case 1:
                 var
                  match$1=msg$0[1],
                  shape_id$0=match$1[2],
                  client_id$0=match$1[1],
                  release=
                   function(param){return publish(t[1],global,[2,shape_id$0])},
                  match=find(t[5],shape_id$0);
                 if(match)
                  {var shape=match[1];
                   if(caml_call2(Client_id[12],t[3],client_id$0))
                    if(!shape[3])return release(0);
                   var shape$0=set$1(shape,0,[0,[0,client_id$0]],0,0);
                   set(t[5],shape_id$0,shape$0);
                   t[4] = bring_to_front(t[4],shape_id$0,Shape_id[12]);
                   return 0}
                 var _ky_=caml_call2(Client_id[12],t[3],client_id$0);
                 return _ky_?release(0):_ky_;
                case 2:
                 var shape_id$1=msg$0[1];
                 return _i9_
                         (t,
                          shape_id$1,
                          function(shape){return set$1(shape,0,_ja_,0,0)});
                case 3:
                 var
                  match$2=msg$0[1],
                  shape$1=match$2[3],
                  client_id$1=match$2[2],
                  shape_id$2=match$2[1],
                  _kA_=caml_call2(Client_id[11],client_id$1,t[3]);
                 return _kA_
                         ?_i$_(t,client_id$1,shape_id$2,decode_shape(t,shape$1))
                         :_kA_;
                case 4:
                 var
                  match$3=msg$0[1],
                  shape$2=match$3[3],
                  shape_id$3=match$3[2],
                  shape$3=decode_shape(t,shape$2);
                 _i9_
                  (t,
                   shape_id$3,
                   function(shape_info)
                    {return set$1(shape_info,[0,shape$3],0,0,0)});
                 return call_on_change(t,shape_id$3,shape$3);
                case 5:
                 var shape_id$4=msg$0[1];
                 remove$0(t[5],shape_id$4);
                 t[4] = delete$0(t[4],shape_id$4,Shape_id[12]);
                 return 0;
                case 6:
                 var match$4=msg$0[1],channel=match$4[2],_kB_=t[2];
                 if(_kB_)
                  {var
                    _kw_=
                     function(shape_id)
                      {var
                        shape_info=find_exn(t[5],shape_id),
                        shape=shape_info[1],
                        owner=shape_info[2];
                       return [0,shape_id,encode_shape(t,shape),owner]},
                    shapes=map$1(rev(t[4]),_kw_),
                    _kx_=unix_gettimeofday(0);
                   return publish(t[1],channel,[7,[0,shapes,t[9],t[10],_kx_]])}
                 return _kB_;
                case 7:
                 var msg=msg$0[1],_kC_=1 - t[2];
                 if(_kC_)
                  {var
                    time=msg[4],
                    height=msg[3],
                    width=msg[2],
                    shapes$0=msg[1],
                    scale_x=t[9] / width,
                    scale_y=t[10] / height;
                   t[11] = min$5(min$5(scale_x,scale_y),1);
                   iter$0
                    (shapes$0,
                     function(param)
                      {var
                        owner=param[3],
                        shape=param[2],
                        shape_id=param[1],
                        shape$0=decode_shape(t,shape);
                       t[4] = [0,shape_id,t[4]];
                       var shape_info=create$10(shape$0,owner);
                       return set(t[5],shape_id,shape_info)});
                   t[4] = rev(t[4]);
                   t[8] = time - unix_gettimeofday(0);
                   return 0}
                 return _kC_;
                default:
                 var match$5=msg$0[1],max_clients=match$5[2];
                 caml_call1
                  (ksprintf(function(s){return window.alert(s.toString())},f),
                   max_clients);
                 return raise$0(Shutdown)}},
           change=
            function(t,shape_id,f)
             {var _ku_=is_owner(t,shape_id);
              if(_ku_)
               {var match=find(t[5],shape_id);
                if(match)
                 {var
                   shape=match[1],
                   shape$0=caml_call1(f,shape[1]),
                   shape$1=[0,shape$0,t[11]];
                  return publish$0(t,[4,[0,t[3],shape_id,shape$1]])}
                var _kv_=0}
              else
               var _kv_=_ku_;
              return _kv_},
           apply_touch_update=
            function(t,update)
             {return iter$0
                      (update,
                       function(param)
                        {var update=param[2],shape_id=param[1];
                         if(update)
                          {var
                            update$0=update[1],
                            _kr_=
                             function(shape$0)
                              {var
                                touches=update$0[2],
                                frame=update$0[1],
                                t$0=set$0(0,[0,frame],0,0,shape$0);
                               function invert(vs)
                                {var m=inv(matrix(t$0[2]));
                                 return map$1(vs,function(_kt_){return apply(m,_kt_)})}
                               var
                                kind=t$0[1],
                                kind$0=
                                 typeof kind === "number"
                                  ?kind
                                  :0 === kind[0]?[0,invert(touches)]:[1,invert(touches)],
                                shape=set$0([0,kind$0],0,0,0,t$0);
                               t[4] = shape;
                               return shape};
                           return change(t[2],shape_id,_kr_)}
                         var _ks_=t[2],_kq_=is_owner(_ks_,shape_id);
                         return _kq_?publish$0(_ks_,[5,shape_id]):_kq_})},
           process_action=
            function(t,action)
             {var _kf_=action[1];
              if(-933174511 === _kf_)
               {var _kh_=t[3],_kg_=action[2];
                iter$0
                 (_kg_,
                  function(pointer){return set(_kh_[2],pointer[1],pointer[2])});
                return apply_touch_update(t,update(_kh_))}
              if(26203 <= _kf_)
               {var
                 _ki_=t[3],
                 ys=map$1(action[2],id),
                 get_position_exn$0=get_position_exn(_ki_),
                 deleted_shapes=[0,0],
                 _kc_=_ki_[1],
                 map_results=
                  fold$0
                   (_kc_,
                    0,
                    function(shape_id,group,ac)
                     {var
                       _kn_=group[3],
                       pointers=
                        filter
                         (_kn_,
                          function(x)
                           {var param=ys;
                            for(;;)
                             {if(param)
                               {var bs=param[2],b=param[1],_ko_=equal(x,b);
                                if(!_ko_){var param=bs;continue}
                                var _kp_=_ko_}
                              else
                               var _kp_=0;
                              return 1 - _kp_}});
                      if(pointers)
                       var
                        frame$0=frame(group,get_position_exn$0),
                        group$0=create$9(pointers,frame$0,get_position_exn$0),
                        _km_=[0,group$0];
                      else
                       {deleted_shapes[1] = [0,shape_id,deleted_shapes[1]];
                        var _km_=0}
                      return [0,[0,shape_id,_km_],ac]});
                iter$0
                 (map_results,
                  function(param)
                   {var result=param[2],key=param[1];
                    if(result){var data=result[1];return set(_kc_,key,data)}
                    return remove$0(_kc_,key)});
                var _kd_=_ki_[2];
                iter$0(ys,function(_kl_){return remove$0(_kd_,_kl_)});
                var _ke_=function(shape_id){return [0,shape_id,0]};
                return apply_touch_update(t,map$1(deleted_shapes[1],_ke_))}
              var touch=hd_exn(action[2]),shape_ids=active(t[3]);
              if(shape_ids)
               return iter$0
                       (shape_ids,
                        function(shape_id)
                         {var shape=find_exn(t[2][5],shape_id);
                          return apply_touch_update
                                  (t,add$2(t[3],shape_id,shape[1][2],touch))});
              var
               _kj_=t[4],
               _kb_=_kj_[2],
               shape=
                set$0(0,[0,[0,_kb_[1],_kb_[2],_kb_[3],touch[2]]],0,0,_kj_),
               _kk_=t[2],
               shape_id=caml_call1(Shape_id[26],0);
              _i$_(_kk_,_kk_[3],shape_id,shape);
              var shape$0=encode_shape(_kk_,shape);
              publish$0(_kk_,[3,[0,shape_id,_kk_[3],shape$0]]);
              return apply_touch_update(t,add$2(t[3],shape_id,shape[2],touch))},
           colors=
            [0,
             red,
             [0,magenta,[0,blue,[0,cyan,[0,green,[0,yellow,[0,red,0]]]]]]],
           color_for_coordinate=
            function(width,height,v)
             {var
               match=coords(v),
               y=match[2],
               x=match[1],
               t=interpolate(colors,y / height),
               scale=x / width;
              if(scale <= 0)return black;
              if(1 <= scale)return t;
              var
               a=t[4],
               b=t[3],
               g=t[2],
               r=t[1],
               r$0=to_int$1(r * scale),
               g$0=to_int$1(g * scale),
               b$0=to_int$1(b * scale);
              return [0,r$0,g$0,b$0,a]},
           main=
            function(param$0)
             {add_event_listener
               (window,
                resize$1,
                function(param){return window.location.reload()});
              if(am_testing)failwith(_er_);
              var seed=caml_sys_random_seed(0),t2=make$1(seed);
              blit$1(t2[1],0,s$0[1],0,s$0[1].length - 1);
              s$0[2] = t2[2];
              var
               ctx=create$8(_jb_),
               width$1=width(ctx),
               height=height$0(ctx),
               _jD_=to_int$1(width$1),
               _jC_=0;
              if(!(_jD_ < 0))
               {var i$1=_jC_;
                for(;;)
                 {var _jF_=to_int$1(height),_jE_=0;
                  if(!(_jF_ < 0))
                   {var j=_jE_;
                    for(;;)
                     {var
                       _jH_=(i$1 % 3 | 0) === 0?1:0,
                       _jI_=_jH_?(j % 3 | 0) === 0?1:0:_jH_;
                      if(_jI_)
                       {var
                         v=create$6(i$1,j),
                         color$1=color_for_coordinate(width$1,height,v);
                        set_fill_color(ctx,color$1);
                        var match$0=coords(v),y$1=match$0[2],x$1=match$0[1];
                        ctx.fillRect(x$1,y$1,3,3)}
                      var _jJ_=j + 1 | 0;
                      if(_jF_ !== j){var j=_jJ_;continue}
                      break}}
                  var _jG_=i$1 + 1 | 0;
                  if(_jD_ !== i$1){var i$1=_jG_;continue}
                  break}}
              var ctx$0=create$8(_jc_),actions=canvas_actions(ctx$0);
              function _jL_(param)
               {var action=param[2],shape=param[1];
                function _j0_(t)
                 {process_action(t,action);
                  async
                   (function(param)
                     {var
                       width$0=width(ctx),
                       height=height$0(ctx),
                       _j8_=canvas_actions(ctx);
                      return func
                              (_j8_,
                               function(action)
                                {var _j__=action[1],_j$_=action[3];
                                 if(-1032980382 !== _j__)
                                  {var switch$0=-933174511 === _j__?338892735 === _j$_?1:0:0;
                                   if(!switch$0)return 0}
                                 var
                                  v=coords$0(action),
                                  c=color_for_coordinate(width$0,height,v),
                                  color=[0,[0,c,0],2,0.1];
                                 t[4] = set$0(0,0,[0,color],0,t[4]);
                                 function _j9_(shape_id)
                                  {function _ka_(eta){return set$0(0,0,[0,color],0,eta)}
                                   return change(t[2],shape_id,_ka_)}
                                 return iter$0(active(t[3]),_j9_)})});
                  return func
                          (actions,function(_j7_){return process_action(t,_j7_)})}
                function _jY_(global)
                 {var
                   groups=
                    create$5([0,Shape_id[13],Shape_id[4],Shape_id[2]],0,0,0),
                   positions=create$5([0,ascending,sexp_of_t$1,_iM_],0,0,0);
                  return return$0([0,ctx$0,global,[0,groups,positions],shape])}
                var
                 viewport_height=height$0(ctx$0),
                 viewport_width=width(ctx$0),
                 faye=new constr(faye_url.toString()),
                 buffers=
                  create$5([0,ascending,sexp_of_t$1,Base_hash_string],0,0,0),
                 faye$0=[0,faye,to_string$10,buffers],
                 _jT_=
                  create$5([0,Client_id[13],Client_id[4],Client_id[2]],0,0,0),
                 _jU_=create$5([0,Shape_id[13],Shape_id[4],Shape_id[2]],0,0,0),
                 t$0=
                  [0,
                   faye$0,
                   0,
                   caml_call1(Client_id[26],0),
                   0,
                   _jU_,
                   2,
                   _jT_,
                   zero$4,
                   viewport_width,
                   viewport_height,
                   1,
                   0];
                function _jV_(_j6_){return process_message(t$0,_j6_)}
                subscribe_with_try(t$0[1],global,_jV_);
                if(t$0[2])
                 {var
                   loop=
                    function(param)
                     {var time=unix_gettimeofday(0);
                      function _j2_(shape_id)
                       {var
                         shape=find_exn(t$0[5],shape_id),
                         last_touched=shape[4],
                         age=time - last_touched;
                        return 30 < age?(remove$0(t$0[5],shape_id),0):1}
                      t$0[4] = filter(t$0[4],_j2_);
                      function _j1_(param){return loop(0)}
                      var match=task(0),w=match[2],t=match[1],d=1e3;
                      function callback(_j5_){return wakeup(w,_j5_)}
                      var id=[0,0];
                      function loop$0(step,param)
                       {if(2147483e3 < step)
                         var step$0=overflow_limit,remain=step - 2147483e3;
                        else
                         var step$0=step,remain=0;
                        var
                         cb=
                          remain == 0
                           ?callback
                           :function(_j4_){return loop$0(remain,_j4_)};
                        id[1]
                        =
                        [0,window.setTimeout(caml_js_wrap_callback(cb),step$0)];
                        return 0}
                      loop$0(d,0);
                      on_cancel
                       (t,
                        function(param)
                         {var _j3_=id[1];
                          if(_j3_)
                           {var x=_j3_[1];id[1] = 0;return window.clearTimeout(x)}
                          return 0});
                      return _cP_(t,_j1_)};
                  async(loop);
                  var _jZ_=return$0(t$0)}
                else
                 {var
                   _jS_=int$0(1e8),
                   channel=caml_call1(sprintf(_iX_),_jS_),
                   _jW_=function(param){return return$0(t$0)},
                   match=task(0),
                   w=match[2],
                   t=match[1],
                   _jX_=
                    function(msg){process_message(t$0,msg);return wakeup(w,0)};
                  subscribe_with_try(t$0[1],channel,_jX_);
                  publish$0(t$0,[6,[0,t$0[3],channel]]);
                  var _jZ_=_cP_(t,_jW_)}
                return _cP_(_cP_(_jZ_,_jY_),_j0_)}
              var
               width$2=to_int$1(width(ctx$0)),
               height$2=to_int$1(height$0(ctx$0)),
               hstep=caml_div(width$2,length(l)),
               r=int$0(255),
               g=int$0(255),
               b=int$0(255),
               color=[0,r,g,b,1],
               _jp_=to_string$9(color);
              caml_call1(debug(_iK_),_jp_);
              var
               color$0=[0,[0,color,[0,color,[0,color,[0,color,0]]]],2,0.1],
               i=0,
               acc=0,
               param=l;
              for(;;)
               {if(param)
                 {var
                   t=param[2],
                   h=param[1],
                   x$2=caml_mul(hstep,i) + (hstep / 2 | 0) | 0,
                   y$2=height$2 / 2 | 0,
                   frame$0=translate$0(create$6(x$2,y$2));
                  if(opt)
                   var sth=opt[1],line_width=sth;
                  else
                   var line_width=default_line_width;
                  var
                   shape=[0,h,frame$0,color$0,line_width],
                   margin=min$0(50,hstep / 5 | 0),
                   size=min$0(hstep,height$2) - margin | 0,
                   p=
                    create$6
                     (caml_mul(hstep,i) + (margin / 2 | 0) | 0,
                      (height$2 - size | 0) / 2 | 0);
                  ctx$0.save();
                  var match=coords(p),y$0=match[2],x$0=match[1];
                  ctx$0.beginPath();
                  ctx$0.rect(x$0,y$0,size,size);
                  ctx$0.clip();
                  var line_width$0=shape[4],_jx_=shape[1];
                  if(typeof _jx_ === "number")
                   switch(_jx_)
                    {case 0:var _jy_=height$1;break;
                     case 1:var _jy_=200;break;
                     case 2:var _jy_=0;break;
                     case 3:var _jy_=0;break;
                     default:var _jy_=0}
                  else
                   if(0 === _jx_[0])
                    var vs$1=_jx_[1],_jy_=max_diff(vs$1,y) + line_width$0 * 2;
                   else
                    var vs$2=_jx_[1],_jy_=max_diff(vs$2,y) + line_width$0 * 2;
                  var _jz_=shape[1];
                  if(typeof _jz_ === "number")
                   switch(_jz_)
                    {case 0:var _jA_=width$0;break;
                     case 1:var _jA_=200;break;
                     case 2:var _jA_=0;break;
                     case 3:var _jA_=0;break;
                     default:var _jA_=0}
                  else
                   if(0 === _jz_[0])
                    var vs=_jz_[1],_jA_=max_diff(vs,x) + line_width$0 * 2;
                   else
                    var vs$0=_jz_[1],_jA_=max_diff(vs$0,x) + line_width$0 * 2;
                  var
                   current_size=max$5(_jA_,_jy_),
                   s=min$5(1,size / current_size),
                   _jB_=scale$0(s,s),
                   frame=_iE_(shape[2],_jB_),
                   shape$0=set$0(0,[0,frame],0,0,shape);
                  ctx$0.save();
                  var _jw_=shape$0[3],_jq_=_jw_[1];
                  if(_jq_)
                   var c=_jq_[1],colors=append$0(_jq_,[0,c,0]);
                  else
                   var colors=0;
                  var
                   fraction=(100 - _jw_[3] * _jw_[2]) % _jw_[2] / _jw_[2],
                   current_color=interpolate(colors,fraction);
                  set_fill_color(ctx$0,current_color);
                  ctx$0.strokeStyle = to_string$9(current_color).toString();
                  ctx$0.lineWidth = shape$0[4];
                  ctx$0.lineJoin = "round";
                  ctx$0.lineCap = "round";
                  var m$0=matrix(shape$0[2]);
                  suitable_for_context2d_exn(m$0);
                  var
                   m=coeffs(m$0),
                   c$1=
                    function(m)
                     {function c(i,j)
                       {return caml_check_bound(caml_check_bound(m,i)[i + 1],j)
                                [j + 1]}
                      return c},
                   c$0=c$1(m),
                   _jr_=c$0(1,2),
                   _js_=c$0(0,2),
                   _jt_=c$0(1,1),
                   _ju_=c$0(0,1),
                   _jv_=c$0(1,0);
                  ctx$0.transform(c$0(0,0),_jv_,_ju_,_jt_,_js_,_jr_);
                  render(shape$0[1],ctx$0);
                  ctx$0.restore();
                  ctx$0.restore();
                  var
                   acc$0=[0,shape$0,acc],
                   i$0=i + 1 | 0,
                   i=i$0,
                   acc=acc$0,
                   param=t;
                  continue}
                var
                 shapes=rev(acc),
                 _jK_=
                  function(action)
                   {var
                     p=coords$0(action),
                     n=caml_div(to_int$1(p[1]),hstep),
                     _jR_=height$0(ctx$0);
                    ctx$0.clearRect(0,0,width(ctx$0),_jR_);
                    var
                     eta=nth_exn(shapes,n),
                     shape=set$0(0,0,0,[0,default_line_width],eta);
                    return return$0([0,shape,action])},
                 f=
                  function(action)
                   {var _jQ_=action[1];
                    if(_jQ_ === -1032980382)
                     var match=0;
                    else
                     {if(-933174511 === _jQ_)
                       var switch$0=0;
                      else
                       if(26203 <= _jQ_)var switch$0=0;else var match=0,switch$0=1;
                      if(!switch$0)var match=caml_int_compare(_jQ_,-1032980382)}
                    return 0 === match?1:0},
                 _jo_=
                  function(x$0)
                   {if(x$0)
                     var x=x$0[1],_jP_=x;
                    else
                     {var error=of_string(_fh_);
                      if(caml_obj_tag(error) !== 246)
                       {var
                         _jM_=caml_obj_tag(error),
                         _jN_=
                          250 === _jM_
                           ?error[1]
                           :246 === _jM_?force_lazy_block(error):error;
                        if(2 === _jN_[0])
                         var exn=_jN_[1],_jO_=exn;
                        else
                         var _jO_=[0,Exn,error]}
                      else
                       var _jO_=[0,Exn,error];
                      var _jP_=raise(_jO_)}
                    return return$0(_jP_)};
                return _cP_
                        (_cP_(_cP_(find_rec(actions[3],f,actions),_jo_),_jK_),_jL_)}};
          top_level(main);
          do_at_exit(0);
          return}
        throw [0,Assert_failure,_jf_]}
      throw [0,Assert_failure,_jg_]}
    throw [0,Assert_failure,_jh_]}
  (function(){return this}()));

//# sourceMappingURL=index_client_light.map
